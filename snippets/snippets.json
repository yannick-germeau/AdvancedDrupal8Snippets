{
    "hook_ENTITY_TYPE_access": {
        "body": [
            "/**",
            "* Implements hook_ENTITY_TYPE_access().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_${ENTITY_TYPE}_access(\\Drupal\\Core\\Entity\\EntityInterface \\$$entity, \\$$operation, \\Drupal\\Core\\Session\\AccountInterface \\$$account) {",
            "",
            "\t/*",
            "\t\t// No opinion.",
            "\t\treturn AccessResult::neutral();",
            "\t*/",
            "}"
        ],
        "description": "Control entity operation access for a specific entity type.",
        "prefix": "hook_ENTITY_TYPE_access",
        "scope": "php"
    },
    "hook_ENTITY_TYPE_build_defaults_alter": {
        "body": [
            "/**",
            "* Implements hook_ENTITY_TYPE_build_defaults_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_${ENTITY_TYPE}_build_defaults_alter(array &\\$$build, \\Drupal\\Core\\Entity\\EntityInterface \\$$entity, \\$$view_mode) {",
            "",
            "\t/*",
            "\t",
            "\t*/",
            "}"
        ],
        "description": "Alter entity renderable values before cache checking in drupal_render().",
        "prefix": "hook_ENTITY_TYPE_build_defaults_alter",
        "scope": "php"
    },
    "hook_ENTITY_TYPE_create": {
        "body": [
            "/**",
            "* Implements hook_ENTITY_TYPE_create().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_${ENTITY_TYPE}_create(\\Drupal\\Core\\Entity\\EntityInterface \\$$entity) {",
            "",
            "\t/*",
            "\t\t\\Drupal::logger('example')->info('ENTITY_TYPE created: @label', ['@label' => \\$$entity->label()]);",
            "\t*/",
            "}"
        ],
        "description": "Acts when creating a new entity of a specific type.",
        "prefix": "hook_ENTITY_TYPE_create",
        "scope": "php"
    },
    "hook_ENTITY_TYPE_create_access": {
        "body": [
            "/**",
            "* Implements hook_ENTITY_TYPE_create_access().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_${ENTITY_TYPE}_create_access(\\Drupal\\Core\\Session\\AccountInterface \\$$account, array \\$$context, \\$$entity_bundle) {",
            "",
            "\t/*",
            "\t\t// No opinion.",
            "\t\treturn AccessResult::neutral();",
            "\t*/",
            "}"
        ],
        "description": "Control entity create access for a specific entity type.",
        "prefix": "hook_ENTITY_TYPE_create_access",
        "scope": "php"
    },
    "hook_ENTITY_TYPE_delete": {
        "body": [
            "/**",
            "* Implements hook_ENTITY_TYPE_delete().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_${ENTITY_TYPE}_delete(Drupal\\Core\\Entity\\EntityInterface \\$$entity) {",
            "",
            "\t/*",
            "\t\t// Delete the entity's entry from a fictional table of all entities.",
            "\t\tdb_delete('example_entity')",
            "\t\t\t->condition('type', \\$$entity->getEntityTypeId())",
            "\t\t\t->condition('id', \\$$entity->id())",
            "\t\t\t->execute();",
            "\t*/",
            "}"
        ],
        "description": "Respond to entity deletion of a particular type.",
        "prefix": "hook_ENTITY_TYPE_delete",
        "scope": "php"
    },
    "hook_ENTITY_TYPE_field_values_init": {
        "body": [
            "/**",
            "* Implements hook_ENTITY_TYPE_field_values_init().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_${ENTITY_TYPE}_field_values_init(\\Drupal\\Core\\Entity\\FieldableEntityInterface \\$$entity) {",
            "",
            "\t/*",
            "\t\tif (!\\$$entity->foo->value) {",
            "\t\t\t\\$$entity->foo->value = 'some_initial_value';",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Acts when initializing a fieldable entity object.",
        "prefix": "hook_ENTITY_TYPE_field_values_init",
        "scope": "php"
    },
    "hook_ENTITY_TYPE_insert": {
        "body": [
            "/**",
            "* Implements hook_ENTITY_TYPE_insert().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_${ENTITY_TYPE}_insert(Drupal\\Core\\Entity\\EntityInterface \\$$entity) {",
            "",
            "\t/*",
            "\t\t// Insert the new entity into a fictional table of this type of entity.",
            "\t\tdb_insert('example_entity')",
            "\t\t\t->fields([",
            "\t\t\t\t'id' => \\$$entity->id(),",
            "\t\t\t\t'created' => REQUEST_TIME,",
            "\t\t\t\t'updated' => REQUEST_TIME,",
            "\t\t\t])",
            "\t\t\t->execute();",
            "\t*/",
            "}"
        ],
        "description": "Respond to creation of a new entity of a particular type.",
        "prefix": "hook_ENTITY_TYPE_insert",
        "scope": "php"
    },
    "hook_ENTITY_TYPE_load": {
        "body": [
            "/**",
            "* Implements hook_ENTITY_TYPE_load().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_${ENTITY_TYPE}_load(\\$$entities) {",
            "",
            "\t/*",
            "\t\tforeach (\\$$entities as \\$$entity) {",
            "\t\t\t\\$$entity->foo = mymodule_add_something(\\$$entity);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Act on entities of a specific type when loaded.",
        "prefix": "hook_ENTITY_TYPE_load",
        "scope": "php"
    },
    "hook_ENTITY_TYPE_predelete": {
        "body": [
            "/**",
            "* Implements hook_ENTITY_TYPE_predelete().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_${ENTITY_TYPE}_predelete(Drupal\\Core\\Entity\\EntityInterface \\$$entity) {",
            "",
            "\t/*",
            "\t\t// Count references to this entity in a custom table before they are removed",
            "\t\t// upon entity deletion.",
            "\t\t\\$$id = \\$$entity->id();",
            "\t\t\\$$type = \\$$entity->getEntityTypeId();",
            "\t\t\\$$count = db_select('example_entity_data')",
            "\t\t\t->condition('type', \\$$type)",
            "\t\t\t->condition('id', \\$$id)",
            "\t\t\t->countQuery()",
            "\t\t\t->execute()",
            "\t\t\t->fetchField();",
            "\t",
            "\t\t// Log the count in a table that records this statistic for deleted entities.",
            "\t\tdb_merge('example_deleted_entity_statistics')",
            "\t\t\t->key(['type' => \\$$type, 'id' => \\$$id])",
            "\t\t\t->fields(['count' => \\$$count])",
            "\t\t\t->execute();",
            "\t*/",
            "}"
        ],
        "description": "Act before entity deletion of a particular entity type.",
        "prefix": "hook_ENTITY_TYPE_predelete",
        "scope": "php"
    },
    "hook_ENTITY_TYPE_prepare_form": {
        "body": [
            "/**",
            "* Implements hook_ENTITY_TYPE_prepare_form().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_${ENTITY_TYPE}_prepare_form(\\Drupal\\Core\\Entity\\EntityInterface \\$$entity, \\$$operation, \\Drupal\\Core\\Form\\FormStateInterface \\$$form_state) {",
            "",
            "\t/*",
            "\t\tif (\\$$operation == 'edit') {",
            "\t\t\t\\$$entity->label->value = 'Altered label';",
            "\t\t\t\\$$form_state->set('label_altered', TRUE);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Acts on a particular type of entity object about to be in an entity form.",
        "prefix": "hook_ENTITY_TYPE_prepare_form",
        "scope": "php"
    },
    "hook_ENTITY_TYPE_presave": {
        "body": [
            "/**",
            "* Implements hook_ENTITY_TYPE_presave().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_${ENTITY_TYPE}_presave(Drupal\\Core\\Entity\\EntityInterface \\$$entity) {",
            "",
            "\t/*",
            "\t\tif (\\$$entity->isTranslatable()) {",
            "\t\t\t\\$$route_match = \\Drupal::routeMatch();",
            "\t\t\t\\Drupal::service('content_translation.synchronizer')->synchronizeFields(\\$$entity, \\$$entity->language()->getId(), \\$$route_match->getParameter('source_langcode'));",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Act on a specific type of entity before it is created or updated.",
        "prefix": "hook_ENTITY_TYPE_presave",
        "scope": "php"
    },
    "hook_ENTITY_TYPE_revision_create": {
        "body": [
            "/**",
            "* Implements hook_ENTITY_TYPE_revision_create().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_${ENTITY_TYPE}_revision_create(Drupal\\Core\\Entity\\EntityInterface \\$$new_revision, Drupal\\Core\\Entity\\EntityInterface \\$$entity, \\$$keep_untranslatable_fields) {",
            "",
            "\t/*",
            "\t\t// Retain the value from an untranslatable field, which are by default",
            "\t\t// synchronized from the default revision.",
            "\t\t\\$$new_revision->set('untranslatable_field', \\$$entity->get('untranslatable_field'));",
            "\t*/",
            "}"
        ],
        "description": "Respond to entity revision creation.",
        "prefix": "hook_ENTITY_TYPE_revision_create",
        "scope": "php"
    },
    "hook_ENTITY_TYPE_revision_delete": {
        "body": [
            "/**",
            "* Implements hook_ENTITY_TYPE_revision_delete().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_${ENTITY_TYPE}_revision_delete(Drupal\\Core\\Entity\\EntityInterface \\$$entity) {",
            "",
            "\t/*",
            "\t\t\\$$referenced_files_by_field = _editor_get_file_uuids_by_field(\\$$entity);",
            "\t\tforeach (\\$$referenced_files_by_field as \\$$field => \\$$uuids) {",
            "\t\t\t_editor_delete_file_usage(\\$$uuids, \\$$entity, 1);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Respond to entity revision deletion of a particular type.",
        "prefix": "hook_ENTITY_TYPE_revision_delete",
        "scope": "php"
    },
    "hook_ENTITY_TYPE_storage_load": {
        "body": [
            "/**",
            "* Implements hook_ENTITY_TYPE_storage_load().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_${ENTITY_TYPE}_storage_load(array \\$$entities) {",
            "",
            "\t/*",
            "\t\tforeach (\\$$entities as \\$$entity) {",
            "\t\t\t\\$$entity->foo = mymodule_add_something_uncached(\\$$entity);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Act on content entities of a given type when loaded from the storage.",
        "prefix": "hook_ENTITY_TYPE_storage_load",
        "scope": "php"
    },
    "hook_ENTITY_TYPE_translation_create": {
        "body": [
            "/**",
            "* Implements hook_ENTITY_TYPE_translation_create().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_${ENTITY_TYPE}_translation_create(\\Drupal\\Core\\Entity\\EntityInterface \\$$translation) {",
            "",
            "\t/*",
            "\t\t\\Drupal::logger('example')->info('ENTITY_TYPE translation created: @label', ['@label' => \\$$translation->label()]);",
            "\t*/",
            "}"
        ],
        "description": "Acts when creating a new entity translation of a specific type.",
        "prefix": "hook_ENTITY_TYPE_translation_create",
        "scope": "php"
    },
    "hook_ENTITY_TYPE_translation_delete": {
        "body": [
            "/**",
            "* Implements hook_ENTITY_TYPE_translation_delete().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_${ENTITY_TYPE}_translation_delete(\\Drupal\\Core\\Entity\\EntityInterface \\$$translation) {",
            "",
            "\t/*",
            "\t\t\\$$variables = [",
            "\t\t\t'@language' => \\$$translation->language()->getName(),",
            "\t\t\t'@label' => \\$$translation->label(),",
            "\t\t];",
            "\t\t\\Drupal::logger('example')->notice('The @language translation of @label has just been deleted.', \\$$variables);",
            "\t*/",
            "}"
        ],
        "description": "Respond to entity translation deletion of a particular type.",
        "prefix": "hook_ENTITY_TYPE_translation_delete",
        "scope": "php"
    },
    "hook_ENTITY_TYPE_translation_insert": {
        "body": [
            "/**",
            "* Implements hook_ENTITY_TYPE_translation_insert().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_${ENTITY_TYPE}_translation_insert(\\Drupal\\Core\\Entity\\EntityInterface \\$$translation) {",
            "",
            "\t/*",
            "\t\t\\$$variables = [",
            "\t\t\t'@language' => \\$$translation->language()->getName(),",
            "\t\t\t'@label' => \\$$translation->getUntranslated()->label(),",
            "\t\t];",
            "\t\t\\Drupal::logger('example')->notice('The @language translation of @label has just been stored.', \\$$variables);",
            "\t*/",
            "}"
        ],
        "description": "Respond to creation of a new entity translation of a particular type.",
        "prefix": "hook_ENTITY_TYPE_translation_insert",
        "scope": "php"
    },
    "hook_ENTITY_TYPE_update": {
        "body": [
            "/**",
            "* Implements hook_ENTITY_TYPE_update().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_${ENTITY_TYPE}_update(Drupal\\Core\\Entity\\EntityInterface \\$$entity) {",
            "",
            "\t/*",
            "\t\t// Update the entity's entry in a fictional table of this type of entity.",
            "\t\tdb_update('example_entity')",
            "\t\t\t->fields([",
            "\t\t\t\t'updated' => REQUEST_TIME,",
            "\t\t\t])",
            "\t\t\t->condition('id', \\$$entity->id())",
            "\t\t\t->execute();",
            "\t*/",
            "}"
        ],
        "description": "Respond to updates to an entity of a particular type.",
        "prefix": "hook_ENTITY_TYPE_update",
        "scope": "php"
    },
    "hook_ENTITY_TYPE_view": {
        "body": [
            "/**",
            "* Implements hook_ENTITY_TYPE_view().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_${ENTITY_TYPE}_view(array &\\$$build, \\Drupal\\Core\\Entity\\EntityInterface \\$$entity, \\Drupal\\Core\\Entity\\Display\\EntityViewDisplayInterface \\$$display, \\$$view_mode) {",
            "",
            "\t/*",
            "\t\t// Only do the extra work if the component is configured to be displayed.",
            "\t\t// This assumes a 'mymodule_addition' extra field has been defined for the",
            "\t\t// entity bundle in hook_entity_extra_field_info().",
            "\t\tif (\\$$display->getComponent('mymodule_addition')) {",
            "\t\t\t\\$$build['mymodule_addition'] = [",
            "\t\t\t\t'#markup' => mymodule_addition(\\$$entity),",
            "\t\t\t\t'#theme' => 'mymodule_my_additional_field',",
            "\t\t\t];",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Act on entities of a particular type being assembled before rendering.",
        "prefix": "hook_ENTITY_TYPE_view",
        "scope": "php"
    },
    "hook_ENTITY_TYPE_view_alter": {
        "body": [
            "/**",
            "* Implements hook_ENTITY_TYPE_view_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_${ENTITY_TYPE}_view_alter(array &\\$$build, Drupal\\Core\\Entity\\EntityInterface \\$$entity, \\Drupal\\Core\\Entity\\Display\\EntityViewDisplayInterface \\$$display) {",
            "",
            "\t/*",
            "\t\tif (\\$$build['#view_mode'] == 'full' && isset(\\$$build['an_additional_field'])) {",
            "\t\t\t// Change its weight.",
            "\t\t\t\\$$build['an_additional_field']['#weight'] = -10;",
            "\t",
            "\t\t\t// Add a #post_render callback to act on the rendered HTML of the entity.",
            "\t\t\t\\$$build['#post_render'][] = 'my_module_node_post_render';",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter the results of the entity build array for a particular entity type.",
        "prefix": "hook_ENTITY_TYPE_view_alter",
        "scope": "php"
    },
    "hook_ajax_render_alter": {
        "body": [
            "/**",
            "* Implements hook_ajax_render_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_ajax_render_alter(array &\\$$data) {",
            "",
            "\t/*",
            "\t\t// Inject any new status messages into the content area.",
            "\t\t\\$$status_messages = ['#type' => 'status_messages'];",
            "\t\t\\$$command = new \\Drupal\\Core\\Ajax\\PrependCommand('#block-system-main .content', \\Drupal::service('renderer')->renderRoot(\\$$status_messages));",
            "\t\t\\$$data[] = \\$$command->render();",
            "\t*/",
            "}"
        ],
        "description": "Alter the Ajax command data that is sent to the client.",
        "prefix": "hook_ajax_render_alter",
        "scope": "php"
    },
    "hook_archiver_info_alter": {
        "body": [
            "/**",
            "* Implements hook_archiver_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_archiver_info_alter(&\\$$info) {",
            "",
            "\t/*",
            "\t\t\\$$info['tar']['extensions'][] = 'tgz';",
            "\t*/",
            "}"
        ],
        "description": "Alter archiver information declared by other modules.",
        "prefix": "hook_archiver_info_alter",
        "scope": "php"
    },
    "hook_batch_alter": {
        "body": [
            "/**",
            "* Implements hook_batch_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_batch_alter(&\\$$batch) {",
            "",
            "\t/*",
            "\t*/",
            "}"
        ],
        "description": "Alter batch information before a batch is processed.",
        "prefix": "hook_batch_alter",
        "scope": "php"
    },
    "hook_block_access": {
        "body": [
            "/**",
            "* Implements hook_block_access().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_block_access(\\Drupal\\block\\Entity\\Block \\$$block, \\$$operation, \\Drupal\\Core\\Session\\AccountInterface \\$$account) {",
            "",
            "\t/*",
            "\t\t// Example code that would prevent displaying the 'Powered by Drupal' block in",
            "\t\t// a region different than the footer.",
            "\t\tif (\\$$operation == 'view' && \\$$block->getPluginId() == 'system_powered_by_block') {",
            "\t\t\treturn AccessResult::forbiddenIf(\\$$block->getRegion() != 'footer')->addCacheableDependency(\\$$block);",
            "\t\t}",
            "\t",
            "\t\t// No opinion.",
            "\t\treturn AccessResult::neutral();",
            "\t*/",
            "}"
        ],
        "description": "Control access to a block instance.",
        "prefix": "hook_block_access",
        "scope": "php"
    },
    "hook_block_build_BASE_BLOCK_ID_alter": {
        "body": [
            "/**",
            "* Implements hook_block_build_BASE_BLOCK_ID_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_block_build_${BASE_BLOCK_ID}_alter(array &\\$$build, \\Drupal\\Core\\Block\\BlockPluginInterface \\$$block) {",
            "",
            "\t/*",
            "\t\t// Explicitly enable placeholdering of the specific block.",
            "\t\t\\$$build['#create_placeholder'] = TRUE;",
            "\t*/",
            "}"
        ],
        "description": "Provide a block plugin specific block_build alteration.",
        "prefix": "hook_block_build_BASE_BLOCK_ID_alter",
        "scope": "php"
    },
    "hook_block_build_alter": {
        "body": [
            "/**",
            "* Implements hook_block_build_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_block_build_alter(array &\\$$build, \\Drupal\\Core\\Block\\BlockPluginInterface \\$$block) {",
            "",
            "\t/*",
            "\t\t// Add the 'user' cache context to some blocks.",
            "\t\tif (\\$$block->label() === 'some condition') {",
            "\t\t\t\\$$build['#cache']['contexts'][] = 'user';",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter the result of \\Drupal\\Core\\Block\\BlockBase::build().",
        "prefix": "hook_block_build_alter",
        "scope": "php"
    },
    "hook_block_view_BASE_BLOCK_ID_alter": {
        "body": [
            "/**",
            "* Implements hook_block_view_BASE_BLOCK_ID_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_block_view_${BASE_BLOCK_ID}_alter(array &\\$$build, \\Drupal\\Core\\Block\\BlockPluginInterface \\$$block) {",
            "",
            "\t/*",
            "\t\t// Change the title of the specific block.",
            "\t\t\\$$build['#title'] = t('New title of the block');",
            "\t*/",
            "}"
        ],
        "description": "Provide a block plugin specific block_view alteration.",
        "prefix": "hook_block_view_BASE_BLOCK_ID_alter",
        "scope": "php"
    },
    "hook_block_view_alter": {
        "body": [
            "/**",
            "* Implements hook_block_view_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_block_view_alter(array &\\$$build, \\Drupal\\Core\\Block\\BlockPluginInterface \\$$block) {",
            "",
            "\t/*",
            "\t\t// Remove the contextual links on all blocks that provide them.",
            "\t\tif (isset(\\$$build['#contextual_links'])) {",
            "\t\t\tunset(\\$$build['#contextual_links']);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter the result of \\Drupal\\Core\\Block\\BlockBase::build().",
        "prefix": "hook_block_view_alter",
        "scope": "php"
    },
    "hook_cache_flush": {
        "body": [
            "/**",
            "* Implements hook_cache_flush().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_cache_flush() {",
            "",
            "\t/*",
            "\t\tif (defined('MAINTENANCE_MODE') && MAINTENANCE_MODE == 'update') {",
            "\t\t\t_update_cache_clear();",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Flush all persistent and static caches.",
        "prefix": "hook_cache_flush",
        "scope": "php"
    },
    "hook_ckeditor_css_alter": {
        "body": [
            "/**",
            "* Implements hook_ckeditor_css_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_ckeditor_css_alter(array &\\$$css, Editor \\$$editor) {",
            "",
            "\t/*",
            "\t\t\\$$css[] = drupal_get_path('module', 'mymodule') . '/css/mymodule-ckeditor.css';",
            "\t*/",
            "}"
        ],
        "description": "Modify the list of CSS files that will be added to a CKEditor instance.",
        "prefix": "hook_ckeditor_css_alter",
        "scope": "php"
    },
    "hook_ckeditor_plugin_info_alter": {
        "body": [
            "/**",
            "* Implements hook_ckeditor_plugin_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_ckeditor_plugin_info_alter(array &\\$$plugins) {",
            "",
            "\t/*",
            "\t\t\\$$plugins['someplugin']['label'] = t('Better name');",
            "\t*/",
            "}"
        ],
        "description": "Modify the list of available CKEditor plugins.",
        "prefix": "hook_ckeditor_plugin_info_alter",
        "scope": "php"
    },
    "hook_comment_links_alter": {
        "body": [
            "/**",
            "* Implements hook_comment_links_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_comment_links_alter(array &\\$$links, CommentInterface \\$$entity, array &\\$$context) {",
            "",
            "\t/*",
            "\t\t\\$$links['mymodule'] = [",
            "\t\t\t'#theme' => 'links__comment__mymodule',",
            "\t\t\t'#attributes' => ['class' => ['links', 'inline']],",
            "\t\t\t'#links' => [",
            "\t\t\t\t'comment-report' => [",
            "\t\t\t\t\t'title' => t('Report'),",
            "\t\t\t\t\t'url' => Url::fromRoute('comment_test.report', ['comment' => \\$$entity->id()], ['query' => ['token' => \\Drupal::getContainer()->get('csrf_token')->get(\"comment/{\\$$entity->id()}/report\")]]),",
            "\t\t\t\t],",
            "\t\t\t],",
            "\t\t];",
            "\t*/",
            "}"
        ],
        "description": "Alter the links of a comment.",
        "prefix": "hook_comment_links_alter",
        "scope": "php"
    },
    "hook_config_import_steps_alter": {
        "body": [
            "/**",
            "* Implements hook_config_import_steps_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_config_import_steps_alter(&\\$$sync_steps, \\Drupal\\Core\\Config\\ConfigImporter \\$$config_importer) {",
            "",
            "\t/*",
            "\t\t\\$$deletes = \\$$config_importer->getUnprocessedConfiguration('delete');",
            "\t\tif (isset(\\$$deletes['field.storage.node.body'])) {",
            "\t\t\t\\$$sync_steps[] = '_additional_configuration_step';",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter the configuration synchronization steps.",
        "prefix": "hook_config_import_steps_alter",
        "scope": "php"
    },
    "hook_config_schema_info_alter": {
        "body": [
            "/**",
            "* Implements hook_config_schema_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_config_schema_info_alter(&\\$$definitions) {",
            "",
            "\t/*",
            "\t\t// Enhance the text and date type definitions with classes to generate proper",
            "\t\t// form elements in ConfigTranslationFormBase. Other translatable types will",
            "\t\t// appear as a one line textfield.",
            "\t\t\\$$definitions['text']['form_element_class'] = '\\Drupal\\config_translation\\FormElement\\Textarea';",
            "\t\t\\$$definitions['date_format']['form_element_class'] = '\\Drupal\\config_translation\\FormElement\\DateFormat';",
            "\t*/",
            "}"
        ],
        "description": "Alter config typed data definitions.",
        "prefix": "hook_config_schema_info_alter",
        "scope": "php"
    },
    "hook_config_translation_info": {
        "body": [
            "/**",
            "* Implements hook_config_translation_info().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_config_translation_info(&\\$$info) {",
            "",
            "\t/*",
            "\t\t\\$$entity_manager = \\Drupal::entityManager();",
            "\t\t\\$$route_provider = \\Drupal::service('router.route_provider');",
            "\t",
            "\t\t// If field UI is not enabled, the base routes of the type",
            "\t\t// \"entity.field_config.{\\$$entity_type}_field_edit_form\" are not defined.",
            "\t\tif (\\Drupal::moduleHandler()->moduleExists('field_ui')) {",
            "\t\t\t// Add fields entity mappers to all fieldable entity types defined.",
            "\t\t\tforeach (\\$$entity_manager->getDefinitions() as \\$$entity_type_id => \\$$entity_type) {",
            "\t\t\t\t\\$$base_route = NULL;",
            "\t\t\t\ttry {",
            "\t\t\t\t\t\\$$base_route = \\$$route_provider->getRouteByName('entity.field_config.' . \\$$entity_type_id . '_field_edit_form');",
            "\t\t\t\t}",
            "\t\t\t\tcatch (RouteNotFoundException \\$$e) {",
            "\t\t\t\t\t// Ignore non-existent routes.",
            "\t\t\t\t}",
            "\t",
            "\t\t\t\t// Make sure entity type has field UI enabled and has a base route.",
            "\t\t\t\tif (\\$$entity_type->get('field_ui_base_route') && !empty(\\$$base_route)) {",
            "\t\t\t\t\t\\$$info[\\$$entity_type_id . '_fields'] = [",
            "\t\t\t\t\t\t'base_route_name' => 'entity.field_config.' . \\$$entity_type_id . '_field_edit_form',",
            "\t\t\t\t\t\t'entity_type' => 'field_config',",
            "\t\t\t\t\t\t'title' => t('Title'),",
            "\t\t\t\t\t\t'class' => '\\Drupal\\config_translation\\ConfigFieldMapper',",
            "\t\t\t\t\t\t'base_entity_type' => \\$$entity_type_id,",
            "\t\t\t\t\t\t'weight' => 10,",
            "\t\t\t\t\t];",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Introduce dynamic translation tabs for translation of configuration.",
        "prefix": "hook_config_translation_info",
        "scope": "php"
    },
    "hook_config_translation_info_alter": {
        "body": [
            "/**",
            "* Implements hook_config_translation_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_config_translation_info_alter(&\\$$info) {",
            "",
            "\t/*",
            "\t\t// Add additional site settings to the site information screen, so it shows",
            "\t\t// up on the translation screen. (Form alter in the elements whose values are",
            "\t\t// stored in this config file using regular form altering on the original",
            "\t\t// configuration form.)",
            "\t\t\\$$info['system.site_information_settings']['names'][] = 'example.site.setting';",
            "\t*/",
            "}"
        ],
        "description": "Alter existing translation tabs for translation of configuration.",
        "prefix": "hook_config_translation_info_alter",
        "scope": "php"
    },
    "hook_contextual_links_alter": {
        "body": [
            "/**",
            "* Implements hook_contextual_links_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_contextual_links_alter(array &\\$$links, \\$$group, array \\$$route_parameters) {",
            "",
            "\t/*",
            "\t\tif (\\$$group == 'menu') {",
            "\t\t\t// Dynamically use the menu name for the title of the menu_edit contextual",
            "\t\t\t// link.",
            "\t\t\t\\$$menu = \\Drupal::entityManager()->getStorage('menu')->load(\\$$route_parameters['menu']);",
            "\t\t\t\\$$links['menu_edit']['title'] = t('Edit menu: @label', ['@label' => \\$$menu->label()]);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter contextual links before they are rendered.",
        "prefix": "hook_contextual_links_alter",
        "scope": "php"
    },
    "hook_contextual_links_plugins_alter": {
        "body": [
            "/**",
            "* Implements hook_contextual_links_plugins_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_contextual_links_plugins_alter(array &\\$$contextual_links) {",
            "",
            "\t/*",
            "\t\t\\$$contextual_links['menu_edit']['title'] = 'Edit the menu';",
            "\t*/",
            "}"
        ],
        "description": "Alter the plugin definition of contextual links.",
        "prefix": "hook_contextual_links_plugins_alter",
        "scope": "php"
    },
    "hook_contextual_links_view_alter": {
        "body": [
            "/**",
            "* Implements hook_contextual_links_view_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_contextual_links_view_alter(&\\$$element, \\$$items) {",
            "",
            "\t/*",
            "\t\t// Add another class to all contextual link lists to facilitate custom",
            "\t\t// styling.",
            "\t\t\\$$element['#attributes']['class'][] = 'custom-class';",
            "\t*/",
            "}"
        ],
        "description": "Alter a contextual links element before it is rendered.",
        "prefix": "hook_contextual_links_view_alter",
        "scope": "php"
    },
    "hook_countries_alter": {
        "body": [
            "/**",
            "* Implements hook_countries_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_countries_alter(&\\$$countries) {",
            "",
            "\t/*",
            "\t\t// Elbonia is now independent, so add it to the country list.",
            "\t\t\\$$countries['EB'] = 'Elbonia';",
            "\t*/",
            "}"
        ],
        "description": "Alter the default country list.",
        "prefix": "hook_countries_alter",
        "scope": "php"
    },
    "hook_cron": {
        "body": [
            "/**",
            "* Implements hook_cron().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_cron() {",
            "",
            "\t/*",
            "\t\t// Short-running operation example, not using a queue:",
            "\t\t// Delete all expired records since the last cron run.",
            "\t\t\\$$expires = \\Drupal::state()->get('mymodule.last_check', 0);",
            "\t\t\\Drupal::database()->delete('mymodule_table')",
            "\t\t\t->condition('expires', \\$$expires, '>=')",
            "\t\t\t->execute();",
            "\t\t\\Drupal::state()->set('mymodule.last_check', REQUEST_TIME);",
            "\t",
            "\t\t// Long-running operation example, leveraging a queue:",
            "\t\t// Queue news feeds for updates once their refresh interval has elapsed.",
            "\t\t\\$$queue = \\Drupal::queue('aggregator_feeds');",
            "\t\t\\$$ids = \\Drupal::entityManager()->getStorage('aggregator_feed')->getFeedIdsToRefresh();",
            "\t\tforeach (Feed::loadMultiple(\\$$ids) as \\$$feed) {",
            "\t\t\tif (\\$$queue->createItem(\\$$feed)) {",
            "\t\t\t\t// Add timestamp to avoid queueing item more than once.",
            "\t\t\t\t\\$$feed->setQueuedTime(REQUEST_TIME);",
            "\t\t\t\t\\$$feed->save();",
            "\t\t\t}",
            "\t\t}",
            "\t\t\\$$ids = \\Drupal::entityQuery('aggregator_feed')",
            "\t\t\t->condition('queued', REQUEST_TIME - (3600 * 6), '<')",
            "\t\t\t->execute();",
            "\t\tif (\\$$ids) {",
            "\t\t\t\\$$feeds = Feed::loadMultiple(\\$$ids);",
            "\t\t\tforeach (\\$$feeds as \\$$feed) {",
            "\t\t\t\t\\$$feed->setQueuedTime(0);",
            "\t\t\t\t\\$$feed->save();",
            "\t\t\t}",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Perform periodic actions.",
        "prefix": "hook_cron",
        "scope": "php"
    },
    "hook_css_alter": {
        "body": [
            "/**",
            "* Implements hook_css_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_css_alter(&\\$$css, \\Drupal\\Core\\Asset\\AttachedAssetsInterface \\$$assets) {",
            "",
            "\t/*",
            "\t\t// Remove defaults.css file.",
            "\t\tunset(\\$$css[drupal_get_path('module', 'system') . '/defaults.css']);",
            "\t*/",
            "}"
        ],
        "description": "Alter CSS files before they are output on the page.",
        "prefix": "hook_css_alter",
        "scope": "php"
    },
    "hook_data_type_info_alter": {
        "body": [
            "/**",
            "* Implements hook_data_type_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_data_type_info_alter(&\\$$data_types) {",
            "",
            "\t/*",
            "\t\t\\$$data_types['email']['class'] = '\\Drupal\\mymodule\\Type\\Email';",
            "\t*/",
            "}"
        ],
        "description": "Alter available data types for typed data wrappers.",
        "prefix": "hook_data_type_info_alter",
        "scope": "php"
    },
    "hook_display_variant_plugin_alter": {
        "body": [
            "/**",
            "* Implements hook_display_variant_plugin_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_display_variant_plugin_alter(array &\\$$definitions) {",
            "",
            "\t/*",
            "\t\t\\$$definitions['full_page']['admin_label'] = t('Block layout');",
            "\t*/",
            "}"
        ],
        "description": "Alter display variant plugin definitions.",
        "prefix": "hook_display_variant_plugin_alter",
        "scope": "php"
    },
    "hook_editor_info_alter": {
        "body": [
            "/**",
            "* Implements hook_editor_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_editor_info_alter(array &\\$$editors) {",
            "",
            "\t/*",
            "\t\t\\$$editors['some_other_editor']['label'] = t('A different name');",
            "\t\t\\$$editors['some_other_editor']['library']['module'] = 'myeditoroverride';",
            "\t*/",
            "}"
        ],
        "description": "Performs alterations on text editor definitions.",
        "prefix": "hook_editor_info_alter",
        "scope": "php"
    },
    "hook_editor_js_settings_alter": {
        "body": [
            "/**",
            "* Implements hook_editor_js_settings_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_editor_js_settings_alter(array &\\$$settings) {",
            "",
            "\t/*",
            "\t\tif (isset(\\$$settings['editor']['formats']['basic_html'])) {",
            "\t\t\t\\$$settings['editor']['formats']['basic_html']['editor'] = 'MyDifferentEditor';",
            "\t\t\t\\$$settings['editor']['formats']['basic_html']['editorSettings']['buttons'] = ['strong', 'italic', 'underline'];",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Modifies JavaScript settings that are added for text editors.",
        "prefix": "hook_editor_js_settings_alter",
        "scope": "php"
    },
    "hook_editor_xss_filter_alter": {
        "body": [
            "/**",
            "* Implements hook_editor_xss_filter_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_editor_xss_filter_alter(&\\$$editor_xss_filter_class, FilterFormatInterface \\$$format, FilterFormatInterface \\$$original_format = NULL) {",
            "",
            "\t/*",
            "\t\t\\$$filters = \\$$format->filters()->getAll();",
            "\t\tif (isset(\\$$filters['filter_wysiwyg']) && \\$$filters['filter_wysiwyg']->status) {",
            "\t\t\t\\$$editor_xss_filter_class = '\\Drupal\\filter_wysiwyg\\EditorXssFilter\\WysiwygFilter';",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Modifies the text editor XSS filter that will used for the given text format.",
        "prefix": "hook_editor_xss_filter_alter",
        "scope": "php"
    },
    "hook_element_info_alter": {
        "body": [
            "/**",
            "* Implements hook_element_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_element_info_alter(array &\\$$info) {",
            "",
            "\t/*",
            "\t\t// Decrease the default size of textfields.",
            "\t\tif (isset(\\$$info['textfield']['#size'])) {",
            "\t\t\t\\$$info['textfield']['#size'] = 40;",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter the element type information returned from modules.",
        "prefix": "hook_element_info_alter",
        "scope": "php"
    },
    "hook_entity_access": {
        "body": [
            "/**",
            "* Implements hook_entity_access().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_access(\\Drupal\\Core\\Entity\\EntityInterface \\$$entity, \\$$operation, \\Drupal\\Core\\Session\\AccountInterface \\$$account) {",
            "",
            "\t/*",
            "\t\t// No opinion.",
            "\t\treturn AccessResult::neutral();",
            "\t*/",
            "}"
        ],
        "description": "Control entity operation access.",
        "prefix": "hook_entity_access",
        "scope": "php"
    },
    "hook_entity_base_field_info": {
        "body": [
            "/**",
            "* Implements hook_entity_base_field_info().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_base_field_info(\\Drupal\\Core\\Entity\\EntityTypeInterface \\$$entity_type) {",
            "",
            "\t/*",
            "\t\tif (\\$$entity_type->id() == 'node') {",
            "\t\t\t\\$$fields = [];",
            "\t\t\t\\$$fields['mymodule_text'] = BaseFieldDefinition::create('string')",
            "\t\t\t\t->setLabel(t('The text'))",
            "\t\t\t\t->setDescription(t('A text property added by mymodule.'))",
            "\t\t\t\t->setComputed(TRUE)",
            "\t\t\t\t->setClass('\\Drupal\\mymodule\\EntityComputedText');",
            "\t",
            "\t\t\treturn \\$$fields;",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Provides custom base field definitions for a content entity type.",
        "prefix": "hook_entity_base_field_info",
        "scope": "php"
    },
    "hook_entity_base_field_info_alter": {
        "body": [
            "/**",
            "* Implements hook_entity_base_field_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_base_field_info_alter(&\\$$fields, \\Drupal\\Core\\Entity\\EntityTypeInterface \\$$entity_type) {",
            "",
            "\t/*",
            "\t\t// Alter the mymodule_text field to use a custom class.",
            "\t\tif (\\$$entity_type->id() == 'node' && !empty(\\$$fields['mymodule_text'])) {",
            "\t\t\t\\$$fields['mymodule_text']->setClass('\\Drupal\\anothermodule\\EntityComputedText');",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter base field definitions for a content entity type.",
        "prefix": "hook_entity_base_field_info_alter",
        "scope": "php"
    },
    "hook_entity_build_defaults_alter": {
        "body": [
            "/**",
            "* Implements hook_entity_build_defaults_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_build_defaults_alter(array &\\$$build, \\Drupal\\Core\\Entity\\EntityInterface \\$$entity, \\$$view_mode) {",
            "",
            "\t/*",
            "\t",
            "\t*/",
            "}"
        ],
        "description": "Alter entity renderable values before cache checking in drupal_render().",
        "prefix": "hook_entity_build_defaults_alter",
        "scope": "php"
    },
    "hook_entity_bundle_create": {
        "body": [
            "/**",
            "* Implements hook_entity_bundle_create().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_bundle_create(\\$$entity_type_id, \\$$bundle) {",
            "",
            "\t/*",
            "\t\t// When a new bundle is created, the menu needs to be rebuilt to add the",
            "\t\t// Field UI menu item tabs.",
            "\t\t\\Drupal::service('router.builder')->setRebuildNeeded();",
            "\t*/",
            "}"
        ],
        "description": "Act on entity_bundle_create().",
        "prefix": "hook_entity_bundle_create",
        "scope": "php"
    },
    "hook_entity_bundle_delete": {
        "body": [
            "/**",
            "* Implements hook_entity_bundle_delete().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_bundle_delete(\\$$entity_type_id, \\$$bundle) {",
            "",
            "\t/*",
            "\t\t// Remove the settings associated with the bundle in my_module.settings.",
            "\t\t\\$$config = \\Drupal::config('my_module.settings');",
            "\t\t\\$$bundle_settings = \\$$config->get('bundle_settings');",
            "\t\tif (isset(\\$$bundle_settings[\\$$entity_type_id][\\$$bundle])) {",
            "\t\t\tunset(\\$$bundle_settings[\\$$entity_type_id][\\$$bundle]);",
            "\t\t\t\\$$config->set('bundle_settings', \\$$bundle_settings);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Act on entity_bundle_delete().",
        "prefix": "hook_entity_bundle_delete",
        "scope": "php"
    },
    "hook_entity_bundle_field_info": {
        "body": [
            "/**",
            "* Implements hook_entity_bundle_field_info().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_bundle_field_info(\\Drupal\\Core\\Entity\\EntityTypeInterface \\$$entity_type, \\$$bundle, array \\$$base_field_definitions) {",
            "",
            "\t/*",
            "\t\t// Add a property only to nodes of the 'article' bundle.",
            "\t\tif (\\$$entity_type->id() == 'node' && \\$$bundle == 'article') {",
            "\t\t\t\\$$fields = [];",
            "\t\t\t\\$$fields['mymodule_text_more'] = BaseFieldDefinition::create('string')",
            "\t\t\t\t->setLabel(t('More text'))",
            "\t\t\t\t->setComputed(TRUE)",
            "\t\t\t\t->setClass('\\Drupal\\mymodule\\EntityComputedMoreText');",
            "\t\t\treturn \\$$fields;",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Provides field definitions for a specific bundle within an entity type.",
        "prefix": "hook_entity_bundle_field_info",
        "scope": "php"
    },
    "hook_entity_bundle_field_info_alter": {
        "body": [
            "/**",
            "* Implements hook_entity_bundle_field_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_bundle_field_info_alter(&\\$$fields, \\Drupal\\Core\\Entity\\EntityTypeInterface \\$$entity_type, \\$$bundle) {",
            "",
            "\t/*",
            "\t\tif (\\$$entity_type->id() == 'node' && \\$$bundle == 'article' && !empty(\\$$fields['mymodule_text'])) {",
            "\t\t\t// Alter the mymodule_text field to use a custom class.",
            "\t\t\t\\$$fields['mymodule_text']->setClass('\\Drupal\\anothermodule\\EntityComputedText');",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter bundle field definitions.",
        "prefix": "hook_entity_bundle_field_info_alter",
        "scope": "php"
    },
    "hook_entity_bundle_info": {
        "body": [
            "/**",
            "* Implements hook_entity_bundle_info().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_bundle_info() {",
            "",
            "\t/*",
            "\t\t\\$$bundles['user']['user']['label'] = t('User');",
            "\t\treturn \\$$bundles;",
            "\t*/",
            "}"
        ],
        "description": "Describe the bundles for entity types.",
        "prefix": "hook_entity_bundle_info",
        "scope": "php"
    },
    "hook_entity_bundle_info_alter": {
        "body": [
            "/**",
            "* Implements hook_entity_bundle_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_bundle_info_alter(&\\$$bundles) {",
            "",
            "\t/*",
            "\t\t\\$$bundles['user']['user']['label'] = t('Full account');",
            "\t*/",
            "}"
        ],
        "description": "Alter the bundles for entity types.",
        "prefix": "hook_entity_bundle_info_alter",
        "scope": "php"
    },
    "hook_entity_create": {
        "body": [
            "/**",
            "* Implements hook_entity_create().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_create(\\Drupal\\Core\\Entity\\EntityInterface \\$$entity) {",
            "",
            "\t/*",
            "\t\t\\Drupal::logger('example')->info('Entity created: @label', ['@label' => \\$$entity->label()]);",
            "\t*/",
            "}"
        ],
        "description": "Acts when creating a new entity.",
        "prefix": "hook_entity_create",
        "scope": "php"
    },
    "hook_entity_create_access": {
        "body": [
            "/**",
            "* Implements hook_entity_create_access().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_create_access(\\Drupal\\Core\\Session\\AccountInterface \\$$account, array \\$$context, \\$$entity_bundle) {",
            "",
            "\t/*",
            "\t\t// No opinion.",
            "\t\treturn AccessResult::neutral();",
            "\t*/",
            "}"
        ],
        "description": "Control entity create access.",
        "prefix": "hook_entity_create_access",
        "scope": "php"
    },
    "hook_entity_delete": {
        "body": [
            "/**",
            "* Implements hook_entity_delete().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_delete(Drupal\\Core\\Entity\\EntityInterface \\$$entity) {",
            "",
            "\t/*",
            "\t\t// Delete the entity's entry from a fictional table of all entities.",
            "\t\tdb_delete('example_entity')",
            "\t\t\t->condition('type', \\$$entity->getEntityTypeId())",
            "\t\t\t->condition('id', \\$$entity->id())",
            "\t\t\t->execute();",
            "\t*/",
            "}"
        ],
        "description": "Respond to entity deletion.",
        "prefix": "hook_entity_delete",
        "scope": "php"
    },
    "hook_entity_display_build_alter": {
        "body": [
            "/**",
            "* Implements hook_entity_display_build_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_display_build_alter(&\\$$build, \\$$context) {",
            "",
            "\t/*",
            "\t\t// Append RDF term mappings on displayed taxonomy links.",
            "\t\tforeach (Element::children(\\$$build) as \\$$field_name) {",
            "\t\t\t\\$$element = &\\$$build[\\$$field_name];",
            "\t\t\tif (\\$$element['#field_type'] == 'entity_reference' && \\$$element['#formatter'] == 'entity_reference_label') {",
            "\t\t\t\tforeach (\\$$element['#items'] as \\$$delta => \\$$item) {",
            "\t\t\t\t\t\\$$term = \\$$item->entity;",
            "\t\t\t\t\tif (!empty(\\$$term->rdf_mapping['rdftype'])) {",
            "\t\t\t\t\t\t\\$$element[\\$$delta]['#options']['attributes']['typeof'] = \\$$term->rdf_mapping['rdftype'];",
            "\t\t\t\t\t}",
            "\t\t\t\t\tif (!empty(\\$$term->rdf_mapping['name']['predicates'])) {",
            "\t\t\t\t\t\t\\$$element[\\$$delta]['#options']['attributes']['property'] = \\$$term->rdf_mapping['name']['predicates'];",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter the render array generated by an EntityDisplay for an entity.",
        "prefix": "hook_entity_display_build_alter",
        "scope": "php"
    },
    "hook_entity_extra_field_info": {
        "body": [
            "/**",
            "* Implements hook_entity_extra_field_info().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_extra_field_info() {",
            "",
            "\t/*",
            "\t\t\\$$extra = [];",
            "\t\t\\$$module_language_enabled = \\Drupal::moduleHandler()->moduleExists('language');",
            "\t\t\\$$description = t('Node module element');",
            "\t",
            "\t\tforeach (NodeType::loadMultiple() as \\$$bundle) {",
            "\t",
            "\t\t\t// Add also the 'language' select if Language module is enabled and the",
            "\t\t\t// bundle has multilingual support.",
            "\t\t\t// Visibility of the ordering of the language selector is the same as on the",
            "\t\t\t// node/add form.",
            "\t\t\tif (\\$$module_language_enabled) {",
            "\t\t\t\t\\$$configuration = ContentLanguageSettings::loadByEntityTypeBundle('node', \\$$bundle->id());",
            "\t\t\t\tif (\\$$configuration->isLanguageAlterable()) {",
            "\t\t\t\t\t\\$$extra['node'][\\$$bundle->id()]['form']['language'] = [",
            "\t\t\t\t\t\t'label' => t('Language'),",
            "\t\t\t\t\t\t'description' => \\$$description,",
            "\t\t\t\t\t\t'weight' => 0,",
            "\t\t\t\t\t];",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t\t\\$$extra['node'][\\$$bundle->id()]['display']['language'] = [",
            "\t\t\t\t'label' => t('Language'),",
            "\t\t\t\t'description' => \\$$description,",
            "\t\t\t\t'weight' => 0,",
            "\t\t\t\t'visible' => FALSE,",
            "\t\t\t];",
            "\t\t}",
            "\t",
            "\t\treturn \\$$extra;",
            "\t*/",
            "}"
        ],
        "description": "Exposes \"pseudo-field\" components on content entities.",
        "prefix": "hook_entity_extra_field_info",
        "scope": "php"
    },
    "hook_entity_extra_field_info_alter": {
        "body": [
            "/**",
            "* Implements hook_entity_extra_field_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_extra_field_info_alter(&\\$$info) {",
            "",
            "\t/*",
            "\t\t// Force node title to always be at the top of the list by default.",
            "\t\tforeach (NodeType::loadMultiple() as \\$$bundle) {",
            "\t\t\tif (isset(\\$$info['node'][\\$$bundle->id()]['form']['title'])) {",
            "\t\t\t\t\\$$info['node'][\\$$bundle->id()]['form']['title']['weight'] = -20;",
            "\t\t\t}",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter \"pseudo-field\" components on content entities.",
        "prefix": "hook_entity_extra_field_info_alter",
        "scope": "php"
    },
    "hook_entity_field_access": {
        "body": [
            "/**",
            "* Implements hook_entity_field_access().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_field_access(\\$$operation, \\Drupal\\Core\\Field\\FieldDefinitionInterface \\$$field_definition, \\Drupal\\Core\\Session\\AccountInterface \\$$account, \\Drupal\\Core\\Field\\FieldItemListInterface \\$$items = NULL) {",
            "",
            "\t/*",
            "\t\tif (\\$$field_definition->getName() == 'field_of_interest' && \\$$operation == 'edit') {",
            "\t\t\treturn AccessResult::allowedIfHasPermission(\\$$account, 'update field of interest');",
            "\t\t}",
            "\t\treturn AccessResult::neutral();",
            "\t*/",
            "}"
        ],
        "description": "Control access to fields.",
        "prefix": "hook_entity_field_access",
        "scope": "php"
    },
    "hook_entity_field_access_alter": {
        "body": [
            "/**",
            "* Implements hook_entity_field_access_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_field_access_alter(array &\\$$grants, array \\$$context) {",
            "",
            "\t/*",
            "\t\t// @var \\Drupal\\Core\\Field\\FieldDefinitionInterface \\$$field_definition ",
            "\t\t\\$$field_definition = \\$$context['field_definition'];",
            "\t\tif (\\$$field_definition->getName() == 'field_of_interest' && \\$$grants['node']->isForbidden()) {",
            "\t\t\t// Override node module's restriction to no opinion (neither allowed nor",
            "\t\t\t// forbidden). We don't want to provide our own access hook, we only want to",
            "\t\t\t// take out node module's part in the access handling of this field. We also",
            "\t\t\t// don't want to switch node module's grant to",
            "\t\t\t// AccessResultInterface::isAllowed() , because the grants of other modules",
            "\t\t\t// should still decide on their own if this field is accessible or not",
            "\t\t\t\\$$grants['node'] = AccessResult::neutral()->inheritCacheability(\\$$grants['node']);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter the default access behavior for a given field.",
        "prefix": "hook_entity_field_access_alter",
        "scope": "php"
    },
    "hook_entity_field_storage_info": {
        "body": [
            "/**",
            "* Implements hook_entity_field_storage_info().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_field_storage_info(\\Drupal\\Core\\Entity\\EntityTypeInterface \\$$entity_type) {",
            "",
            "\t/*",
            "\t\tif (\\Drupal::entityManager()->getStorage(\\$$entity_type->id()) instanceof DynamicallyFieldableEntityStorageInterface) {",
            "\t\t\t// Query by filtering on the ID as this is more efficient than filtering",
            "\t\t\t// on the entity_type property directly.",
            "\t\t\t\\$$ids = \\Drupal::entityQuery('field_storage_config')",
            "\t\t\t\t->condition('id', \\$$entity_type->id() . '.', 'STARTS_WITH')",
            "\t\t\t\t->execute();",
            "\t\t\t// Fetch all fields and key them by field name.",
            "\t\t\t\\$$field_storages = FieldStorageConfig::loadMultiple(\\$$ids);",
            "\t\t\t\\$$result = [];",
            "\t\t\tforeach (\\$$field_storages as \\$$field_storage) {",
            "\t\t\t\t\\$$result[\\$$field_storage->getName()] = \\$$field_storage;",
            "\t\t\t}",
            "\t",
            "\t\t\treturn \\$$result;",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Provides field storage definitions for a content entity type.",
        "prefix": "hook_entity_field_storage_info",
        "scope": "php"
    },
    "hook_entity_field_storage_info_alter": {
        "body": [
            "/**",
            "* Implements hook_entity_field_storage_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_field_storage_info_alter(&\\$$fields, \\Drupal\\Core\\Entity\\EntityTypeInterface \\$$entity_type) {",
            "",
            "\t/*",
            "\t\t// Alter the max_length setting.",
            "\t\tif (\\$$entity_type->id() == 'node' && !empty(\\$$fields['mymodule_text'])) {",
            "\t\t\t\\$$fields['mymodule_text']->setSetting('max_length', 128);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter field storage definitions for a content entity type.",
        "prefix": "hook_entity_field_storage_info_alter",
        "scope": "php"
    },
    "hook_entity_field_values_init": {
        "body": [
            "/**",
            "* Implements hook_entity_field_values_init().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_field_values_init(\\Drupal\\Core\\Entity\\FieldableEntityInterface \\$$entity) {",
            "",
            "\t/*",
            "\t\tif (\\$$entity instanceof \\Drupal\\Core\\Entity\\ContentEntityInterface && !\\$$entity->foo->value) {",
            "\t\t\t\\$$entity->foo->value = 'some_initial_value';",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Acts when initializing a fieldable entity object.",
        "prefix": "hook_entity_field_values_init",
        "scope": "php"
    },
    "hook_entity_form_display_alter": {
        "body": [
            "/**",
            "* Implements hook_entity_form_display_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_form_display_alter(\\Drupal\\Core\\Entity\\Display\\EntityFormDisplayInterface \\$$form_display, array \\$$context) {",
            "",
            "\t/*",
            "\t\t// Hide the 'user_picture' field from the register form.",
            "\t\tif (\\$$context['entity_type'] == 'user' && \\$$context['form_mode'] == 'register') {",
            "\t\t\t\\$$form_display->setComponent('user_picture', [",
            "\t\t\t\t'region' => 'hidden',",
            "\t\t\t]);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter the settings used for displaying an entity form.",
        "prefix": "hook_entity_form_display_alter",
        "scope": "php"
    },
    "hook_entity_insert": {
        "body": [
            "/**",
            "* Implements hook_entity_insert().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_insert(Drupal\\Core\\Entity\\EntityInterface \\$$entity) {",
            "",
            "\t/*",
            "\t\t// Insert the new entity into a fictional table of all entities.",
            "\t\tdb_insert('example_entity')",
            "\t\t\t->fields([",
            "\t\t\t\t'type' => \\$$entity->getEntityTypeId(),",
            "\t\t\t\t'id' => \\$$entity->id(),",
            "\t\t\t\t'created' => REQUEST_TIME,",
            "\t\t\t\t'updated' => REQUEST_TIME,",
            "\t\t\t])",
            "\t\t\t->execute();",
            "\t*/",
            "}"
        ],
        "description": "Respond to creation of a new entity.",
        "prefix": "hook_entity_insert",
        "scope": "php"
    },
    "hook_entity_load": {
        "body": [
            "/**",
            "* Implements hook_entity_load().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_load(array \\$$entities, \\$$entity_type_id) {",
            "",
            "\t/*",
            "\t\tforeach (\\$$entities as \\$$entity) {",
            "\t\t\t\\$$entity->foo = mymodule_add_something(\\$$entity);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Act on entities when loaded.",
        "prefix": "hook_entity_load",
        "scope": "php"
    },
    "hook_entity_operation": {
        "body": [
            "/**",
            "* Implements hook_entity_operation().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_operation(\\Drupal\\Core\\Entity\\EntityInterface \\$$entity) {",
            "",
            "\t/*",
            "\t\t\\$$operations = [];",
            "\t\t\\$$operations['translate'] = [",
            "\t\t\t'title' => t('Translate'),",
            "\t\t\t'url' => \\Drupal\\Core\\Url::fromRoute('foo_module.entity.translate'),",
            "\t\t\t'weight' => 50,",
            "\t\t];",
            "\t",
            "\t\treturn \\$$operations;",
            "\t*/",
            "}"
        ],
        "description": "Declares entity operations.",
        "prefix": "hook_entity_operation",
        "scope": "php"
    },
    "hook_entity_operation_alter": {
        "body": [
            "/**",
            "* Implements hook_entity_operation_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_operation_alter(array &\\$$operations, \\Drupal\\Core\\Entity\\EntityInterface \\$$entity) {",
            "",
            "\t/*",
            "\t\t// Alter the title and weight.",
            "\t\t\\$$operations['translate']['title'] = t('Translate @entity_type', [",
            "\t\t\t'@entity_type' => \\$$entity->getEntityTypeId(),",
            "\t\t]);",
            "\t\t\\$$operations['translate']['weight'] = 99;",
            "\t*/",
            "}"
        ],
        "description": "Alter entity operations.",
        "prefix": "hook_entity_operation_alter",
        "scope": "php"
    },
    "hook_entity_predelete": {
        "body": [
            "/**",
            "* Implements hook_entity_predelete().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_predelete(Drupal\\Core\\Entity\\EntityInterface \\$$entity) {",
            "",
            "\t/*",
            "\t\t// Count references to this entity in a custom table before they are removed",
            "\t\t// upon entity deletion.",
            "\t\t\\$$id = \\$$entity->id();",
            "\t\t\\$$type = \\$$entity->getEntityTypeId();",
            "\t\t\\$$count = db_select('example_entity_data')",
            "\t\t\t->condition('type', \\$$type)",
            "\t\t\t->condition('id', \\$$id)",
            "\t\t\t->countQuery()",
            "\t\t\t->execute()",
            "\t\t\t->fetchField();",
            "\t",
            "\t\t// Log the count in a table that records this statistic for deleted entities.",
            "\t\tdb_merge('example_deleted_entity_statistics')",
            "\t\t\t->key(['type' => \\$$type, 'id' => \\$$id])",
            "\t\t\t->fields(['count' => \\$$count])",
            "\t\t\t->execute();",
            "\t*/",
            "}"
        ],
        "description": "Act before entity deletion.",
        "prefix": "hook_entity_predelete",
        "scope": "php"
    },
    "hook_entity_prepare_form": {
        "body": [
            "/**",
            "* Implements hook_entity_prepare_form().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_prepare_form(\\Drupal\\Core\\Entity\\EntityInterface \\$$entity, \\$$operation, \\Drupal\\Core\\Form\\FormStateInterface \\$$form_state) {",
            "",
            "\t/*",
            "\t\tif (\\$$operation == 'edit') {",
            "\t\t\t\\$$entity->label->value = 'Altered label';",
            "\t\t\t\\$$form_state->set('label_altered', TRUE);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Acts on an entity object about to be shown on an entity form.",
        "prefix": "hook_entity_prepare_form",
        "scope": "php"
    },
    "hook_entity_prepare_view": {
        "body": [
            "/**",
            "* Implements hook_entity_prepare_view().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_prepare_view(\\$$entity_type_id, array \\$$entities, array \\$$displays, \\$$view_mode) {",
            "",
            "\t/*",
            "\t\t// Load a specific node into the user object for later theming.",
            "\t\tif (!empty(\\$$entities) && \\$$entity_type_id == 'user') {",
            "\t\t\t// Only do the extra work if the component is configured to be",
            "\t\t\t// displayed. This assumes a 'mymodule_addition' extra field has been",
            "\t\t\t// defined for the entity bundle in hook_entity_extra_field_info().",
            "\t\t\t\\$$ids = [];",
            "\t\t\tforeach (\\$$entities as \\$$id => \\$$entity) {",
            "\t\t\t\tif (\\$$displays[\\$$entity->bundle()]->getComponent('mymodule_addition')) {",
            "\t\t\t\t\t\\$$ids[] = \\$$id;",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t\tif (\\$$ids) {",
            "\t\t\t\t\\$$nodes = mymodule_get_user_nodes(\\$$ids);",
            "\t\t\t\tforeach (\\$$ids as \\$$id) {",
            "\t\t\t\t\t\\$$entities[\\$$id]->user_node = \\$$nodes[\\$$id];",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Act on entities as they are being prepared for view.",
        "prefix": "hook_entity_prepare_view",
        "scope": "php"
    },
    "hook_entity_presave": {
        "body": [
            "/**",
            "* Implements hook_entity_presave().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_presave(Drupal\\Core\\Entity\\EntityInterface \\$$entity) {",
            "",
            "\t/*",
            "\t\tif (\\$$entity instanceof ContentEntityInterface && \\$$entity->isTranslatable()) {",
            "\t\t\t\\$$route_match = \\Drupal::routeMatch();",
            "\t\t\t\\Drupal::service('content_translation.synchronizer')->synchronizeFields(\\$$entity, \\$$entity->language()->getId(), \\$$route_match->getParameter('source_langcode'));",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Act on an entity before it is created or updated.",
        "prefix": "hook_entity_presave",
        "scope": "php"
    },
    "hook_entity_revision_create": {
        "body": [
            "/**",
            "* Implements hook_entity_revision_create().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_revision_create(Drupal\\Core\\Entity\\EntityInterface \\$$new_revision, Drupal\\Core\\Entity\\EntityInterface \\$$entity, \\$$keep_untranslatable_fields) {",
            "",
            "\t/*",
            "\t\t// Retain the value from an untranslatable field, which are by default",
            "\t\t// synchronized from the default revision.",
            "\t\t\\$$new_revision->set('untranslatable_field', \\$$entity->get('untranslatable_field'));",
            "\t*/",
            "}"
        ],
        "description": "Respond to entity revision creation.",
        "prefix": "hook_entity_revision_create",
        "scope": "php"
    },
    "hook_entity_revision_delete": {
        "body": [
            "/**",
            "* Implements hook_entity_revision_delete().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_revision_delete(Drupal\\Core\\Entity\\EntityInterface \\$$entity) {",
            "",
            "\t/*",
            "\t\t\\$$referenced_files_by_field = _editor_get_file_uuids_by_field(\\$$entity);",
            "\t\tforeach (\\$$referenced_files_by_field as \\$$field => \\$$uuids) {",
            "\t\t\t_editor_delete_file_usage(\\$$uuids, \\$$entity, 1);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Respond to entity revision deletion.",
        "prefix": "hook_entity_revision_delete",
        "scope": "php"
    },
    "hook_entity_storage_load": {
        "body": [
            "/**",
            "* Implements hook_entity_storage_load().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_storage_load(array \\$$entities, \\$$entity_type) {",
            "",
            "\t/*",
            "\t\tforeach (\\$$entities as \\$$entity) {",
            "\t\t\t\\$$entity->foo = mymodule_add_something_uncached(\\$$entity);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Act on content entities when loaded from the storage.",
        "prefix": "hook_entity_storage_load",
        "scope": "php"
    },
    "hook_entity_translation_create": {
        "body": [
            "/**",
            "* Implements hook_entity_translation_create().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_translation_create(\\Drupal\\Core\\Entity\\EntityInterface \\$$translation) {",
            "",
            "\t/*",
            "\t\t\\Drupal::logger('example')->info('Entity translation created: @label', ['@label' => \\$$translation->label()]);",
            "\t*/",
            "}"
        ],
        "description": "Acts when creating a new entity translation.",
        "prefix": "hook_entity_translation_create",
        "scope": "php"
    },
    "hook_entity_translation_delete": {
        "body": [
            "/**",
            "* Implements hook_entity_translation_delete().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_translation_delete(\\Drupal\\Core\\Entity\\EntityInterface \\$$translation) {",
            "",
            "\t/*",
            "\t\t\\$$variables = [",
            "\t\t\t'@language' => \\$$translation->language()->getName(),",
            "\t\t\t'@label' => \\$$translation->label(),",
            "\t\t];",
            "\t\t\\Drupal::logger('example')->notice('The @language translation of @label has just been deleted.', \\$$variables);",
            "\t*/",
            "}"
        ],
        "description": "Respond to entity translation deletion.",
        "prefix": "hook_entity_translation_delete",
        "scope": "php"
    },
    "hook_entity_translation_insert": {
        "body": [
            "/**",
            "* Implements hook_entity_translation_insert().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_translation_insert(\\Drupal\\Core\\Entity\\EntityInterface \\$$translation) {",
            "",
            "\t/*",
            "\t\t\\$$variables = [",
            "\t\t\t'@language' => \\$$translation->language()->getName(),",
            "\t\t\t'@label' => \\$$translation->getUntranslated()->label(),",
            "\t\t];",
            "\t\t\\Drupal::logger('example')->notice('The @language translation of @label has just been stored.', \\$$variables);",
            "\t*/",
            "}"
        ],
        "description": "Respond to creation of a new entity translation.",
        "prefix": "hook_entity_translation_insert",
        "scope": "php"
    },
    "hook_entity_type_alter": {
        "body": [
            "/**",
            "* Implements hook_entity_type_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_type_alter(array &\\$$entity_types) {",
            "",
            "\t/*",
            "\t\t// @var \\$$entity_types \\Drupal\\Core\\Entity\\EntityTypeInterface[] ",
            "\t\t// Set the controller class for nodes to an alternate implementation of the",
            "\t\t// Drupal\\Core\\Entity\\EntityStorageInterface interface.",
            "\t\t\\$$entity_types['node']->setStorageClass('Drupal\\mymodule\\MyCustomNodeStorage');",
            "\t*/",
            "}"
        ],
        "description": "Alter the entity type definitions.",
        "prefix": "hook_entity_type_alter",
        "scope": "php"
    },
    "hook_entity_type_build": {
        "body": [
            "/**",
            "* Implements hook_entity_type_build().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_type_build(array &\\$$entity_types) {",
            "",
            "\t/*",
            "\t\t// @var \\$$entity_types \\Drupal\\Core\\Entity\\EntityTypeInterface[] ",
            "\t\t// Add a form for a custom node form without overriding the default",
            "\t\t// node form. To override the default node form, use hook_entity_type_alter().",
            "\t\t\\$$entity_types['node']->setFormClass('mymodule_foo', 'Drupal\\mymodule\\NodeFooForm');",
            "\t*/",
            "}"
        ],
        "description": "Add to entity type definitions.",
        "prefix": "hook_entity_type_build",
        "scope": "php"
    },
    "hook_entity_update": {
        "body": [
            "/**",
            "* Implements hook_entity_update().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_update(Drupal\\Core\\Entity\\EntityInterface \\$$entity) {",
            "",
            "\t/*",
            "\t\t// Update the entity's entry in a fictional table of all entities.",
            "\t\tdb_update('example_entity')",
            "\t\t\t->fields([",
            "\t\t\t\t'updated' => REQUEST_TIME,",
            "\t\t\t])",
            "\t\t\t->condition('type', \\$$entity->getEntityTypeId())",
            "\t\t\t->condition('id', \\$$entity->id())",
            "\t\t\t->execute();",
            "\t*/",
            "}"
        ],
        "description": "Respond to updates to an entity.",
        "prefix": "hook_entity_update",
        "scope": "php"
    },
    "hook_entity_view": {
        "body": [
            "/**",
            "* Implements hook_entity_view().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_view(array &\\$$build, \\Drupal\\Core\\Entity\\EntityInterface \\$$entity, \\Drupal\\Core\\Entity\\Display\\EntityViewDisplayInterface \\$$display, \\$$view_mode) {",
            "",
            "\t/*",
            "\t\t// Only do the extra work if the component is configured to be displayed.",
            "\t\t// This assumes a 'mymodule_addition' extra field has been defined for the",
            "\t\t// entity bundle in hook_entity_extra_field_info().",
            "\t\tif (\\$$display->getComponent('mymodule_addition')) {",
            "\t\t\t\\$$build['mymodule_addition'] = [",
            "\t\t\t\t'#markup' => mymodule_addition(\\$$entity),",
            "\t\t\t\t'#theme' => 'mymodule_my_additional_field',",
            "\t\t\t];",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Act on entities being assembled before rendering.",
        "prefix": "hook_entity_view",
        "scope": "php"
    },
    "hook_entity_view_alter": {
        "body": [
            "/**",
            "* Implements hook_entity_view_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_view_alter(array &\\$$build, Drupal\\Core\\Entity\\EntityInterface \\$$entity, \\Drupal\\Core\\Entity\\Display\\EntityViewDisplayInterface \\$$display) {",
            "",
            "\t/*",
            "\t\tif (\\$$build['#view_mode'] == 'full' && isset(\\$$build['an_additional_field'])) {",
            "\t\t\t// Change its weight.",
            "\t\t\t\\$$build['an_additional_field']['#weight'] = -10;",
            "\t",
            "\t\t\t// Add a #post_render callback to act on the rendered HTML of the entity.",
            "\t\t\t\\$$build['#post_render'][] = 'my_module_node_post_render';",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter the results of the entity build array.",
        "prefix": "hook_entity_view_alter",
        "scope": "php"
    },
    "hook_entity_view_display_alter": {
        "body": [
            "/**",
            "* Implements hook_entity_view_display_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_view_display_alter(\\Drupal\\Core\\Entity\\Display\\EntityViewDisplayInterface \\$$display, array \\$$context) {",
            "",
            "\t/*",
            "\t\t// Leave field labels out of the search index.",
            "\t\tif (\\$$context['entity_type'] == 'node' && \\$$context['view_mode'] == 'search_index') {",
            "\t\t\tforeach (\\$$display->getComponents() as \\$$name => \\$$options) {",
            "\t\t\t\tif (isset(\\$$options['label'])) {",
            "\t\t\t\t\t\\$$options['label'] = 'hidden';",
            "\t\t\t\t\t\\$$display->setComponent(\\$$name, \\$$options);",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter the settings used for displaying an entity.",
        "prefix": "hook_entity_view_display_alter",
        "scope": "php"
    },
    "hook_entity_view_mode_alter": {
        "body": [
            "/**",
            "* Implements hook_entity_view_mode_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_view_mode_alter(&\\$$view_mode, Drupal\\Core\\Entity\\EntityInterface \\$$entity, \\$$context) {",
            "",
            "\t/*",
            "\t\t// For nodes, change the view mode when it is teaser.",
            "\t\tif (\\$$entity->getEntityTypeId() == 'node' && \\$$view_mode == 'teaser') {",
            "\t\t\t\\$$view_mode = 'my_custom_view_mode';",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Change the view mode of an entity that is being displayed.",
        "prefix": "hook_entity_view_mode_alter",
        "scope": "php"
    },
    "hook_entity_view_mode_info_alter": {
        "body": [
            "/**",
            "* Implements hook_entity_view_mode_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_entity_view_mode_info_alter(&\\$$view_modes) {",
            "",
            "\t/*",
            "\t\t\\$$view_modes['user']['full']['status'] = TRUE;",
            "\t*/",
            "}"
        ],
        "description": "Alter the view modes for entity types.",
        "prefix": "hook_entity_view_mode_info_alter",
        "scope": "php"
    },
    "hook_extension": {
        "body": [
            "/**",
            "* Implements hook_extension().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_extension() {",
            "",
            "\t/*",
            "\t\t// Extension for template base names in Twig.",
            "\t\treturn '.html.twig';",
            "\t*/",
            "}"
        ],
        "description": "Declare a template file extension to be used with a theme engine.",
        "prefix": "hook_extension",
        "scope": "php"
    },
    "hook_field_formatter_info_alter": {
        "body": [
            "/**",
            "* Implements hook_field_formatter_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_field_formatter_info_alter(array &\\$$info) {",
            "",
            "\t/*",
            "\t\t// Let a new field type re-use an existing formatter.",
            "\t\t\\$$info['text_default']['field_types'][] = 'my_field_type';",
            "\t*/",
            "}"
        ],
        "description": "Perform alterations on Field API formatter types.",
        "prefix": "hook_field_formatter_info_alter",
        "scope": "php"
    },
    "hook_field_formatter_settings_summary_alter": {
        "body": [
            "/**",
            "* Implements hook_field_formatter_settings_summary_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_field_formatter_settings_summary_alter(&\\$$summary, \\$$context) {",
            "",
            "\t/*",
            "\t\t// Append a message to the summary when an instance of foo_formatter has",
            "\t\t// mysetting set to TRUE for the current view mode.",
            "\t\tif (\\$$context['formatter']->getPluginId() == 'foo_formatter') {",
            "\t\t\tif (\\$$context['formatter']->getThirdPartySetting('my_module', 'my_setting')) {",
            "\t\t\t\t\\$$summary[] = t('My setting enabled.');",
            "\t\t\t}",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alters the field formatter settings summary.",
        "prefix": "hook_field_formatter_settings_summary_alter",
        "scope": "php"
    },
    "hook_field_formatter_third_party_settings_form": {
        "body": [
            "/**",
            "* Implements hook_field_formatter_third_party_settings_form().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_field_formatter_third_party_settings_form(\\Drupal\\Core\\Field\\FormatterInterface \\$$plugin, \\Drupal\\Core\\Field\\FieldDefinitionInterface \\$$field_definition, \\$$view_mode, \\$$form, \\Drupal\\Core\\Form\\FormStateInterface \\$$form_state) {",
            "",
            "\t/*",
            "\t\t\\$$element = [];",
            "\t\t// Add a 'my_setting' checkbox to the settings form for 'foo_formatter' field",
            "\t\t// formatters.",
            "\t\tif (\\$$plugin->getPluginId() == 'foo_formatter') {",
            "\t\t\t\\$$element['my_setting'] = [",
            "\t\t\t\t'#type' => 'checkbox',",
            "\t\t\t\t'#title' => t('My setting'),",
            "\t\t\t\t'#default_value' => \\$$plugin->getThirdPartySetting('my_module', 'my_setting'),",
            "\t\t\t];",
            "\t\t}",
            "\t\treturn \\$$element;",
            "\t*/",
            "}"
        ],
        "description": "Allow modules to add settings to field formatters provided by other modules.",
        "prefix": "hook_field_formatter_third_party_settings_form",
        "scope": "php"
    },
    "hook_field_info_alter": {
        "body": [
            "/**",
            "* Implements hook_field_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_field_info_alter(&\\$$info) {",
            "",
            "\t/*",
            "\t\t// Change the default widget for fields of type 'foo'.",
            "\t\tif (isset(\\$$info['foo'])) {",
            "\t\t\t\\$$info['foo']['default widget'] = 'mymodule_widget';",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Perform alterations on Field API field types.",
        "prefix": "hook_field_info_alter",
        "scope": "php"
    },
    "hook_field_info_max_weight": {
        "body": [
            "/**",
            "* Implements hook_field_info_max_weight().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_field_info_max_weight(\\$$entity_type, \\$$bundle, \\$$context, \\$$context_mode) {",
            "",
            "\t/*",
            "\t\t\\$$weights = [];",
            "\t",
            "\t\tforeach (my_module_entity_additions(\\$$entity_type, \\$$bundle, \\$$context, \\$$context_mode) as \\$$addition) {",
            "\t\t\t\\$$weights[] = \\$$addition['weight'];",
            "\t\t}",
            "\t",
            "\t\treturn \\$$weights ? max(\\$$weights) : NULL;",
            "\t*/",
            "}"
        ],
        "description": "Returns the maximum weight for the entity components handled by the module.",
        "prefix": "hook_field_info_max_weight",
        "scope": "php"
    },
    "hook_field_purge_field": {
        "body": [
            "/**",
            "* Implements hook_field_purge_field().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_field_purge_field(\\Drupal\\field\\Entity\\FieldConfig \\$$field) {",
            "",
            "\t/*",
            "\t\tdb_delete('my_module_field_info')",
            "\t\t\t->condition('id', \\$$field->id())",
            "\t\t\t->execute();",
            "\t*/",
            "}"
        ],
        "description": "Acts when a field is being purged.",
        "prefix": "hook_field_purge_field",
        "scope": "php"
    },
    "hook_field_purge_field_storage": {
        "body": [
            "/**",
            "* Implements hook_field_purge_field_storage().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_field_purge_field_storage(\\Drupal\\field\\Entity\\FieldStorageConfig \\$$field_storage) {",
            "",
            "\t/*",
            "\t\tdb_delete('my_module_field_storage_info')",
            "\t\t\t->condition('uuid', \\$$field_storage->uuid())",
            "\t\t\t->execute();",
            "\t*/",
            "}"
        ],
        "description": "Acts when a field storage definition is being purged.",
        "prefix": "hook_field_purge_field_storage",
        "scope": "php"
    },
    "hook_field_storage_config_update_forbid": {
        "body": [
            "/**",
            "* Implements hook_field_storage_config_update_forbid().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_field_storage_config_update_forbid(\\Drupal\\field\\FieldStorageConfigInterface \\$$field_storage, \\Drupal\\field\\FieldStorageConfigInterface \\$$prior_field_storage) {",
            "",
            "\t/*",
            "\t\tif (\\$$field_storage->module == 'options' && \\$$field_storage->hasData()) {",
            "\t\t\t// Forbid any update that removes allowed values with actual data.",
            "\t\t\t\\$$allowed_values = \\$$field_storage->getSetting('allowed_values');",
            "\t\t\t\\$$prior_allowed_values = \\$$prior_field_storage->getSetting('allowed_values');",
            "\t\t\t\\$$lost_keys = array_keys(array_diff_key(\\$$prior_allowed_values, \\$$allowed_values));",
            "\t\t\tif (_options_values_in_use(\\$$field_storage->getTargetEntityTypeId(), \\$$field_storage->getName(), \\$$lost_keys)) {",
            "\t\t\t\tthrow new \\Drupal\\Core\\Entity\\Exception\\FieldStorageDefinitionUpdateForbiddenException(t('A list field (@field_name) with existing data cannot have its keys changed.', ['@field_name' => \\$$field_storage->getName()]));",
            "\t\t\t}",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Forbid a field storage update from occurring.",
        "prefix": "hook_field_storage_config_update_forbid",
        "scope": "php"
    },
    "hook_field_ui_preconfigured_options_alter": {
        "body": [
            "/**",
            "* Implements hook_field_ui_preconfigured_options_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_field_ui_preconfigured_options_alter(array &\\$$options, \\$$field_type) {",
            "",
            "\t/*",
            "\t\t// If the field is not an \"entity_reference\"-based field, bail out.",
            "\t\t// @var \\Drupal\\Core\\Field\\FieldTypePluginManager \\$$field_type_manager ",
            "\t\t\\$$field_type_manager = \\Drupal::service('plugin.manager.field.field_type');",
            "\t\t\\$$class = \\$$field_type_manager->getPluginClass(\\$$field_type);",
            "\t\tif (!is_a(\\$$class, 'Drupal\\Core\\Field\\Plugin\\Field\\FieldType\\EntityReferenceItem', TRUE)) {",
            "\t\t\treturn;",
            "\t\t}",
            "\t",
            "\t\t// Set the default formatter for media in entity reference fields to be the",
            "\t\t// \"Rendered entity\" formatter.",
            "\t\tif (!empty(\\$$options['media'])) {",
            "\t\t\t\\$$options['media']['entity_view_display']['type'] = 'entity_reference_entity_view';",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Perform alterations on preconfigured field options.",
        "prefix": "hook_field_ui_preconfigured_options_alter",
        "scope": "php"
    },
    "hook_field_views_data": {
        "body": [
            "/**",
            "* Implements hook_field_views_data().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_field_views_data(\\Drupal\\field\\FieldStorageConfigInterface \\$$field_storage) {",
            "",
            "\t/*",
            "\t\t\\$$data = views_field_default_views_data(\\$$field_storage);",
            "\t\tforeach (\\$$data as \\$$table_name => \\$$table_data) {",
            "\t\t\t// Add the relationship only on the target_id field.",
            "\t\t\t\\$$data[\\$$table_name][\\$$field_storage->getName() . '_target_id']['relationship'] = [",
            "\t\t\t\t'id' => 'standard',",
            "\t\t\t\t'base' => 'file_managed',",
            "\t\t\t\t'base field' => 'target_id',",
            "\t\t\t\t'label' => t('image from @field_name', ['@field_name' => \\$$field_storage->getName()]),",
            "\t\t\t];",
            "\t\t}",
            "\t",
            "\t\treturn \\$$data;",
            "\t*/",
            "}"
        ],
        "description": "Override the default Views data for a Field API field.",
        "prefix": "hook_field_views_data",
        "scope": "php"
    },
    "hook_field_views_data_alter": {
        "body": [
            "/**",
            "* Implements hook_field_views_data_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_field_views_data_alter(array &\\$$data, \\Drupal\\field\\FieldStorageConfigInterface \\$$field_storage) {",
            "",
            "\t/*",
            "\t\t\\$$entity_type_id = \\$$field_storage->getTargetEntityTypeId();",
            "\t\t\\$$field_name = \\$$field_storage->getName();",
            "\t\t\\$$entity_type = \\Drupal::entityManager()->getDefinition(\\$$entity_type_id);",
            "\t\t\\$$pseudo_field_name = 'reverse_' . \\$$field_name . '_' . \\$$entity_type_id;",
            "\t\t\\$$table_mapping = \\Drupal::entityManager()->getStorage(\\$$entity_type_id)->getTableMapping();",
            "\t",
            "\t\tlist(\\$$label) = views_entity_field_label(\\$$entity_type_id, \\$$field_name);",
            "\t",
            "\t\t\\$$data['file_managed'][\\$$pseudo_field_name]['relationship'] = [",
            "\t\t\t'title' => t('@entity using @field', ['@entity' => \\$$entity_type->getLabel(), '@field' => \\$$label]),",
            "\t\t\t'help' => t('Relate each @entity with a @field set to the image.', ['@entity' => \\$$entity_type->getLabel(), '@field' => \\$$label]),",
            "\t\t\t'id' => 'entity_reverse',",
            "\t\t\t'field_name' => \\$$field_name,",
            "\t\t\t'entity_type' => \\$$entity_type_id,",
            "\t\t\t'field table' => \\$$table_mapping->getDedicatedDataTableName(\\$$field_storage),",
            "\t\t\t'field field' => \\$$field_name . '_target_id',",
            "\t\t\t'base' => \\$$entity_type->getBaseTable(),",
            "\t\t\t'base field' => \\$$entity_type->getKey('id'),",
            "\t\t\t'label' => \\$$field_name,",
            "\t\t\t'join_extra' => [",
            "\t\t\t\t0 => [",
            "\t\t\t\t\t'field' => 'deleted',",
            "\t\t\t\t\t'value' => 0,",
            "\t\t\t\t\t'numeric' => TRUE,",
            "\t\t\t\t],",
            "\t\t\t],",
            "\t\t];",
            "\t*/",
            "}"
        ],
        "description": "Alter the Views data for a single Field API field.",
        "prefix": "hook_field_views_data_alter",
        "scope": "php"
    },
    "hook_field_views_data_views_data_alter": {
        "body": [
            "/**",
            "* Implements hook_field_views_data_views_data_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_field_views_data_views_data_alter(array &\\$$data, \\Drupal\\field\\FieldStorageConfigInterface \\$$field) {",
            "",
            "\t/*",
            "\t\t\\$$field_name = \\$$field->getName();",
            "\t\t\\$$data_key = 'field_data_' . \\$$field_name;",
            "\t\t\\$$entity_type_id = \\$$field->entity_type;",
            "\t\t\\$$entity_type = \\Drupal::entityManager()->getDefinition(\\$$entity_type_id);",
            "\t\t\\$$pseudo_field_name = 'reverse_' . \\$$field_name . '_' . \\$$entity_type_id;",
            "\t\tlist(\\$$label) = views_entity_field_label(\\$$entity_type_id, \\$$field_name);",
            "\t\t\\$$table_mapping = \\Drupal::entityManager()->getStorage(\\$$entity_type_id)->getTableMapping();",
            "\t",
            "\t\t// Views data for this field is in \\$$data[\\$$data_key].",
            "\t\t\\$$data[\\$$data_key][\\$$pseudo_field_name]['relationship'] = [",
            "\t\t\t'title' => t('@entity using @field', ['@entity' => \\$$entity_type->getLabel(), '@field' => \\$$label]),",
            "\t\t\t'help' => t('Relate each @entity with a @field set to the term.', ['@entity' => \\$$entity_type->getLabel(), '@field' => \\$$label]),",
            "\t\t\t'id' => 'entity_reverse',",
            "\t\t\t'field_name' => \\$$field_name,",
            "\t\t\t'entity_type' => \\$$entity_type_id,",
            "\t\t\t'field table' => \\$$table_mapping->getDedicatedDataTableName(\\$$field),",
            "\t\t\t'field field' => \\$$field_name . '_target_id',",
            "\t\t\t'base' => \\$$entity_type->getBaseTable(),",
            "\t\t\t'base field' => \\$$entity_type->getKey('id'),",
            "\t\t\t'label' => \\$$field_name,",
            "\t\t\t'join_extra' => [",
            "\t\t\t\t0 => [",
            "\t\t\t\t\t'field' => 'deleted',",
            "\t\t\t\t\t'value' => 0,",
            "\t\t\t\t\t'numeric' => TRUE,",
            "\t\t\t\t],",
            "\t\t\t],",
            "\t\t];",
            "\t*/",
            "}"
        ],
        "description": "Alter the Views data on a per field basis.",
        "prefix": "hook_field_views_data_views_data_alter",
        "scope": "php"
    },
    "hook_field_widget_WIDGET_TYPE_form_alter": {
        "body": [
            "/**",
            "* Implements hook_field_widget_WIDGET_TYPE_form_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_field_widget_${WIDGET_TYPE}_form_alter(&\\$$element, \\Drupal\\Core\\Form\\FormStateInterface \\$$form_state, \\$$context) {",
            "",
            "\t/*",
            "\t\t// Code here will only act on widgets of type WIDGET_TYPE.\tFor example,",
            "\t\t// hook_field_widget_mymodule_autocomplete_form_alter() will only act on",
            "\t\t// widgets of type 'mymodule_autocomplete'.",
            "\t\t\\$$element['#autocomplete_route_name'] = 'mymodule.autocomplete_route';",
            "\t*/",
            "}"
        ],
        "description": "Alter widget forms for a specific widget provided by another module.",
        "prefix": "hook_field_widget_WIDGET_TYPE_form_alter",
        "scope": "php"
    },
    "hook_field_widget_form_alter": {
        "body": [
            "/**",
            "* Implements hook_field_widget_form_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_field_widget_form_alter(&\\$$element, \\Drupal\\Core\\Form\\FormStateInterface \\$$form_state, \\$$context) {",
            "",
            "\t/*",
            "\t\t// Add a css class to widget form elements for all fields of type mytype.",
            "\t\t\\$$field_definition = \\$$context['items']->getFieldDefinition();",
            "\t\tif (\\$$field_definition->getType() == 'mytype') {",
            "\t\t\t// Be sure not to overwrite existing attributes.",
            "\t\t\t\\$$element['#attributes']['class'][] = 'myclass';",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter forms for field widgets provided by other modules.",
        "prefix": "hook_field_widget_form_alter",
        "scope": "php"
    },
    "hook_field_widget_info_alter": {
        "body": [
            "/**",
            "* Implements hook_field_widget_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_field_widget_info_alter(array &\\$$info) {",
            "",
            "\t/*",
            "\t\t// Let a new field type re-use an existing widget.",
            "\t\t\\$$info['options_select']['field_types'][] = 'my_field_type';",
            "\t*/",
            "}"
        ],
        "description": "Perform alterations on Field API widget types.",
        "prefix": "hook_field_widget_info_alter",
        "scope": "php"
    },
    "hook_field_widget_multivalue_WIDGET_TYPE_form_alter": {
        "body": [
            "/**",
            "* Implements hook_field_widget_multivalue_WIDGET_TYPE_form_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_field_widget_multivalue_${WIDGET_TYPE}_form_alter(array &\\$$elements, \\Drupal\\Core\\Form\\FormStateInterface \\$$form_state, array \\$$context) {",
            "",
            "\t/*",
            "\t\t// Code here will only act on widgets of type WIDGET_TYPE. For example,",
            "\t\t// hook_field_widget_multivalue_mymodule_autocomplete_form_alter() will only",
            "\t\t// act on widgets of type 'mymodule_autocomplete'.",
            "\t\t// Change the autocomplete route for each autocomplete element within the",
            "\t\t// multivalue widget.",
            "\t\tforeach (Element::children(\\$$elements) as \\$$delta => \\$$element) {",
            "\t\t\t\\$$elements[\\$$delta]['#autocomplete_route_name'] = 'mymodule.autocomplete_route';",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter multi-value widget forms for a widget provided by another module.",
        "prefix": "hook_field_widget_multivalue_WIDGET_TYPE_form_alter",
        "scope": "php"
    },
    "hook_field_widget_multivalue_form_alter": {
        "body": [
            "/**",
            "* Implements hook_field_widget_multivalue_form_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_field_widget_multivalue_form_alter(array &\\$$elements, \\Drupal\\Core\\Form\\FormStateInterface \\$$form_state, array \\$$context) {",
            "",
            "\t/*",
            "\t\t// Add a css class to widget form elements for all fields of type mytype.",
            "\t\t\\$$field_definition = \\$$context['items']->getFieldDefinition();",
            "\t\tif (\\$$field_definition->getType() == 'mytype') {",
            "\t\t\t// Be sure not to overwrite existing attributes.",
            "\t\t\t\\$$elements['#attributes']['class'][] = 'myclass';",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter forms for multi-value field widgets provided by other modules.",
        "prefix": "hook_field_widget_multivalue_form_alter",
        "scope": "php"
    },
    "hook_field_widget_settings_summary_alter": {
        "body": [
            "/**",
            "* Implements hook_field_widget_settings_summary_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_field_widget_settings_summary_alter(&\\$$summary, \\$$context) {",
            "",
            "\t/*",
            "\t\t// Append a message to the summary when an instance of foo_widget has",
            "\t\t// mysetting set to TRUE for the current view mode.",
            "\t\tif (\\$$context['widget']->getPluginId() == 'foo_widget') {",
            "\t\t\tif (\\$$context['widget']->getThirdPartySetting('my_module', 'my_setting')) {",
            "\t\t\t\t\\$$summary[] = t('My setting enabled.');",
            "\t\t\t}",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alters the field widget settings summary.",
        "prefix": "hook_field_widget_settings_summary_alter",
        "scope": "php"
    },
    "hook_field_widget_third_party_settings_form": {
        "body": [
            "/**",
            "* Implements hook_field_widget_third_party_settings_form().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_field_widget_third_party_settings_form(\\Drupal\\Core\\Field\\WidgetInterface \\$$plugin, \\Drupal\\Core\\Field\\FieldDefinitionInterface \\$$field_definition, \\$$form_mode, \\$$form, \\Drupal\\Core\\Form\\FormStateInterface \\$$form_state) {",
            "",
            "\t/*",
            "\t\t\\$$element = [];",
            "\t\t// Add a 'my_setting' checkbox to the settings form for 'foo_widget' field",
            "\t\t// widgets.",
            "\t\tif (\\$$plugin->getPluginId() == 'foo_widget') {",
            "\t\t\t\\$$element['my_setting'] = [",
            "\t\t\t\t'#type' => 'checkbox',",
            "\t\t\t\t'#title' => t('My setting'),",
            "\t\t\t\t'#default_value' => \\$$plugin->getThirdPartySetting('my_module', 'my_setting'),",
            "\t\t\t];",
            "\t\t}",
            "\t\treturn \\$$element;",
            "\t*/",
            "}"
        ],
        "description": "Allow modules to add settings to field widgets provided by other modules.",
        "prefix": "hook_field_widget_third_party_settings_form",
        "scope": "php"
    },
    "hook_file_copy": {
        "body": [
            "/**",
            "* Implements hook_file_copy().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_file_copy(Drupal\\file\\FileInterface \\$$file, Drupal\\file\\FileInterface \\$$source) {",
            "",
            "\t/*",
            "\t\t// Make sure that the file name starts with the owner's user name.",
            "\t\tif (strpos(\\$$file->getFilename(), \\$$file->getOwner()->name) !== 0) {",
            "\t\t\t\\$$file->setFilename(\\$$file->getOwner()->name . '_' . \\$$file->getFilename());",
            "\t\t\t\\$$file->save();",
            "\t",
            "\t\t\t\\Drupal::logger('file')->notice('Copied file %source has been renamed to %destination', ['%source' => \\$$source->filename, '%destination' => \\$$file->getFilename()]);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Respond to a file that has been copied.",
        "prefix": "hook_file_copy",
        "scope": "php"
    },
    "hook_file_download": {
        "body": [
            "/**",
            "* Implements hook_file_download().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_file_download(\\$$uri) {",
            "",
            "\t/*",
            "\t\t// Check to see if this is a config download.",
            "\t\t\\$$scheme = file_uri_scheme(\\$$uri);",
            "\t\t\\$$target = file_uri_target(\\$$uri);",
            "\t\tif (\\$$scheme == 'temporary' && \\$$target == 'config.tar.gz') {",
            "\t\t\treturn [",
            "\t\t\t\t'Content-disposition' => 'attachment; filename=\"config.tar.gz\"',",
            "\t\t\t];",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Control access to private file downloads and specify HTTP headers.",
        "prefix": "hook_file_download",
        "scope": "php"
    },
    "hook_file_mimetype_mapping_alter": {
        "body": [
            "/**",
            "* Implements hook_file_mimetype_mapping_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_file_mimetype_mapping_alter(&\\$$mapping) {",
            "",
            "\t/*",
            "\t\t// Add new MIME type 'drupal/info'.",
            "\t\t\\$$mapping['mimetypes']['example_info'] = 'drupal/info';",
            "\t\t// Add new extension '.info.yml' and map it to the 'drupal/info' MIME type.",
            "\t\t\\$$mapping['extensions']['info'] = 'example_info';",
            "\t\t// Override existing extension mapping for '.ogg' files.",
            "\t\t\\$$mapping['extensions']['ogg'] = 189;",
            "\t*/",
            "}"
        ],
        "description": "Alter MIME type mappings used to determine MIME type from a file extension.",
        "prefix": "hook_file_mimetype_mapping_alter",
        "scope": "php"
    },
    "hook_file_move": {
        "body": [
            "/**",
            "* Implements hook_file_move().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_file_move(Drupal\\file\\FileInterface \\$$file, Drupal\\file\\FileInterface \\$$source) {",
            "",
            "\t/*",
            "\t\t// Make sure that the file name starts with the owner's user name.",
            "\t\tif (strpos(\\$$file->getFilename(), \\$$file->getOwner()->name) !== 0) {",
            "\t\t\t\\$$file->setFilename(\\$$file->getOwner()->name . '_' . \\$$file->getFilename());",
            "\t\t\t\\$$file->save();",
            "\t",
            "\t\t\t\\Drupal::logger('file')->notice('Moved file %source has been renamed to %destination', ['%source' => \\$$source->filename, '%destination' => \\$$file->getFilename()]);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Respond to a file that has been moved.",
        "prefix": "hook_file_move",
        "scope": "php"
    },
    "hook_file_url_alter": {
        "body": [
            "/**",
            "* Implements hook_file_url_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_file_url_alter(&\\$$uri) {",
            "",
            "\t/*",
            "\t\t\\$$user = \\Drupal::currentUser();",
            "\t",
            "\t\t// User 1 will always see the local file in this example.",
            "\t\tif (\\$$user->id() == 1) {",
            "\t\t\treturn;",
            "\t\t}",
            "\t",
            "\t\t\\$$cdn1 = 'http://cdn1.example.com';",
            "\t\t\\$$cdn2 = 'http://cdn2.example.com';",
            "\t\t\\$$cdn_extensions = ['css', 'js', 'gif', 'jpg', 'jpeg', 'png'];",
            "\t",
            "\t\t// Most CDNs don't support private file transfers without a lot of hassle,",
            "\t\t// so don't support this in the common case.",
            "\t\t\\$$schemes = ['public'];",
            "\t",
            "\t\t\\$$scheme = file_uri_scheme(\\$$uri);",
            "\t",
            "\t\t// Only serve shipped files and public created files from the CDN.",
            "\t\tif (!\\$$scheme || in_array(\\$$scheme, \\$$schemes)) {",
            "\t\t\t// Shipped files.",
            "\t\t\tif (!\\$$scheme) {",
            "\t\t\t\t\\$$path = \\$$uri;",
            "\t\t\t}",
            "\t\t\t// Public created files.",
            "\t\t\telse {",
            "\t\t\t\t\\$$wrapper = \\Drupal::service('stream_wrapper_manager')->getViaScheme(\\$$scheme);",
            "\t\t\t\t\\$$path = \\$$wrapper->getDirectoryPath() . '/' . file_uri_target(\\$$uri);",
            "\t\t\t}",
            "\t",
            "\t\t\t// Clean up Windows paths.",
            "\t\t\t\\$$path = str_replace('\\\\', '/', \\$$path);",
            "\t",
            "\t\t\t// Serve files with one of the CDN extensions from CDN 1, all others from",
            "\t\t\t// CDN 2.",
            "\t\t\t\\$$pathinfo = pathinfo(\\$$path);",
            "\t\t\tif (isset(\\$$pathinfo['extension']) && in_array(\\$$pathinfo['extension'], \\$$cdn_extensions)) {",
            "\t\t\t\t\\$$uri = \\$$cdn1 . '/' . \\$$path;",
            "\t\t\t}",
            "\t\t\telse {",
            "\t\t\t\t\\$$uri = \\$$cdn2 . '/' . \\$$path;",
            "\t\t\t}",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter the URL to a file.",
        "prefix": "hook_file_url_alter",
        "scope": "php"
    },
    "hook_file_validate": {
        "body": [
            "/**",
            "* Implements hook_file_validate().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_file_validate(Drupal\\file\\FileInterface \\$$file) {",
            "",
            "\t/*",
            "\t\t\\$$errors = [];",
            "\t",
            "\t\tif (!\\$$file->getFilename()) {",
            "\t\t\t\\$$errors[] = t(\"The file's name is empty. Please give a name to the file.\");",
            "\t\t}",
            "\t\tif (strlen(\\$$file->getFilename()) > 255) {",
            "\t\t\t\\$$errors[] = t(\"The file's name exceeds the 255 characters limit. Please rename the file and try again.\");",
            "\t\t}",
            "\t",
            "\t\treturn \\$$errors;",
            "\t*/",
            "}"
        ],
        "description": "Check that files meet a given criteria.",
        "prefix": "hook_file_validate",
        "scope": "php"
    },
    "hook_filetransfer_info": {
        "body": [
            "/**",
            "* Implements hook_filetransfer_info().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_filetransfer_info() {",
            "",
            "\t/*",
            "\t\t\\$$info['sftp'] = [",
            "\t\t\t'title' => t('SFTP (Secure FTP)'),",
            "\t\t\t'class' => 'Drupal\\Core\\FileTransfer\\SFTP',",
            "\t\t\t'weight' => 10,",
            "\t\t];",
            "\t\treturn \\$$info;",
            "\t*/",
            "}"
        ],
        "description": "Register information about FileTransfer classes provided by a module.",
        "prefix": "hook_filetransfer_info",
        "scope": "php"
    },
    "hook_filetransfer_info_alter": {
        "body": [
            "/**",
            "* Implements hook_filetransfer_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_filetransfer_info_alter(&\\$$filetransfer_info) {",
            "",
            "\t/*",
            "\t\t// Remove the FTP option entirely.",
            "\t\tunset(\\$$filetransfer_info['ftp']);",
            "\t\t// Make sure the SSH option is listed first.",
            "\t\t\\$$filetransfer_info['ssh']['weight'] = -10;",
            "\t*/",
            "}"
        ],
        "description": "Alter the FileTransfer class registry.",
        "prefix": "hook_filetransfer_info_alter",
        "scope": "php"
    },
    "hook_filter_format_disable": {
        "body": [
            "/**",
            "* Implements hook_filter_format_disable().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_filter_format_disable(\\$$format) {",
            "",
            "\t/*",
            "\t\tmymodule_cache_rebuild();",
            "\t*/",
            "}"
        ],
        "description": "Perform actions when a text format has been disabled.",
        "prefix": "hook_filter_format_disable",
        "scope": "php"
    },
    "hook_filter_info_alter": {
        "body": [
            "/**",
            "* Implements hook_filter_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_filter_info_alter(&\\$$info) {",
            "",
            "\t/*",
            "\t\t// Alter the default settings of the URL filter provided by core.",
            "\t\t\\$$info['filter_url']['default_settings'] = [",
            "\t\t\t'filter_url_length' => 100,",
            "\t\t];",
            "\t*/",
            "}"
        ],
        "description": "Perform alterations on filter definitions.",
        "prefix": "hook_filter_info_alter",
        "scope": "php"
    },
    "hook_filter_secure_image_alter": {
        "body": [
            "/**",
            "* Implements hook_filter_secure_image_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_filter_secure_image_alter(&\\$$image) {",
            "",
            "\t/*",
            "\t\t// Turn an invalid image into an error indicator.",
            "\t\t\\$$image->setAttribute('src', base_path() . 'core/misc/icons/e32700/error.svg');",
            "\t\t\\$$image->setAttribute('alt', t('Image removed.'));",
            "\t\t\\$$image->setAttribute('title', t('This image has been removed. For security reasons, only images from the local domain are allowed.'));",
            "\t",
            "\t\t// Add a CSS class to aid in styling.",
            "\t\t\\$$class = (\\$$image->getAttribute('class') ? trim(\\$$image->getAttribute('class')) . ' ' : '');",
            "\t\t\\$$class .= 'filter-image-invalid';",
            "\t\t\\$$image->setAttribute('class', \\$$class);",
            "\t*/",
            "}"
        ],
        "description": "Alters images with an invalid source.",
        "prefix": "hook_filter_secure_image_alter",
        "scope": "php"
    },
    "hook_form_BASE_FORM_ID_alter": {
        "body": [
            "/**",
            "* Implements hook_form_BASE_FORM_ID_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_form_${BASE_FORM_ID}_alter(&\\$$form, \\Drupal\\Core\\Form\\FormStateInterface \\$$form_state, \\$$form_id) {",
            "",
            "\t/*",
            "\t\t// Modification for the form with the given BASE_FORM_ID goes here. For",
            "\t\t// example, if BASE_FORM_ID is \"node_form\", this code would run on every",
            "\t\t// node form, regardless of node type.",
            "\t",
            "\t\t// Add a checkbox to the node form about agreeing to terms of use.",
            "\t\t\\$$form['terms_of_use'] = [",
            "\t\t\t'#type' => 'checkbox',",
            "\t\t\t'#title' => t(\"I agree with the website's terms and conditions.\"),",
            "\t\t\t'#required' => TRUE,",
            "\t\t];",
            "\t*/",
            "}"
        ],
        "description": "Provide a form-specific alteration for shared ('base') forms.",
        "prefix": "hook_form_BASE_FORM_ID_alter",
        "scope": "php"
    },
    "hook_form_FORM_ID_alter": {
        "body": [
            "/**",
            "* Implements hook_form_FORM_ID_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_form_${FORM_ID}_alter(&\\$$form, \\Drupal\\Core\\Form\\FormStateInterface \\$$form_state, \\$$form_id) {",
            "",
            "\t/*",
            "\t\t// Modification for the form with the given form ID goes here. For example, if",
            "\t\t// FORM_ID is \"user_register_form\" this code would run only on the user",
            "\t\t// registration form.",
            "\t",
            "\t\t// Add a checkbox to registration form about agreeing to terms of use.",
            "\t\t\\$$form['terms_of_use'] = [",
            "\t\t\t'#type' => 'checkbox',",
            "\t\t\t'#title' => t(\"I agree with the website's terms and conditions.\"),",
            "\t\t\t'#required' => TRUE,",
            "\t\t];",
            "\t*/",
            "}"
        ],
        "description": "Provide a form-specific alteration instead of the global hook_form_alter().",
        "prefix": "hook_form_FORM_ID_alter",
        "scope": "php"
    },
    "hook_form_alter": {
        "body": [
            "/**",
            "* Implements hook_form_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_form_alter(&\\$$form, \\Drupal\\Core\\Form\\FormStateInterface \\$$form_state, \\$$form_id) {",
            "",
            "\t/*",
            "\t\tif (isset(\\$$form['type']) && \\$$form['type']['#value'] . '_node_settings' == \\$$form_id) {",
            "\t\t\t\\$$upload_enabled_types = \\Drupal::config('mymodule.settings')->get('upload_enabled_types');",
            "\t\t\t\\$$form['workflow']['upload_' . \\$$form['type']['#value']] = [",
            "\t\t\t\t'#type' => 'radios',",
            "\t\t\t\t'#title' => t('Attachments'),",
            "\t\t\t\t'#default_value' => in_array(\\$$form['type']['#value'], \\$$upload_enabled_types) ? 1 : 0,",
            "\t\t\t\t'#options' => [t('Disabled'), t('Enabled')],",
            "\t\t\t];",
            "\t\t\t// Add a custom submit handler to save the array of types back to the config file.",
            "\t\t\t\\$$form['actions']['submit']['#submit'][] = 'mymodule_upload_enabled_types_submit';",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Perform alterations before a form is rendered.",
        "prefix": "hook_form_alter",
        "scope": "php"
    },
    "hook_form_system_theme_settings_alter": {
        "body": [
            "/**",
            "* Implements hook_form_system_theme_settings_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_form_system_theme_settings_alter(&\\$$form, \\Drupal\\Core\\Form\\FormStateInterface \\$$form_state) {",
            "",
            "\t/*",
            "\t\t// Add a checkbox to toggle the breadcrumb trail.",
            "\t\t\\$$form['toggle_breadcrumb'] = [",
            "\t\t\t'#type' => 'checkbox',",
            "\t\t\t'#title' => t('Display the breadcrumb'),",
            "\t\t\t'#default_value' => theme_get_setting('features.breadcrumb'),",
            "\t\t\t'#description'\t => t('Show a trail of links from the homepage to the current page.'),",
            "\t\t];",
            "\t*/",
            "}"
        ],
        "description": "Allow themes to alter the theme-specific settings form.",
        "prefix": "hook_form_system_theme_settings_alter",
        "scope": "php"
    },
    "hook_hal_relation_uri_alter": {
        "body": [
            "/**",
            "* Implements hook_hal_relation_uri_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_hal_relation_uri_alter(&\\$$uri, \\$$context = []) {",
            "",
            "\t/*",
            "\t\tif (\\$$context['mymodule'] == TRUE) {",
            "\t\t\t\\$$base = \\Drupal::config('hal.settings')->get('link_domain');",
            "\t\t\t\\$$uri = str_replace(\\$$base, 'http://mymodule.domain', \\$$uri);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter the HAL relation URI.",
        "prefix": "hook_hal_relation_uri_alter",
        "scope": "php"
    },
    "hook_hal_type_uri_alter": {
        "body": [
            "/**",
            "* Implements hook_hal_type_uri_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_hal_type_uri_alter(&\\$$uri, \\$$context = []) {",
            "",
            "\t/*",
            "\t\tif (\\$$context['mymodule'] == TRUE) {",
            "\t\t\t\\$$base = \\Drupal::config('hal.settings')->get('link_domain');",
            "\t\t\t\\$$uri = str_replace(\\$$base, 'http://mymodule.domain', \\$$uri);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter the HAL type URI.",
        "prefix": "hook_hal_type_uri_alter",
        "scope": "php"
    },
    "hook_help": {
        "body": [
            "/**",
            "* Implements hook_help().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_help(\\$$route_name, \\Drupal\\Core\\Routing\\RouteMatchInterface \\$$route_match) {",
            "",
            "\t/*",
            "\t\tswitch (\\$$route_name) {",
            "\t\t\t// Main module help for the block module.",
            "\t\t\tcase 'help.page.block':",
            "\t\t\t\treturn '<p>' . t('Blocks are boxes of content rendered into an area, or region, of a web page. The default theme Bartik, for example, implements the regions \"Sidebar first\", \"Sidebar second\", \"Featured\", \"Content\", \"Header\", \"Footer\", etc., and a block may appear in any one of these areas. The <a href=\":blocks\">blocks administration page</a> provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions.', [':blocks' => \\Drupal::url('block.admin_display')]) . '</p>';",
            "\t",
            "\t\t\t// Help for another path in the block module.",
            "\t\t\tcase 'block.admin_display':",
            "\t\t\t\treturn '<p>' . t('This page provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions. Since not all themes implement the same regions, or display regions in the same way, blocks are positioned on a per-theme basis. Remember that your changes will not be saved until you click the <em>Save blocks</em> button at the bottom of the page.') . '</p>';",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Provide online user help.",
        "prefix": "hook_help",
        "scope": "php"
    },
    "hook_help_section_info_alter": {
        "body": [
            "/**",
            "* Implements hook_help_section_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_help_section_info_alter(&\\$$info) {",
            "",
            "\t/*",
            "\t\t// Alter the header for the module overviews section.",
            "\t\t\\$$info['hook_help']['header'] = t('Overviews of modules');",
            "\t*/",
            "}"
        ],
        "description": "Perform alterations on help page section plugin definitions.",
        "prefix": "hook_help_section_info_alter",
        "scope": "php"
    },
    "hook_hook_info": {
        "body": [
            "/**",
            "* Implements hook_hook_info().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_hook_info() {",
            "",
            "\t/*",
            "\t\t\\$$hooks['token_info'] = [",
            "\t\t\t'group' => 'tokens',",
            "\t\t];",
            "\t\t\\$$hooks['tokens'] = [",
            "\t\t\t'group' => 'tokens',",
            "\t\t];",
            "\t\treturn \\$$hooks;",
            "\t*/",
            "}"
        ],
        "description": "Defines one or more hooks that are exposed by a module.",
        "prefix": "hook_hook_info",
        "scope": "php"
    },
    "hook_image_effect_info_alter": {
        "body": [
            "/**",
            "* Implements hook_image_effect_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_image_effect_info_alter(&\\$$effects) {",
            "",
            "\t/*",
            "\t\t// Override the Image module's 'Scale and Crop' effect label.",
            "\t\t\\$$effects['image_scale_and_crop']['label'] = t('Bangers and Mash');",
            "\t*/",
            "}"
        ],
        "description": "Alter the information provided in \\Drupal\\image\\Annotation\\ImageEffect.",
        "prefix": "hook_image_effect_info_alter",
        "scope": "php"
    },
    "hook_image_style_flush": {
        "body": [
            "/**",
            "* Implements hook_image_style_flush().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_image_style_flush(\\$$style) {",
            "",
            "\t/*",
            "\t\t// Empty cached data that contains information about the style.",
            "\t\t\\Drupal::cache('mymodule')->deleteAll();",
            "\t*/",
            "}"
        ],
        "description": "Respond to image style flushing.",
        "prefix": "hook_image_style_flush",
        "scope": "php"
    },
    "hook_install": {
        "body": [
            "/**",
            "* Implements hook_install().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_install() {",
            "",
            "\t/*",
            "\t\t// Create the styles directory and ensure it's writable.",
            "\t\t\\$$directory = file_default_scheme() . '://styles';",
            "\t\tfile_prepare_directory(\\$$directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);",
            "\t*/",
            "}"
        ],
        "description": "Perform setup tasks when the module is installed.",
        "prefix": "hook_install",
        "scope": "php"
    },
    "hook_install_tasks": {
        "body": [
            "/**",
            "* Implements hook_install_tasks().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_install_tasks(&\\$$install_state) {",
            "",
            "\t/*",
            "\t\t// Here, we define a variable to allow tasks to indicate that a particular,",
            "\t\t// processor-intensive batch process needs to be triggered later on in the",
            "\t\t// installation.",
            "\t\t\\$$myprofile_needs_batch_processing = \\Drupal::state()->get('myprofile.needs_batch_processing', FALSE);",
            "\t\t\\$$tasks = [",
            "\t\t\t// This is an example of a task that defines a form which the user who is",
            "\t\t\t// installing the site will be asked to fill out. To implement this task,",
            "\t\t\t// your profile would define a function named myprofile_data_import_form()",
            "\t\t\t// as a normal form API callback function, with associated validation and",
            "\t\t\t// submit handlers. In the submit handler, in addition to saving whatever",
            "\t\t\t// other data you have collected from the user, you might also call",
            "\t\t\t// \\Drupal::state()->set('myprofile.needs_batch_processing', TRUE) if the",
            "\t\t\t// user has entered data which requires that batch processing will need to",
            "\t\t\t// occur later on.",
            "\t\t\t'myprofile_data_import_form' => [",
            "\t\t\t\t'display_name' => t('Data import options'),",
            "\t\t\t\t'type' => 'form',",
            "\t\t\t],",
            "\t\t\t// Similarly, to implement this task, your profile would define a function",
            "\t\t\t// named myprofile_settings_form() with associated validation and submit",
            "\t\t\t// handlers. This form might be used to collect and save additional",
            "\t\t\t// information from the user that your profile needs. There are no extra",
            "\t\t\t// steps required for your profile to act as an \"installation wizard\"; you",
            "\t\t\t// can simply define as many tasks of type 'form' as you wish to execute,",
            "\t\t\t// and the forms will be presented to the user, one after another.",
            "\t\t\t'myprofile_settings_form' => [",
            "\t\t\t\t'display_name' => t('Additional options'),",
            "\t\t\t\t'type' => 'form',",
            "\t\t\t],",
            "\t\t\t// This is an example of a task that performs batch operations. To",
            "\t\t\t// implement this task, your profile would define a function named",
            "\t\t\t// myprofile_batch_processing() which returns a batch API array definition",
            "\t\t\t// that the installer will use to execute your batch operations. Due to the",
            "\t\t\t// 'myprofile.needs_batch_processing' variable used here, this task will be",
            "\t\t\t// hidden and skipped unless your profile set it to TRUE in one of the",
            "\t\t\t// previous tasks.",
            "\t\t\t'myprofile_batch_processing' => [",
            "\t\t\t\t'display_name' => t('Import additional data'),",
            "\t\t\t\t'display' => \\$$myprofile_needs_batch_processing,",
            "\t\t\t\t'type' => 'batch',",
            "\t\t\t\t'run' => \\$$myprofile_needs_batch_processing ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,",
            "\t\t\t],",
            "\t\t\t// This is an example of a task that will not be displayed in the list that",
            "\t\t\t// the user sees. To implement this task, your profile would define a",
            "\t\t\t// function named myprofile_final_site_setup(), in which additional,",
            "\t\t\t// automated site setup operations would be performed. Since this is the",
            "\t\t\t// last task defined by your profile, you should also use this function to",
            "\t\t\t// call \\Drupal::state()->delete('myprofile.needs_batch_processing') and",
            "\t\t\t// clean up the state that was used above. If you want the user to pass",
            "\t\t\t// to the final Drupal installation tasks uninterrupted, return no output",
            "\t\t\t// from this function. Otherwise, return themed output that the user will",
            "\t\t\t// see (for example, a confirmation page explaining that your profile's",
            "\t\t\t// tasks are complete, with a link to reload the current page and therefore",
            "\t\t\t// pass on to the final Drupal installation tasks when the user is ready to",
            "\t\t\t// do so).",
            "\t\t\t'myprofile_final_site_setup' => [],",
            "\t\t];",
            "\t\treturn \\$$tasks;",
            "\t*/",
            "}"
        ],
        "description": "Return an array of tasks to be performed by an installation profile.",
        "prefix": "hook_install_tasks",
        "scope": "php"
    },
    "hook_install_tasks_alter": {
        "body": [
            "/**",
            "* Implements hook_install_tasks_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_install_tasks_alter(&\\$$tasks, \\$$install_state) {",
            "",
            "\t/*",
            "\t\t// Replace the entire site configuration form provided by Drupal core",
            "\t\t// with a custom callback function defined by this installation profile.",
            "\t\t\\$$tasks['install_configure_form']['function'] = 'myprofile_install_configure_form';",
            "\t*/",
            "}"
        ],
        "description": "Alter the full list of installation tasks.",
        "prefix": "hook_install_tasks_alter",
        "scope": "php"
    },
    "hook_js_alter": {
        "body": [
            "/**",
            "* Implements hook_js_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_js_alter(&\\$$javascript, \\Drupal\\Core\\Asset\\AttachedAssetsInterface \\$$assets) {",
            "",
            "\t/*",
            "\t\t// Swap out jQuery to use an updated version of the library.",
            "\t\t\\$$javascript['core/assets/vendor/jquery/jquery.min.js']['data'] = drupal_get_path('module', 'jquery_update') . '/jquery.js';",
            "\t*/",
            "}"
        ],
        "description": "Perform necessary alterations to the JavaScript before it is presented on",
        "prefix": "hook_js_alter",
        "scope": "php"
    },
    "hook_js_settings_alter": {
        "body": [
            "/**",
            "* Implements hook_js_settings_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_js_settings_alter(array &\\$$settings, \\Drupal\\Core\\Asset\\AttachedAssetsInterface \\$$assets) {",
            "",
            "\t/*",
            "\t\t// Add settings.",
            "\t\t\\$$settings['user']['uid'] = \\Drupal::currentUser();",
            "\t",
            "\t\t// Manipulate settings.",
            "\t\tif (isset(\\$$settings['dialog'])) {",
            "\t\t\t\\$$settings['dialog']['autoResize'] = FALSE;",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Perform necessary alterations to the JavaScript settings (drupalSettings).",
        "prefix": "hook_js_settings_alter",
        "scope": "php"
    },
    "hook_js_settings_build": {
        "body": [
            "/**",
            "* Implements hook_js_settings_build().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_js_settings_build(array &\\$$settings, \\Drupal\\Core\\Asset\\AttachedAssetsInterface \\$$assets) {",
            "",
            "\t/*",
            "\t\t// Manipulate settings.",
            "\t\tif (isset(\\$$settings['dialog'])) {",
            "\t\t\t\\$$settings['dialog']['autoResize'] = FALSE;",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Modify the JavaScript settings (drupalSettings).",
        "prefix": "hook_js_settings_build",
        "scope": "php"
    },
    "hook_language_fallback_candidates_OPERATION_alter": {
        "body": [
            "/**",
            "* Implements hook_language_fallback_candidates_OPERATION_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_language_fallback_candidates_OPERATION_alter(array &\\$$candidates, array \\$$context) {",
            "",
            "\t/*",
            "\t\t// We know that the current OPERATION deals with entities so no need to check",
            "\t\t// here.",
            "\t\tif (\\$$context['data']->getEntityTypeId() == 'node') {",
            "\t\t\t\\$$candidates = array_reverse(\\$$candidates);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Allow modules to alter the fallback candidates for specific operations.",
        "prefix": "hook_language_fallback_candidates_OPERATION_alter",
        "scope": "php"
    },
    "hook_language_fallback_candidates_alter": {
        "body": [
            "/**",
            "* Implements hook_language_fallback_candidates_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_language_fallback_candidates_alter(array &\\$$candidates, array \\$$context) {",
            "",
            "\t/*",
            "\t\t\\$$candidates = array_reverse(\\$$candidates);",
            "\t*/",
            "}"
        ],
        "description": "Allow modules to alter the language fallback candidates.",
        "prefix": "hook_language_fallback_candidates_alter",
        "scope": "php"
    },
    "hook_language_negotiation_info_alter": {
        "body": [
            "/**",
            "* Implements hook_language_negotiation_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_language_negotiation_info_alter(array &\\$$negotiation_info) {",
            "",
            "\t/*",
            "\t\tif (isset(\\$$negotiation_info['custom_language_method'])) {",
            "\t\t\t\\$$negotiation_info['custom_language_method']['config'] = 'admin/config/regional/language/detection/custom-language-method';",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Perform alterations on language negotiation methods.",
        "prefix": "hook_language_negotiation_info_alter",
        "scope": "php"
    },
    "hook_language_switch_links_alter": {
        "body": [
            "/**",
            "* Implements hook_language_switch_links_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_language_switch_links_alter(array &\\$$links, \\$$type, \\Drupal\\Core\\Url \\$$url) {",
            "",
            "\t/*",
            "\t\t\\$$language_interface = \\Drupal::languageManager()->getCurrentLanguage();",
            "\t",
            "\t\tif (\\$$type == LanguageInterface::TYPE_CONTENT && isset(\\$$links[\\$$language_interface->getId()])) {",
            "\t\t\tforeach (\\$$links[\\$$language_interface->getId()] as \\$$link) {",
            "\t\t\t\t\\$$link['attributes']['class'][] = 'active-language';",
            "\t\t\t}",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Perform alterations on language switcher links.",
        "prefix": "hook_language_switch_links_alter",
        "scope": "php"
    },
    "hook_language_types_info": {
        "body": [
            "/**",
            "* Implements hook_language_types_info().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_language_types_info() {",
            "",
            "\t/*",
            "\t\treturn [",
            "\t\t\t'custom_language_type' => [",
            "\t\t\t\t'name' => t('Custom language'),",
            "\t\t\t\t'description' => t('A custom language type.'),",
            "\t\t\t\t'locked' => FALSE,",
            "\t\t\t],",
            "\t\t\t'fixed_custom_language_type' => [",
            "\t\t\t\t'locked' => TRUE,",
            "\t\t\t\t'fixed' => ['custom_language_negotiation_method'],",
            "\t\t\t],",
            "\t\t];",
            "\t*/",
            "}"
        ],
        "description": "Define language types.",
        "prefix": "hook_language_types_info",
        "scope": "php"
    },
    "hook_language_types_info_alter": {
        "body": [
            "/**",
            "* Implements hook_language_types_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_language_types_info_alter(array &\\$$language_types) {",
            "",
            "\t/*",
            "\t\tif (isset(\\$$language_types['custom_language_type'])) {",
            "\t\t\t\\$$language_types['custom_language_type_custom']['description'] = t('A far better description.');",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Perform alterations on language types.",
        "prefix": "hook_language_types_info_alter",
        "scope": "php"
    },
    "hook_layout_alter": {
        "body": [
            "/**",
            "* Implements hook_layout_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_layout_alter(&\\$$definitions) {",
            "",
            "\t/*",
            "\t\t// Remove a layout.",
            "\t\tunset(\\$$definitions['twocol']);",
            "\t*/",
            "}"
        ],
        "description": "Allow modules to alter layout plugin definitions.",
        "prefix": "hook_layout_alter",
        "scope": "php"
    },
    "hook_library_info_alter": {
        "body": [
            "/**",
            "* Implements hook_library_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_library_info_alter(&\\$$libraries, \\$$extension) {",
            "",
            "\t/*",
            "\t\t// Update Farbtastic to version 2.0.",
            "\t\tif (\\$$extension == 'core' && isset(\\$$libraries['jquery.farbtastic'])) {",
            "\t\t\t// Verify existing version is older than the one we are updating to.",
            "\t\t\tif (version_compare(\\$$libraries['jquery.farbtastic']['version'], '2.0', '<')) {",
            "\t\t\t\t// Update the existing Farbtastic to version 2.0.",
            "\t\t\t\t\\$$libraries['jquery.farbtastic']['version'] = '2.0';",
            "\t\t\t\t// To accurately replace library files, the order of files and the options",
            "\t\t\t\t// of each file have to be retained; e.g., like this:",
            "\t\t\t\t\\$$old_path = 'assets/vendor/farbtastic';",
            "\t\t\t\t// Since the replaced library files are no longer located in a directory",
            "\t\t\t\t// relative to the original extension, specify an absolute path (relative",
            "\t\t\t\t// to DRUPAL_ROOT / base_path()) to the new location.",
            "\t\t\t\t\\$$new_path = '/' . drupal_get_path('module', 'farbtastic_update') . '/js';",
            "\t\t\t\t\\$$new_js = [];",
            "\t\t\t\t\\$$replacements = [",
            "\t\t\t\t\t\\$$old_path . '/farbtastic.js' => \\$$new_path . '/farbtastic-2.0.js',",
            "\t\t\t\t];",
            "\t\t\t\tforeach (\\$$libraries['jquery.farbtastic']['js'] as \\$$source => \\$$options) {",
            "\t\t\t\t\tif (isset(\\$$replacements[\\$$source])) {",
            "\t\t\t\t\t\t\\$$new_js[\\$$replacements[\\$$source]] = \\$$options;",
            "\t\t\t\t\t}",
            "\t\t\t\t\telse {",
            "\t\t\t\t\t\t\\$$new_js[\\$$source] = \\$$options;",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t\t\\$$libraries['jquery.farbtastic']['js'] = \\$$new_js;",
            "\t\t\t}",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter libraries provided by an extension.",
        "prefix": "hook_library_info_alter",
        "scope": "php"
    },
    "hook_library_info_build": {
        "body": [
            "/**",
            "* Implements hook_library_info_build().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_library_info_build() {",
            "",
            "\t/*",
            "\t\t\\$$libraries = [];",
            "\t\t// Add a library whose information changes depending on certain conditions.",
            "\t\t\\$$libraries['mymodule.zombie'] = [",
            "\t\t\t'dependencies' => [",
            "\t\t\t\t'core/backbone',",
            "\t\t\t],",
            "\t\t];",
            "\t\tif (Drupal::moduleHandler()->moduleExists('minifyzombies')) {",
            "\t\t\t\\$$libraries['mymodule.zombie'] += [",
            "\t\t\t\t'js' => [",
            "\t\t\t\t\t'mymodule.zombie.min.js' => [],",
            "\t\t\t\t],",
            "\t\t\t\t'css' => [",
            "\t\t\t\t\t'base' => [",
            "\t\t\t\t\t\t'mymodule.zombie.min.css' => [],",
            "\t\t\t\t\t],",
            "\t\t\t\t],",
            "\t\t\t];",
            "\t\t}",
            "\t\telse {",
            "\t\t\t\\$$libraries['mymodule.zombie'] += [",
            "\t\t\t\t'js' => [",
            "\t\t\t\t\t'mymodule.zombie.js' => [],",
            "\t\t\t\t],",
            "\t\t\t\t'css' => [",
            "\t\t\t\t\t'base' => [",
            "\t\t\t\t\t\t'mymodule.zombie.css' => [],",
            "\t\t\t\t\t],",
            "\t\t\t\t],",
            "\t\t\t];",
            "\t\t}",
            "\t",
            "\t\t// Add a library only if a certain condition is met. If code wants to",
            "\t\t// integrate with this library it is safe to (try to) load it unconditionally",
            "\t\t// without reproducing this check. If the library definition does not exist",
            "\t\t// the library (of course) not be loaded but no notices or errors will be",
            "\t\t// triggered.",
            "\t\tif (Drupal::moduleHandler()->moduleExists('vampirize')) {",
            "\t\t\t\\$$libraries['mymodule.vampire'] = [",
            "\t\t\t\t'js' => [",
            "\t\t\t\t\t'js/vampire.js' => [],",
            "\t\t\t\t],",
            "\t\t\t\t'css' => [",
            "\t\t\t\t\t'base' => [",
            "\t\t\t\t\t\t'css/vampire.css',",
            "\t\t\t\t\t],",
            "\t\t\t\t],",
            "\t\t\t\t'dependencies' => [",
            "\t\t\t\t\t'core/jquery',",
            "\t\t\t\t],",
            "\t\t\t];",
            "\t\t}",
            "\t\treturn \\$$libraries;",
            "\t*/",
            "}"
        ],
        "description": "Add dynamic library definitions.",
        "prefix": "hook_library_info_build",
        "scope": "php"
    },
    "hook_link_alter": {
        "body": [
            "/**",
            "* Implements hook_link_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_link_alter(&\\$$variables) {",
            "",
            "\t/*",
            "\t\t// Add a warning to the end of route links to the admin section.",
            "\t\tif (isset(\\$$variables['route_name']) && strpos(\\$$variables['route_name'], 'admin') !== FALSE) {",
            "\t\t\t\\$$variables['text'] = t('@text (Warning!)', ['@text' => \\$$variables['text']]);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter the parameters for links.",
        "prefix": "hook_link_alter",
        "scope": "php"
    },
    "hook_local_tasks_alter": {
        "body": [
            "/**",
            "* Implements hook_local_tasks_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_local_tasks_alter(&\\$$local_tasks) {",
            "",
            "\t/*",
            "\t\t// Remove a specified local task plugin.",
            "\t\tunset(\\$$local_tasks['example_plugin_id']);",
            "\t*/",
            "}"
        ],
        "description": "Alter local tasks plugins.",
        "prefix": "hook_local_tasks_alter",
        "scope": "php"
    },
    "hook_locale_translation_projects_alter": {
        "body": [
            "/**",
            "* Implements hook_locale_translation_projects_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_locale_translation_projects_alter(&\\$$projects) {",
            "",
            "\t/*",
            "\t\t// The translations are located at a custom translation sever.",
            "\t\t\\$$projects['existing_project'] = [",
            "\t\t\t'info' => [",
            "\t\t\t\t'interface translation server pattern' => 'http://example.com/files/translations/%core/%project/%project-%version.%language.po',",
            "\t\t\t],",
            "\t\t];",
            "\t*/",
            "}"
        ],
        "description": "Alter the list of projects to be updated by locale's interface translation.",
        "prefix": "hook_locale_translation_projects_alter",
        "scope": "php"
    },
    "hook_mail": {
        "body": [
            "/**",
            "* Implements hook_mail().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_mail(\\$$key, &\\$$message, \\$$params) {",
            "",
            "\t/*",
            "\t\t\\$$account = \\$$params['account'];",
            "\t\t\\$$context = \\$$params['context'];",
            "\t\t\\$$variables = [",
            "\t\t\t'%site_name' => \\Drupal::config('system.site')->get('name'),",
            "\t\t\t'%username' => \\$$account->getDisplayName(),",
            "\t\t];",
            "\t\tif (\\$$context['hook'] == 'taxonomy') {",
            "\t\t\t\\$$entity = \\$$params['entity'];",
            "\t\t\t\\$$vocabulary = Vocabulary::load(\\$$entity->id());",
            "\t\t\t\\$$variables += [",
            "\t\t\t\t'%term_name' => \\$$entity->name,",
            "\t\t\t\t'%term_description' => \\$$entity->description,",
            "\t\t\t\t'%term_id' => \\$$entity->id(),",
            "\t\t\t\t'%vocabulary_name' => \\$$vocabulary->label(),",
            "\t\t\t\t'%vocabulary_description' => \\$$vocabulary->getDescription(),",
            "\t\t\t\t'%vocabulary_id' => \\$$vocabulary->id(),",
            "\t\t\t];",
            "\t\t}",
            "\t",
            "\t\t// Node-based variable translation is only available if we have a node.",
            "\t\tif (isset(\\$$params['node'])) {",
            "\t\t\t// @var \\Drupal\\node\\NodeInterface \\$$node ",
            "\t\t\t\\$$node = \\$$params['node'];",
            "\t\t\t\\$$variables += [",
            "\t\t\t\t'%uid' => \\$$node->getOwnerId(),",
            "\t\t\t\t'%url' => \\$$node->url('canonical', ['absolute' => TRUE]),",
            "\t\t\t\t'%node_type' => node_get_type_label(\\$$node),",
            "\t\t\t\t'%title' => \\$$node->getTitle(),",
            "\t\t\t\t'%teaser' => \\$$node->teaser,",
            "\t\t\t\t'%body' => \\$$node->body,",
            "\t\t\t];",
            "\t\t}",
            "\t\t\\$$subject = strtr(\\$$context['subject'], \\$$variables);",
            "\t\t\\$$body = strtr(\\$$context['message'], \\$$variables);",
            "\t\t\\$$message['subject'] .= str_replace([\"\\r\", \"\\n\"], '', \\$$subject);",
            "\t\t\\$$message['body'][] = MailFormatHelper::htmlToText(\\$$body);",
            "\t*/",
            "}"
        ],
        "description": "Prepares a message based on parameters;",
        "prefix": "hook_mail",
        "scope": "php"
    },
    "hook_mail_alter": {
        "body": [
            "/**",
            "* Implements hook_mail_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_mail_alter(&\\$$message) {",
            "",
            "\t/*",
            "\t\tif (\\$$message['id'] == 'modulename_messagekey') {",
            "\t\t\tif (!example_notifications_optin(\\$$message['to'], \\$$message['id'])) {",
            "\t\t\t\t// If the recipient has opted to not receive such messages, cancel",
            "\t\t\t\t// sending.",
            "\t\t\t\t\\$$message['send'] = FALSE;",
            "\t\t\t\treturn;",
            "\t\t\t}",
            "\t\t\t\\$$message['body'][] = \"--\\nMail sent out from \" . \\Drupal::config('system.site')->get('name');",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter an email message created with MailManagerInterface->mail().",
        "prefix": "hook_mail_alter",
        "scope": "php"
    },
    "hook_mail_backend_info_alter": {
        "body": [
            "/**",
            "* Implements hook_mail_backend_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_mail_backend_info_alter(&\\$$info) {",
            "",
            "\t/*",
            "\t\tunset(\\$$info['test_mail_collector']);",
            "\t*/",
            "}"
        ],
        "description": "Alter the list of mail backend plugin definitions.",
        "prefix": "hook_mail_backend_info_alter",
        "scope": "php"
    },
    "hook_media_source_info_alter": {
        "body": [
            "/**",
            "* Implements hook_media_source_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_media_source_info_alter(array &\\$$sources) {",
            "",
            "\t/*",
            "\t\t\\$$sources['youtube']['label'] = t('Youtube rocks!');",
            "\t*/",
            "}"
        ],
        "description": "Alters the information provided in \\Drupal\\media\\Annotation\\MediaSource.",
        "prefix": "hook_media_source_info_alter",
        "scope": "php"
    },
    "hook_menu_links_discovered_alter": {
        "body": [
            "/**",
            "* Implements hook_menu_links_discovered_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_menu_links_discovered_alter(&\\$$links) {",
            "",
            "\t/*",
            "\t\t// Change the weight and title of the user.logout link.",
            "\t\t\\$$links['user.logout']['weight'] = -10;",
            "\t\t\\$$links['user.logout']['title'] = new \\Drupal\\Core\\StringTranslation\\TranslatableMarkup('Logout');",
            "\t\t// Conditionally add an additional link with a title that's not translated.",
            "\t\tif (\\Drupal::moduleHandler()->moduleExists('search')) {",
            "\t\t\t\\$$links['menu.api.search'] = [",
            "\t\t\t\t'title' => \\Drupal::config('system.site')->get('name'),",
            "\t\t\t\t'route_name' => 'menu.api.search',",
            "\t\t\t\t'description' => new \\Drupal\\Core\\StringTranslation\\TranslatableMarkup('View popular search phrases for this site.'),",
            "\t\t\t\t'parent' => 'system.admin_reports',",
            "\t\t\t];",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alters all the menu links discovered by the menu link plugin manager.",
        "prefix": "hook_menu_links_discovered_alter",
        "scope": "php"
    },
    "hook_menu_local_actions_alter": {
        "body": [
            "/**",
            "* Implements hook_menu_local_actions_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_menu_local_actions_alter(&\\$$local_actions) {",
            "",
            "\t/*",
            "\t*/",
            "}"
        ],
        "description": "Alter local actions plugins.",
        "prefix": "hook_menu_local_actions_alter",
        "scope": "php"
    },
    "hook_menu_local_tasks_alter": {
        "body": [
            "/**",
            "* Implements hook_menu_local_tasks_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_menu_local_tasks_alter(&\\$$data, \\$$route_name, \\Drupal\\Core\\Cache\\RefinableCacheableDependencyInterface &\\$$cacheability) {",
            "",
            "\t/*",
            "\t",
            "\t\t// Add a tab linking to node/add to all pages.",
            "\t\t\\$$data['tabs'][0]['node.add_page'] = [",
            "\t\t\t\t'#theme' => 'menu_local_task',",
            "\t\t\t\t'#link' => [",
            "\t\t\t\t\t\t'title' => t('Example tab'),",
            "\t\t\t\t\t\t'url' => Url::fromRoute('node.add_page'),",
            "\t\t\t\t\t\t'localized_options' => [",
            "\t\t\t\t\t\t\t\t'attributes' => [",
            "\t\t\t\t\t\t\t\t\t\t'title' => t('Add content'),",
            "\t\t\t\t\t\t\t\t],",
            "\t\t\t\t\t\t],",
            "\t\t\t\t],",
            "\t\t];",
            "\t\t// The tab we're adding is dependent on a user's access to add content.",
            "\t\t\\$$cacheability->addCacheTags(['user.permissions']);",
            "\t*/",
            "}"
        ],
        "description": "Alter local tasks displayed on the page before they are rendered.",
        "prefix": "hook_menu_local_tasks_alter",
        "scope": "php"
    },
    "hook_migrate_MIGRATION_ID_prepare_row": {
        "body": [
            "/**",
            "* Implements hook_migrate_MIGRATION_ID_prepare_row().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_migrate_${MIGRATION_ID}_prepare_row(Row \\$$row, MigrateSourceInterface \\$$source, MigrationInterface \\$$migration) {",
            "",
            "\t/*",
            "\t\t\\$$value = \\$$source->getDatabase()->query('SELECT value FROM {variable} WHERE name = :name', [':name' => 'mymodule_filter_foo_' . \\$$row->getSourceProperty('format')])->fetchField();",
            "\t\tif (\\$$value) {",
            "\t\t\t\\$$row->setSourceProperty('settings:mymodule:foo', unserialize(\\$$value));",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Allows adding data to a row for a migration with the specified ID.",
        "prefix": "hook_migrate_MIGRATION_ID_prepare_row",
        "scope": "php"
    },
    "hook_migrate_prepare_row": {
        "body": [
            "/**",
            "* Implements hook_migrate_prepare_row().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_migrate_prepare_row(Row \\$$row, MigrateSourceInterface \\$$source, MigrationInterface \\$$migration) {",
            "",
            "\t/*",
            "\t\tif (\\$$migration->id() == 'd6_filter_formats') {",
            "\t\t\t\\$$value = \\$$source->getDatabase()->query('SELECT value FROM {variable} WHERE name = :name', [':name' => 'mymodule_filter_foo_' . \\$$row->getSourceProperty('format')])->fetchField();",
            "\t\t\tif (\\$$value) {",
            "\t\t\t\t\\$$row->setSourceProperty('settings:mymodule:foo', unserialize(\\$$value));",
            "\t\t\t}",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Allows adding data to a row before processing it.",
        "prefix": "hook_migrate_prepare_row",
        "scope": "php"
    },
    "hook_migration_plugins_alter": {
        "body": [
            "/**",
            "* Implements hook_migration_plugins_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_migration_plugins_alter(array &\\$$migrations) {",
            "",
            "\t/*",
            "\t\t\\$$migrations = array_filter(\\$$migrations, function (array \\$$migration) {",
            "\t\t\t\\$$tags = isset(\\$$migration['migration_tags']) ? (array) \\$$migration['migration_tags'] : [];",
            "\t\t\treturn !in_array('Drupal 6', \\$$tags);",
            "\t\t});",
            "\t*/",
            "}"
        ],
        "description": "Allows altering the list of discovered migration plugins.",
        "prefix": "hook_migration_plugins_alter",
        "scope": "php"
    },
    "hook_module_implements_alter": {
        "body": [
            "/**",
            "* Implements hook_module_implements_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_module_implements_alter(&\\$$implementations, \\$$hook) {",
            "",
            "\t/*",
            "\t\tif (\\$$hook == 'form_alter') {",
            "\t\t\t// Move my_module_form_alter() to the end of the list.",
            "\t\t\t// \\Drupal::moduleHandler()->getImplementations()",
            "\t\t\t// iterates through \\$$implementations with a foreach loop which PHP iterates",
            "\t\t\t// in the order that the items were added, so to move an item to the end of",
            "\t\t\t// the array, we remove it and then add it.",
            "\t\t\t\\$$group = \\$$implementations['my_module'];",
            "\t\t\tunset(\\$$implementations['my_module']);",
            "\t\t\t\\$$implementations['my_module'] = \\$$group;",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter the registry of modules implementing a hook.",
        "prefix": "hook_module_implements_alter",
        "scope": "php"
    },
    "hook_module_preinstall": {
        "body": [
            "/**",
            "* Implements hook_module_preinstall().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_module_preinstall(\\$$module) {",
            "",
            "\t/*",
            "\t\tmymodule_cache_clear();",
            "\t*/",
            "}"
        ],
        "description": "Perform necessary actions before a module is installed.",
        "prefix": "hook_module_preinstall",
        "scope": "php"
    },
    "hook_module_preuninstall": {
        "body": [
            "/**",
            "* Implements hook_module_preuninstall().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_module_preuninstall(\\$$module) {",
            "",
            "\t/*",
            "\t\tmymodule_cache_clear();",
            "\t*/",
            "}"
        ],
        "description": "Perform necessary actions before a module is uninstalled.",
        "prefix": "hook_module_preuninstall",
        "scope": "php"
    },
    "hook_modules_installed": {
        "body": [
            "/**",
            "* Implements hook_modules_installed().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_modules_installed(\\$$modules) {",
            "",
            "\t/*",
            "\t\tif (in_array('lousy_module', \\$$modules)) {",
            "\t\t\t\\Drupal::state()->set('mymodule.lousy_module_compatibility', TRUE);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Perform necessary actions after modules are installed.",
        "prefix": "hook_modules_installed",
        "scope": "php"
    },
    "hook_modules_uninstalled": {
        "body": [
            "/**",
            "* Implements hook_modules_uninstalled().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_modules_uninstalled(\\$$modules) {",
            "",
            "\t/*",
            "\t\tif (in_array('lousy_module', \\$$modules)) {",
            "\t\t\t\\Drupal::state()->delete('mymodule.lousy_module_compatibility');",
            "\t\t}",
            "\t\tmymodule_cache_rebuild();",
            "\t*/",
            "}"
        ],
        "description": "Perform necessary actions after modules are uninstalled.",
        "prefix": "hook_modules_uninstalled",
        "scope": "php"
    },
    "hook_node_access": {
        "body": [
            "/**",
            "* Implements hook_node_access().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_node_access(\\Drupal\\node\\NodeInterface \\$$node, \\$$op, \\Drupal\\Core\\Session\\AccountInterface \\$$account) {",
            "",
            "\t/*",
            "\t\t\\$$type = \\$$node->bundle();",
            "\t",
            "\t\tswitch (\\$$op) {",
            "\t\t\tcase 'create':",
            "\t\t\t\treturn AccessResult::allowedIfHasPermission(\\$$account, 'create ' . \\$$type . ' content');",
            "\t",
            "\t\t\tcase 'update':",
            "\t\t\t\tif (\\$$account->hasPermission('edit any ' . \\$$type . ' content')) {",
            "\t\t\t\t\treturn AccessResult::allowed()->cachePerPermissions();",
            "\t\t\t\t}",
            "\t\t\t\telse {",
            "\t\t\t\t\treturn AccessResult::allowedIf(\\$$account->hasPermission('edit own ' . \\$$type . ' content') && (\\$$account->id() == \\$$node->getOwnerId()))->cachePerPermissions()->cachePerUser()->addCacheableDependency(\\$$node);",
            "\t\t\t\t}",
            "\t",
            "\t\t\tcase 'delete':",
            "\t\t\t\tif (\\$$account->hasPermission('delete any ' . \\$$type . ' content')) {",
            "\t\t\t\t\treturn AccessResult::allowed()->cachePerPermissions();",
            "\t\t\t\t}",
            "\t\t\t\telse {",
            "\t\t\t\t\treturn AccessResult::allowedIf(\\$$account->hasPermission('delete own ' . \\$$type . ' content') && (\\$$account->id() == \\$$node->getOwnerId()))->cachePerPermissions()->cachePerUser()->addCacheableDependency(\\$$node);",
            "\t\t\t\t}",
            "\t",
            "\t\t\tdefault:",
            "\t\t\t\t// No opinion.",
            "\t\t\t\treturn AccessResult::neutral();",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Controls access to a node.",
        "prefix": "hook_node_access",
        "scope": "php"
    },
    "hook_node_access_records": {
        "body": [
            "/**",
            "* Implements hook_node_access_records().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_node_access_records(\\Drupal\\node\\NodeInterface \\$$node) {",
            "",
            "\t/*",
            "\t\t// We only care about the node if it has been marked private. If not, it is",
            "\t\t// treated just like any other node and we completely ignore it.",
            "\t\tif (\\$$node->private->value) {",
            "\t\t\t\\$$grants = [];",
            "\t\t\t// Only published Catalan translations of private nodes should be viewable",
            "\t\t\t// to all users. If we fail to check \\$$node->isPublished(), all users would be able",
            "\t\t\t// to view an unpublished node.",
            "\t\t\tif (\\$$node->isPublished()) {",
            "\t\t\t\t\\$$grants[] = [",
            "\t\t\t\t\t'realm' => 'example',",
            "\t\t\t\t\t'gid' => 1,",
            "\t\t\t\t\t'grant_view' => 1,",
            "\t\t\t\t\t'grant_update' => 0,",
            "\t\t\t\t\t'grant_delete' => 0,",
            "\t\t\t\t\t'langcode' => 'ca',",
            "\t\t\t\t];",
            "\t\t\t}",
            "\t\t\t// For the example_author array, the GID is equivalent to a UID, which",
            "\t\t\t// means there are many groups of just 1 user.",
            "\t\t\t// Note that an author can always view his or her nodes, even if they",
            "\t\t\t// have status unpublished.",
            "\t\t\tif (\\$$node->getOwnerId()) {",
            "\t\t\t\t\\$$grants[] = [",
            "\t\t\t\t\t'realm' => 'example_author',",
            "\t\t\t\t\t'gid' => \\$$node->getOwnerId(),",
            "\t\t\t\t\t'grant_view' => 1,",
            "\t\t\t\t\t'grant_update' => 1,",
            "\t\t\t\t\t'grant_delete' => 1,",
            "\t\t\t\t\t'langcode' => 'ca',",
            "\t\t\t\t];",
            "\t\t\t}",
            "\t",
            "\t\t\treturn \\$$grants;",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Set permissions for a node to be written to the database.",
        "prefix": "hook_node_access_records",
        "scope": "php"
    },
    "hook_node_access_records_alter": {
        "body": [
            "/**",
            "* Implements hook_node_access_records_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_node_access_records_alter(&\\$$grants, Drupal\\node\\NodeInterface \\$$node) {",
            "",
            "\t/*",
            "\t\t// Our module allows editors to mark specific articles with the 'is_preview'",
            "\t\t// field. If the node being saved has a TRUE value for that field, then only",
            "\t\t// our grants are retained, and other grants are removed. Doing so ensures",
            "\t\t// that our rules are enforced no matter what priority other grants are given.",
            "\t\tif (\\$$node->is_preview) {",
            "\t\t\t// Our module grants are set in \\$$grants['example'].",
            "\t\t\t\\$$temp = \\$$grants['example'];",
            "\t\t\t// Now remove all module grants but our own.",
            "\t\t\t\\$$grants = ['example' => \\$$temp];",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter permissions for a node before it is written to the database.",
        "prefix": "hook_node_access_records_alter",
        "scope": "php"
    },
    "hook_node_grants": {
        "body": [
            "/**",
            "* Implements hook_node_grants().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_node_grants(\\Drupal\\Core\\Session\\AccountInterface \\$$account, \\$$op) {",
            "",
            "\t/*",
            "\t\tif (\\$$account->hasPermission('access private content')) {",
            "\t\t\t\\$$grants['example'] = [1];",
            "\t\t}",
            "\t\tif (\\$$account->id()) {",
            "\t\t\t\\$$grants['example_author'] = [\\$$account->id()];",
            "\t\t}",
            "\t\treturn \\$$grants;",
            "\t*/",
            "}"
        ],
        "description": "Inform the node access system what permissions the user has.",
        "prefix": "hook_node_grants",
        "scope": "php"
    },
    "hook_node_grants_alter": {
        "body": [
            "/**",
            "* Implements hook_node_grants_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_node_grants_alter(&\\$$grants, \\Drupal\\Core\\Session\\AccountInterface \\$$account, \\$$op) {",
            "",
            "\t/*",
            "\t\t// Our sample module never allows certain roles to edit or delete",
            "\t\t// content. Since some other node access modules might allow this",
            "\t\t// permission, we expressly remove it by returning an empty \\$$grants",
            "\t\t// array for roles specified in our variable setting.",
            "\t",
            "\t\t// Get our list of banned roles.",
            "\t\t\\$$restricted = \\Drupal::config('example.settings')->get('restricted_roles');",
            "\t",
            "\t\tif (\\$$op != 'view' && !empty(\\$$restricted)) {",
            "\t\t\t// Now check the roles for this account against the restrictions.",
            "\t\t\tforeach (\\$$account->getRoles() as \\$$rid) {",
            "\t\t\t\tif (in_array(\\$$rid, \\$$restricted)) {",
            "\t\t\t\t\t\\$$grants = [];",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter user access rules when trying to view, edit or delete a node.",
        "prefix": "hook_node_grants_alter",
        "scope": "php"
    },
    "hook_node_links_alter": {
        "body": [
            "/**",
            "* Implements hook_node_links_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_node_links_alter(array &\\$$links, NodeInterface \\$$entity, array &\\$$context) {",
            "",
            "\t/*",
            "\t\t\\$$links['mymodule'] = [",
            "\t\t\t'#theme' => 'links__node__mymodule',",
            "\t\t\t'#attributes' => ['class' => ['links', 'inline']],",
            "\t\t\t'#links' => [",
            "\t\t\t\t'node-report' => [",
            "\t\t\t\t\t'title' => t('Report'),",
            "\t\t\t\t\t'url' => Url::fromRoute('node_test.report', ['node' => \\$$entity->id()], ['query' => ['token' => \\Drupal::getContainer()->get('csrf_token')->get(\"node/{\\$$entity->id()}/report\")]]),",
            "\t\t\t\t],",
            "\t\t\t],",
            "\t\t];",
            "\t*/",
            "}"
        ],
        "description": "Alter the links of a node.",
        "prefix": "hook_node_links_alter",
        "scope": "php"
    },
    "hook_node_search_result": {
        "body": [
            "/**",
            "* Implements hook_node_search_result().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_node_search_result(\\Drupal\\node\\NodeInterface \\$$node) {",
            "",
            "\t/*",
            "\t\t\\$$rating = db_query('SELECT SUM(points) FROM {my_rating} WHERE nid = :nid', ['nid' => \\$$node->id()])->fetchField();",
            "\t\treturn ['rating' => \\Drupal::translation()->formatPlural(\\$$rating, '1 point', '@count points')];",
            "\t*/",
            "}"
        ],
        "description": "Act on a node being displayed as a search result.",
        "prefix": "hook_node_search_result",
        "scope": "php"
    },
    "hook_node_update_index": {
        "body": [
            "/**",
            "* Implements hook_node_update_index().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_node_update_index(\\Drupal\\node\\NodeInterface \\$$node) {",
            "",
            "\t/*",
            "\t\t\\$$text = '';",
            "\t\t\\$$ratings = db_query('SELECT title, description FROM {my_ratings} WHERE nid = :nid', [':nid' => \\$$node->id()]);",
            "\t\tforeach (\\$$ratings as \\$$rating) {",
            "\t\t\t\\$$text .= '<h2>' . Html::escape(\\$$rating->title) . '</h2>' . Xss::filter(\\$$rating->description);",
            "\t\t}",
            "\t\treturn \\$$text;",
            "\t*/",
            "}"
        ],
        "description": "Act on a node being indexed for searching.",
        "prefix": "hook_node_update_index",
        "scope": "php"
    },
    "hook_oembed_resource_url_alter": {
        "body": [
            "/**",
            "* Implements hook_oembed_resource_url_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_oembed_resource_url_alter(array &\\$$parsed_url, \\Drupal\\media\\OEmbed\\Provider \\$$provider) {",
            "",
            "\t/*",
            "\t\t// Always serve YouTube videos from youtube-nocookie.com.",
            "\t\tif (\\$$provider->getName() === 'YouTube') {",
            "\t\t\t\\$$parsed_url['path'] = str_replace('://youtube.com/', '://youtube-nocookie.com/', \\$$parsed_url['path']);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alters an oEmbed resource URL before it is fetched.",
        "prefix": "hook_oembed_resource_url_alter",
        "scope": "php"
    },
    "hook_options_list_alter": {
        "body": [
            "/**",
            "* Implements hook_options_list_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_options_list_alter(array &\\$$options, array \\$$context) {",
            "",
            "\t/*",
            "\t\t// Check if this is the field we want to change.",
            "\t\tif (\\$$context['fieldDefinition']->id() == 'field_option') {",
            "\t\t\t// Change the label of the empty option.",
            "\t\t\t\\$$options['_none'] = t('== Empty ==');",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alters the list of options to be displayed for a field.",
        "prefix": "hook_options_list_alter",
        "scope": "php"
    },
    "hook_page_attachments": {
        "body": [
            "/**",
            "* Implements hook_page_attachments().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_page_attachments(array &\\$$attachments) {",
            "",
            "\t/*",
            "\t\t// Unconditionally attach an asset to the page.",
            "\t\t\\$$attachments['#attached']['library'][] = 'core/domready';",
            "\t",
            "\t\t// Conditionally attach an asset to the page.",
            "\t\tif (!\\Drupal::currentUser()->hasPermission('may pet kittens')) {",
            "\t\t\t\\$$attachments['#attached']['library'][] = 'core/jquery';",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Add attachments (typically assets) to a page before it is rendered.",
        "prefix": "hook_page_attachments",
        "scope": "php"
    },
    "hook_page_attachments_alter": {
        "body": [
            "/**",
            "* Implements hook_page_attachments_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_page_attachments_alter(array &\\$$attachments) {",
            "",
            "\t/*",
            "\t\t// Conditionally remove an asset.",
            "\t\tif (in_array('core/jquery', \\$$attachments['#attached']['library'])) {",
            "\t\t\t\\$$index = array_search('core/jquery', \\$$attachments['#attached']['library']);",
            "\t\t\tunset(\\$$attachments['#attached']['library'][\\$$index]);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter attachments (typically assets) to a page before it is rendered.",
        "prefix": "hook_page_attachments_alter",
        "scope": "php"
    },
    "hook_page_bottom": {
        "body": [
            "/**",
            "* Implements hook_page_bottom().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_page_bottom(array &\\$$page_bottom) {",
            "",
            "\t/*",
            "\t\t\\$$page_bottom['mymodule'] = ['#markup' => 'This is the bottom.'];",
            "\t*/",
            "}"
        ],
        "description": "Add a renderable array to the bottom of the page.",
        "prefix": "hook_page_bottom",
        "scope": "php"
    },
    "hook_page_top": {
        "body": [
            "/**",
            "* Implements hook_page_top().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_page_top(array &\\$$page_top) {",
            "",
            "\t/*",
            "\t\t\\$$page_top['mymodule'] = ['#markup' => 'This is the top.'];",
            "\t*/",
            "}"
        ],
        "description": "Add a renderable array to the top of the page.",
        "prefix": "hook_page_top",
        "scope": "php"
    },
    "hook_path_delete": {
        "body": [
            "/**",
            "* Implements hook_path_delete().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_path_delete(\\$$path) {",
            "",
            "\t/*",
            "\t\tdb_delete('mytable')",
            "\t\t\t->condition('pid', \\$$path['pid'])",
            "\t\t\t->execute();",
            "\t*/",
            "}"
        ],
        "description": "Respond to a path being deleted.",
        "prefix": "hook_path_delete",
        "scope": "php"
    },
    "hook_path_insert": {
        "body": [
            "/**",
            "* Implements hook_path_insert().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_path_insert(\\$$path) {",
            "",
            "\t/*",
            "\t\tdb_insert('mytable')",
            "\t\t\t->fields([",
            "\t\t\t\t'alias' => \\$$path['alias'],",
            "\t\t\t\t'pid' => \\$$path['pid'],",
            "\t\t\t])",
            "\t\t\t->execute();",
            "\t*/",
            "}"
        ],
        "description": "Respond to a path being inserted.",
        "prefix": "hook_path_insert",
        "scope": "php"
    },
    "hook_path_update": {
        "body": [
            "/**",
            "* Implements hook_path_update().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_path_update(\\$$path) {",
            "",
            "\t/*",
            "\t\tif (\\$$path['alias'] != \\$$path['original']['alias']) {",
            "\t\t\tdb_update('mytable')",
            "\t\t\t\t->fields(['alias' => \\$$path['alias']])",
            "\t\t\t\t->condition('pid', \\$$path['pid'])",
            "\t\t\t\t->execute();",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Respond to a path being updated.",
        "prefix": "hook_path_update",
        "scope": "php"
    },
    "hook_plugin_filter_TYPE__CONSUMER_alter": {
        "body": [
            "/**",
            "* Implements hook_plugin_filter_TYPE__CONSUMER_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_plugin_filter_${TYPE__CONSUMER}_alter(array &\\$$definitions, array \\$$extra) {",
            "",
            "\t/*",
            "\t\t// Explicitly remove the \"Help\" block for this consumer.",
            "\t\tunset(\\$$definitions['help_block']);",
            "\t*/",
            "}"
        ],
        "description": "Alter the filtering of plugin definitions for a specific type and consumer.",
        "prefix": "hook_plugin_filter_TYPE__CONSUMER_alter",
        "scope": "php"
    },
    "hook_plugin_filter_TYPE_alter": {
        "body": [
            "/**",
            "* Implements hook_plugin_filter_TYPE_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_plugin_filter_TYPE_alter(array &\\$$definitions, array \\$$extra, \\$$consumer) {",
            "",
            "\t/*",
            "\t\t// Remove the \"Help\" block from the Block UI list.",
            "\t\tif (\\$$consumer == 'block_ui') {",
            "\t\t\tunset(\\$$definitions['help_block']);",
            "\t\t}",
            "\t",
            "\t\t// If the theme is specified, remove the branding block from the Bartik theme.",
            "\t\tif (isset(\\$$extra['theme']) && \\$$extra['theme'] === 'bartik') {",
            "\t\t\tunset(\\$$definitions['system_branding_block']);",
            "\t\t}",
            "\t",
            "\t\t// Remove the \"Main page content\" block from everywhere.",
            "\t\tunset(\\$$definitions['system_main_block']);",
            "\t*/",
            "}"
        ],
        "description": "Alter the filtering of plugin definitions for a specific plugin type.",
        "prefix": "hook_plugin_filter_TYPE_alter",
        "scope": "php"
    },
    "hook_post_update_NAME": {
        "body": [
            "/**",
            "* Implements hook_post_update_NAME().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_post_update_NAME(&\\$$sandbox) {",
            "",
            "\t/*",
            "\t\t// Example of updating some content.",
            "\t\t\\$$node = \\Drupal\\node\\Entity\\Node::load(123);",
            "\t\t\\$$node->setTitle('foo');",
            "\t\t\\$$node->save();",
            "\t",
            "\t\t\\$$result = t('Node %nid saved', ['%nid' => \\$$node->id()]);",
            "\t",
            "\t\t// Example of disabling blocks with missing condition contexts. Note: The",
            "\t\t// block itself is in a state which is valid at that point.",
            "\t\t// @see block_update_8001()",
            "\t\t// @see block_post_update_disable_blocks_with_missing_contexts()",
            "\t\t\\$$block_update_8001 = \\Drupal::keyValue('update_backup')->get('block_update_8001', []);",
            "\t",
            "\t\t\\$$block_ids = array_keys(\\$$block_update_8001);",
            "\t\t\\$$block_storage = \\Drupal::entityManager()->getStorage('block');",
            "\t\t\\$$blocks = \\$$block_storage->loadMultiple(\\$$block_ids);",
            "\t\t// @var \\$$blocks \\Drupal\\block\\BlockInterface[] ",
            "\t\tforeach (\\$$blocks as \\$$block) {",
            "\t\t\t// This block has had conditions removed due to an inability to resolve",
            "\t\t\t// contexts in block_update_8001() so disable it.",
            "\t",
            "\t\t\t// Disable currently enabled blocks.",
            "\t\t\tif (\\$$block_update_8001[\\$$block->id()]['status']) {",
            "\t\t\t\t\\$$block->setStatus(FALSE);",
            "\t\t\t\t\\$$block->save();",
            "\t\t\t}",
            "\t\t}",
            "\t",
            "\t\treturn \\$$result;",
            "\t*/",
            "}"
        ],
        "description": "Executes an update which is intended to update data, like entities.",
        "prefix": "hook_post_update_NAME",
        "scope": "php"
    },
    "hook_preprocess": {
        "body": [
            "/**",
            "* Implements hook_preprocess().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_preprocess(&\\$$variables, \\$$hook) {",
            "",
            "\t/*",
            "\t\tstatic \\$$hooks;",
            "\t",
            "\t\t// Add contextual links to the variables, if the user has permission.",
            "\t",
            "\t\tif (!\\Drupal::currentUser()->hasPermission('access contextual links')) {",
            "\t\t\treturn;",
            "\t\t}",
            "\t",
            "\t\tif (!isset(\\$$hooks)) {",
            "\t\t\t\\$$hooks = theme_get_registry();",
            "\t\t}",
            "\t",
            "\t\t// Determine the primary theme function argument.",
            "\t\tif (isset(\\$$hooks[\\$$hook]['variables'])) {",
            "\t\t\t\\$$keys = array_keys(\\$$hooks[\\$$hook]['variables']);",
            "\t\t\t\\$$key = \\$$keys[0];",
            "\t\t}",
            "\t\telse {",
            "\t\t\t\\$$key = \\$$hooks[\\$$hook]['render element'];",
            "\t\t}",
            "\t",
            "\t\tif (isset(\\$$variables[\\$$key])) {",
            "\t\t\t\\$$element = \\$$variables[\\$$key];",
            "\t\t}",
            "\t",
            "\t\tif (isset(\\$$element) && is_array(\\$$element) && !empty(\\$$element['#contextual_links'])) {",
            "\t\t\t\\$$variables['title_suffix']['contextual_links'] = contextual_links_view(\\$$element);",
            "\t\t\tif (!empty(\\$$variables['title_suffix']['contextual_links'])) {",
            "\t\t\t\t\\$$variables['attributes']['class'][] = 'contextual-links-region';",
            "\t\t\t}",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Preprocess theme variables for templates.",
        "prefix": "hook_preprocess",
        "scope": "php"
    },
    "hook_preprocess_HOOK": {
        "body": [
            "/**",
            "* Implements hook_preprocess_HOOK().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_preprocess_HOOK(&\\$$variables) {",
            "",
            "\t/*",
            "\t\t// This example is from rdf_preprocess_image(). It adds an RDF attribute",
            "\t\t// to the image hook's variables.",
            "\t\t\\$$variables['attributes']['typeof'] = ['foaf:Image'];",
            "\t*/",
            "}"
        ],
        "description": "Preprocess theme variables for a specific theme hook.",
        "prefix": "hook_preprocess_HOOK",
        "scope": "php"
    },
    "hook_query_TAG_alter": {
        "body": [
            "/**",
            "* Implements hook_query_TAG_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_query_TAG_alter(Drupal\\Core\\Database\\Query\\AlterableInterface \\$$query) {",
            "",
            "\t/*",
            "\t\t// Skip the extra expensive alterations if site has no node access control modules.",
            "\t\tif (!node_access_view_all_nodes()) {",
            "\t\t\t// Prevent duplicates records.",
            "\t\t\t\\$$query->distinct();",
            "\t\t\t// The recognized operations are 'view', 'update', 'delete'.",
            "\t\t\tif (!\\$$op = \\$$query->getMetaData('op')) {",
            "\t\t\t\t\\$$op = 'view';",
            "\t\t\t}",
            "\t\t\t// Skip the extra joins and conditions for node admins.",
            "\t\t\tif (!\\Drupal::currentUser()->hasPermission('bypass node access')) {",
            "\t\t\t\t// The node_access table has the access grants for any given node.",
            "\t\t\t\t\\$$access_alias = \\$$query->join('node_access', 'na', '%alias.nid = n.nid');",
            "\t\t\t\t\\$$or = new Condition('OR');",
            "\t\t\t\t// If any grant exists for the specified user, then user has access to the node for the specified operation.",
            "\t\t\t\tforeach (node_access_grants(\\$$op, \\$$query->getMetaData('account')) as \\$$realm => \\$$gids) {",
            "\t\t\t\t\tforeach (\\$$gids as \\$$gid) {",
            "\t\t\t\t\t\t\\$$or->condition((new Condition('AND'))",
            "\t\t\t\t\t\t\t->condition(\\$$access_alias . '.gid', \\$$gid)",
            "\t\t\t\t\t\t\t->condition(\\$$access_alias . '.realm', \\$$realm)",
            "\t\t\t\t\t\t);",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t",
            "\t\t\t\tif (count(\\$$or->conditions())) {",
            "\t\t\t\t\t\\$$query->condition(\\$$or);",
            "\t\t\t\t}",
            "\t",
            "\t\t\t\t\\$$query->condition(\\$$access_alias . 'grant_' . \\$$op, 1, '>=');",
            "\t\t\t}",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Perform alterations to a structured query for a given tag.",
        "prefix": "hook_query_TAG_alter",
        "scope": "php"
    },
    "hook_query_alter": {
        "body": [
            "/**",
            "* Implements hook_query_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_query_alter(Drupal\\Core\\Database\\Query\\AlterableInterface \\$$query) {",
            "",
            "\t/*",
            "\t\tif (\\$$query->hasTag('micro_limit')) {",
            "\t\t\t\\$$query->range(0, 2);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Perform alterations to a structured query.",
        "prefix": "hook_query_alter",
        "scope": "php"
    },
    "hook_queue_info_alter": {
        "body": [
            "/**",
            "* Implements hook_queue_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_queue_info_alter(&\\$$queues) {",
            "",
            "\t/*",
            "\t\t// This site has many feeds so let's spend 90 seconds on each cron run",
            "\t\t// updating feeds instead of the default 60.",
            "\t\t\\$$queues['aggregator_feeds']['cron']['time'] = 90;",
            "\t*/",
            "}"
        ],
        "description": "Alter cron queue information before cron runs.",
        "prefix": "hook_queue_info_alter",
        "scope": "php"
    },
    "hook_quickedit_editor_alter": {
        "body": [
            "/**",
            "* Implements hook_quickedit_editor_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_quickedit_editor_alter(&\\$$editors) {",
            "",
            "\t/*",
            "\t\t// Cleanly override editor.module's in-place editor plugin.",
            "\t\t\\$$editors['editor']['class'] = 'Drupal\\advanced_editor\\Plugin\\quickedit\\editor\\AdvancedEditor';",
            "\t*/",
            "}"
        ],
        "description": "Allow modules to alter in-place editor plugin metadata.",
        "prefix": "hook_quickedit_editor_alter",
        "scope": "php"
    },
    "hook_quickedit_render_field": {
        "body": [
            "/**",
            "* Implements hook_quickedit_render_field().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_quickedit_render_field(Drupal\\Core\\Entity\\EntityInterface \\$$entity, \\$$field_name, \\$$view_mode_id, \\$$langcode) {",
            "",
            "\t/*",
            "\t\treturn [",
            "\t\t\t'#prefix' => '<div class=\"example-markup\">',",
            "\t\t\t'field' => \\$$entity->getTranslation(\\$$langcode)->get(\\$$field_name)->view(\\$$view_mode_id),",
            "\t\t\t'#suffix' => '</div>',",
            "\t\t];",
            "\t*/",
            "}"
        ],
        "description": "Returns a renderable array for the value of a single field in an entity.",
        "prefix": "hook_quickedit_render_field",
        "scope": "php"
    },
    "hook_ranking": {
        "body": [
            "/**",
            "* Implements hook_ranking().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_ranking() {",
            "",
            "\t/*",
            "\t\t// If voting is disabled, we can avoid returning the array, no hard feelings.",
            "\t\tif (\\Drupal::config('vote.settings')->get('node_enabled')) {",
            "\t\t\treturn [",
            "\t\t\t\t'vote_average' => [",
            "\t\t\t\t\t'title' => t('Average vote'),",
            "\t\t\t\t\t// Note that we use i.sid, the search index's search item id, rather than",
            "\t\t\t\t\t// n.nid.",
            "\t\t\t\t\t'join' => [",
            "\t\t\t\t\t\t'type' => 'LEFT',",
            "\t\t\t\t\t\t'table' => 'vote_node_data',",
            "\t\t\t\t\t\t'alias' => 'vote_node_data',",
            "\t\t\t\t\t\t'on' => 'vote_node_data.nid = i.sid',",
            "\t\t\t\t\t],",
            "\t\t\t\t\t// The highest possible score should be 1, and the lowest possible score,",
            "\t\t\t\t\t// always 0, should be 0.",
            "\t\t\t\t\t'score' => 'vote_node_data.average / CAST(%f AS DECIMAL)',",
            "\t\t\t\t\t// Pass in the highest possible voting score as a decimal argument.",
            "\t\t\t\t\t'arguments' => [\\Drupal::config('vote.settings')->get('score_max')],",
            "\t\t\t\t],",
            "\t\t\t];",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Provide additional methods of scoring for core search results for nodes.",
        "prefix": "hook_ranking",
        "scope": "php"
    },
    "hook_rdf_namespaces": {
        "body": [
            "/**",
            "* Implements hook_rdf_namespaces().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_rdf_namespaces() {",
            "",
            "\t/*",
            "\t\treturn [",
            "\t\t\t'content'\t=> 'http://purl.org/rss/1.0/modules/content/',",
            "\t\t\t'dc'\t\t\t => 'http://purl.org/dc/terms/',",
            "\t\t\t'foaf'\t\t => 'http://xmlns.com/foaf/0.1/',",
            "\t\t\t'og'\t\t\t => 'http://ogp.me/ns#',",
            "\t\t\t'rdfs'\t\t => 'http://www.w3.org/2000/01/rdf-schema#',",
            "\t\t\t'sioc'\t\t => 'http://rdfs.org/sioc/ns#',",
            "\t\t\t'sioct'\t\t=> 'http://rdfs.org/sioc/types#',",
            "\t\t\t'skos'\t\t => 'http://www.w3.org/2004/02/skos/core#',",
            "\t\t\t'xsd'\t\t\t=> 'http://www.w3.org/2001/XMLSchema#',",
            "\t\t];",
            "\t*/",
            "}"
        ],
        "description": "Allow modules to define namespaces for RDF mappings.",
        "prefix": "hook_rdf_namespaces",
        "scope": "php"
    },
    "hook_rebuild": {
        "body": [
            "/**",
            "* Implements hook_rebuild().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_rebuild() {",
            "",
            "\t/*",
            "\t\t\\$$themes = \\Drupal::service('theme_handler')->listInfo();",
            "\t\tforeach (\\$$themes as \\$$theme) {",
            "\t\t\t_block_rehash(\\$$theme->getName());",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Rebuild data based upon refreshed caches.",
        "prefix": "hook_rebuild",
        "scope": "php"
    },
    "hook_render_template": {
        "body": [
            "/**",
            "* Implements hook_render_template().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_render_template(\\$$template_file, \\$$variables) {",
            "",
            "\t/*",
            "\t\t\\$$twig_service = \\Drupal::service('twig');",
            "\t",
            "\t\treturn \\$$twig_service->loadTemplate(\\$$template_file)->render(\\$$variables);",
            "\t*/",
            "}"
        ],
        "description": "Render a template using the theme engine.",
        "prefix": "hook_render_template",
        "scope": "php"
    },
    "hook_requirements": {
        "body": [
            "/**",
            "* Implements hook_requirements().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_requirements(\\$$phase) {",
            "",
            "\t/*",
            "\t\t\\$$requirements = [];",
            "\t",
            "\t\t// Report Drupal version",
            "\t\tif (\\$$phase == 'runtime') {",
            "\t\t\t\\$$requirements['drupal'] = [",
            "\t\t\t\t'title' => t('Drupal'),",
            "\t\t\t\t'value' => \\Drupal::VERSION,",
            "\t\t\t\t'severity' => REQUIREMENT_INFO,",
            "\t\t\t];",
            "\t\t}",
            "\t",
            "\t\t// Test PHP version",
            "\t\t\\$$requirements['php'] = [",
            "\t\t\t'title' => t('PHP'),",
            "\t\t\t'value' => (\\$$phase == 'runtime') ? \\Drupal::l(phpversion(), new Url('system.php')) : phpversion(),",
            "\t\t];",
            "\t\tif (version_compare(phpversion(), DRUPAL_MINIMUM_PHP) < 0) {",
            "\t\t\t\\$$requirements['php']['description'] = t('Your PHP installation is too old. Drupal requires at least PHP %version.', ['%version' => DRUPAL_MINIMUM_PHP]);",
            "\t\t\t\\$$requirements['php']['severity'] = REQUIREMENT_ERROR;",
            "\t\t}",
            "\t",
            "\t\t// Report cron status",
            "\t\tif (\\$$phase == 'runtime') {",
            "\t\t\t\\$$cron_last = \\Drupal::state()->get('system.cron_last');",
            "\t",
            "\t\t\tif (is_numeric(\\$$cron_last)) {",
            "\t\t\t\t\\$$requirements['cron']['value'] = t('Last run @time ago', ['@time' => \\Drupal::service('date.formatter')->formatTimeDiffSince(\\$$cron_last)]);",
            "\t\t\t}",
            "\t\t\telse {",
            "\t\t\t\t\\$$requirements['cron'] = [",
            "\t\t\t\t\t'description' => t('Cron has not run. It appears cron jobs have not been setup on your system. Check the help pages for <a href=\":url\">configuring cron jobs</a>.', [':url' => 'https://www.drupal.org/cron']),",
            "\t\t\t\t\t'severity' => REQUIREMENT_ERROR,",
            "\t\t\t\t\t'value' => t('Never run'),",
            "\t\t\t\t];",
            "\t\t\t}",
            "\t",
            "\t\t\t\\$$requirements['cron']['description'] .= ' ' . t('You can <a href=\":cron\">run cron manually</a>.', [':cron' => \\Drupal::url('system.run_cron')]);",
            "\t",
            "\t\t\t\\$$requirements['cron']['title'] = t('Cron maintenance tasks');",
            "\t\t}",
            "\t",
            "\t\treturn \\$$requirements;",
            "\t*/",
            "}"
        ],
        "description": "Check installation requirements and do status reporting.",
        "prefix": "hook_requirements",
        "scope": "php"
    },
    "hook_rest_relation_uri_alter": {
        "body": [
            "/**",
            "* Implements hook_rest_relation_uri_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_rest_relation_uri_alter(&\\$$uri, \\$$context = []) {",
            "",
            "\t/*",
            "\t\tif (\\$$context['mymodule'] == TRUE) {",
            "\t\t\t\\$$base = \\Drupal::config('serialization.settings')->get('link_domain');",
            "\t\t\t\\$$uri = str_replace(\\$$base, 'http://mymodule.domain', \\$$uri);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter the REST relation URI.",
        "prefix": "hook_rest_relation_uri_alter",
        "scope": "php"
    },
    "hook_rest_resource_alter": {
        "body": [
            "/**",
            "* Implements hook_rest_resource_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_rest_resource_alter(&\\$$definitions) {",
            "",
            "\t/*",
            "\t\tif (isset(\\$$definitions['entity:node'])) {",
            "\t\t\t// We want to handle REST requests regarding nodes with our own plugin",
            "\t\t\t// class.",
            "\t\t\t\\$$definitions['entity:node']['class'] = 'Drupal\\mymodule\\Plugin\\rest\\resource\\NodeResource';",
            "\t\t\t// Serialized nodes should be expanded to my specific node class.",
            "\t\t\t\\$$definitions['entity:node']['serialization_class'] = 'Drupal\\mymodule\\Entity\\MyNode';",
            "\t\t}",
            "\t\t// We don't want Views to show up in the array of plugins at all.",
            "\t\tunset(\\$$definitions['entity:view']);",
            "\t*/",
            "}"
        ],
        "description": "Alter the resource plugin definitions.",
        "prefix": "hook_rest_resource_alter",
        "scope": "php"
    },
    "hook_rest_type_uri_alter": {
        "body": [
            "/**",
            "* Implements hook_rest_type_uri_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_rest_type_uri_alter(&\\$$uri, \\$$context = []) {",
            "",
            "\t/*",
            "\t\tif (\\$$context['mymodule'] == TRUE) {",
            "\t\t\t\\$$base = \\Drupal::config('serialization.settings')->get('link_domain');",
            "\t\t\t\\$$uri = str_replace(\\$$base, 'http://mymodule.domain', \\$$uri);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter the REST type URI.",
        "prefix": "hook_rest_type_uri_alter",
        "scope": "php"
    },
    "hook_schema": {
        "body": [
            "/**",
            "* Implements hook_schema().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_schema() {",
            "",
            "\t/*",
            "\t\t\\$$schema['users_data'] = [",
            "\t\t\t'description' => 'Stores module data as key/value pairs per user.',",
            "\t\t\t'fields' => [",
            "\t\t\t\t'uid' => [",
            "\t\t\t\t\t'description' => 'The {users}.uid this record affects.',",
            "\t\t\t\t\t'type' => 'int',",
            "\t\t\t\t\t'unsigned' => TRUE,",
            "\t\t\t\t\t'not null' => TRUE,",
            "\t\t\t\t\t'default' => 0,",
            "\t\t\t\t],",
            "\t\t\t\t'module' => [",
            "\t\t\t\t\t'description' => 'The name of the module declaring the variable.',",
            "\t\t\t\t\t'type' => 'varchar_ascii',",
            "\t\t\t\t\t'length' => DRUPAL_EXTENSION_NAME_MAX_LENGTH,",
            "\t\t\t\t\t'not null' => TRUE,",
            "\t\t\t\t\t'default' => '',",
            "\t\t\t\t],",
            "\t\t\t\t'name' => [",
            "\t\t\t\t\t'description' => 'The identifier of the data.',",
            "\t\t\t\t\t'type' => 'varchar_ascii',",
            "\t\t\t\t\t'length' => 128,",
            "\t\t\t\t\t'not null' => TRUE,",
            "\t\t\t\t\t'default' => '',",
            "\t\t\t\t],",
            "\t\t\t\t'value' => [",
            "\t\t\t\t\t'description' => 'The value.',",
            "\t\t\t\t\t'type' => 'blob',",
            "\t\t\t\t\t'not null' => FALSE,",
            "\t\t\t\t\t'size' => 'big',",
            "\t\t\t\t],",
            "\t\t\t\t'serialized' => [",
            "\t\t\t\t\t'description' => 'Whether value is serialized.',",
            "\t\t\t\t\t'type' => 'int',",
            "\t\t\t\t\t'size' => 'tiny',",
            "\t\t\t\t\t'unsigned' => TRUE,",
            "\t\t\t\t\t'default' => 0,",
            "\t\t\t\t],",
            "\t\t\t],",
            "\t\t\t'primary key' => ['uid', 'module', 'name'],",
            "\t\t\t'indexes' => [",
            "\t\t\t\t'module' => ['module'],",
            "\t\t\t\t'name' => ['name'],",
            "\t\t\t],",
            "\t\t\t// For documentation purposes only; foreign keys are not created in the",
            "\t\t\t// database.",
            "\t\t\t'foreign keys' => [",
            "\t\t\t\t'data_user' => [",
            "\t\t\t\t\t'table' => 'users',",
            "\t\t\t\t\t'columns' => [",
            "\t\t\t\t\t\t'uid' => 'uid',",
            "\t\t\t\t\t],",
            "\t\t\t\t],",
            "\t\t\t],",
            "\t\t];",
            "\t",
            "\t\treturn \\$$schema;",
            "\t*/",
            "}"
        ],
        "description": "Define the current version of the database schema.",
        "prefix": "hook_schema",
        "scope": "php"
    },
    "hook_search_plugin_alter": {
        "body": [
            "/**",
            "* Implements hook_search_plugin_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_search_plugin_alter(array &\\$$definitions) {",
            "",
            "\t/*",
            "\t\tif (isset(\\$$definitions['node_search'])) {",
            "\t\t\t\\$$definitions['node_search']['title'] = t('Nodes');",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter search plugin definitions.",
        "prefix": "hook_search_plugin_alter",
        "scope": "php"
    },
    "hook_search_preprocess": {
        "body": [
            "/**",
            "* Implements hook_search_preprocess().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_search_preprocess(\\$$text, \\$$langcode = NULL) {",
            "",
            "\t/*",
            "\t\t// If the language is not set, get it from the language manager.",
            "\t\tif (!isset(\\$$langcode)) {",
            "\t\t\t\\$$langcode = \\Drupal::languageManager()->getCurrentLanguage()->getId();",
            "\t\t}",
            "\t",
            "\t\t// If the langcode is set to 'en' then add variations of the word \"testing\"",
            "\t\t// which can also be found during English language searches.",
            "\t\tif (\\$$langcode == 'en') {",
            "\t\t\t// Add the alternate verb forms for the word \"testing\".",
            "\t\t\tif (\\$$text == 'we are testing') {",
            "\t\t\t\t\\$$text .= ' test tested';",
            "\t\t\t}",
            "\t\t}",
            "\t",
            "\t\treturn \\$$text;",
            "\t*/",
            "}"
        ],
        "description": "Preprocess text for search.",
        "prefix": "hook_search_preprocess",
        "scope": "php"
    },
    "hook_shortcut_default_set": {
        "body": [
            "/**",
            "* Implements hook_shortcut_default_set().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_shortcut_default_set(\\$$account) {",
            "",
            "\t/*",
            "\t\t// Use a special set of default shortcuts for administrators only.",
            "\t\t\\$$roles = \\Drupal::entityManager()->getStorage('user_role')->loadByProperties(['is_admin' => TRUE]);",
            "\t\t\\$$user_admin_roles = array_intersect(array_keys(\\$$roles), \\$$account->getRoles());",
            "\t\tif (\\$$user_admin_roles) {",
            "\t\t\treturn 'admin-shortcuts';",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Return the name of a default shortcut set for the provided user account.",
        "prefix": "hook_shortcut_default_set",
        "scope": "php"
    },
    "hook_simpletest_alter": {
        "body": [
            "/**",
            "* Implements hook_simpletest_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_simpletest_alter(&\\$$groups) {",
            "",
            "\t/*",
            "\t\t// An alternative session handler module would not want to run the original",
            "\t\t// Session HTTPS handling test because it checks the sessions table in the",
            "\t\t// database.",
            "\t\tunset(\\$$groups['Session']['testHttpsSession']);",
            "\t*/",
            "}"
        ],
        "description": "Alter the list of tests.",
        "prefix": "hook_simpletest_alter",
        "scope": "php"
    },
    "hook_system_breadcrumb_alter": {
        "body": [
            "/**",
            "* Implements hook_system_breadcrumb_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_system_breadcrumb_alter(\\Drupal\\Core\\Breadcrumb\\Breadcrumb &\\$$breadcrumb, \\Drupal\\Core\\Routing\\RouteMatchInterface \\$$route_match, array \\$$context) {",
            "",
            "\t/*",
            "\t\t// Add an item to the end of the breadcrumb.",
            "\t\t\\$$breadcrumb->addLink(\\Drupal\\Core\\Link::createFromRoute(t('Text'), 'example_route_name'));",
            "\t*/",
            "}"
        ],
        "description": "Perform alterations to the breadcrumb built by the BreadcrumbManager.",
        "prefix": "hook_system_breadcrumb_alter",
        "scope": "php"
    },
    "hook_system_info_alter": {
        "body": [
            "/**",
            "* Implements hook_system_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_system_info_alter(array &\\$$info, \\Drupal\\Core\\Extension\\Extension \\$$file, \\$$type) {",
            "",
            "\t/*",
            "\t\t// Only fill this in if the .info.yml file does not define a 'datestamp'.",
            "\t\tif (empty(\\$$info['datestamp'])) {",
            "\t\t\t\\$$info['datestamp'] = \\$$file->getMTime();",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter the information parsed from module and theme .info.yml files.",
        "prefix": "hook_system_info_alter",
        "scope": "php"
    },
    "hook_system_themes_page_alter": {
        "body": [
            "/**",
            "* Implements hook_system_themes_page_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_system_themes_page_alter(&\\$$theme_groups) {",
            "",
            "\t/*",
            "\t\tforeach (\\$$theme_groups as \\$$state => &\\$$group) {",
            "\t\t\tforeach (\\$$theme_groups[\\$$state] as &\\$$theme) {",
            "\t\t\t\t// Add a foo link to each list of theme operations.",
            "\t\t\t\t\\$$theme->operations[] = [",
            "\t\t\t\t\t'title' => t('Foo'),",
            "\t\t\t\t\t'url' => Url::fromRoute('system.themes_page'),",
            "\t\t\t\t\t'query' => ['theme' => \\$$theme->getName()],",
            "\t\t\t\t];",
            "\t\t\t}",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alters theme operation links.",
        "prefix": "hook_system_themes_page_alter",
        "scope": "php"
    },
    "hook_template_preprocess_default_variables_alter": {
        "body": [
            "/**",
            "* Implements hook_template_preprocess_default_variables_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_template_preprocess_default_variables_alter(&\\$$variables) {",
            "",
            "\t/*",
            "\t\t\\$$variables['is_admin'] = \\Drupal::currentUser()->hasPermission('access administration pages');",
            "\t*/",
            "}"
        ],
        "description": "Alter the default, hook-independent variables for all templates.",
        "prefix": "hook_template_preprocess_default_variables_alter",
        "scope": "php"
    },
    "hook_test_finished": {
        "body": [
            "/**",
            "* Implements hook_test_finished().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_test_finished(\\$$results) {",
            "",
            "\t/*",
            "\t*/",
            "}"
        ],
        "description": "An individual test has finished.",
        "prefix": "hook_test_finished",
        "scope": "php"
    },
    "hook_test_group_finished": {
        "body": [
            "/**",
            "* Implements hook_test_group_finished().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_test_group_finished() {",
            "",
            "\t/*",
            "\t*/",
            "}"
        ],
        "description": "A test group has finished.",
        "prefix": "hook_test_group_finished",
        "scope": "php"
    },
    "hook_test_group_started": {
        "body": [
            "/**",
            "* Implements hook_test_group_started().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_test_group_started() {",
            "",
            "\t/*",
            "\t*/",
            "}"
        ],
        "description": "A test group has started.",
        "prefix": "hook_test_group_started",
        "scope": "php"
    },
    "hook_theme": {
        "body": [
            "/**",
            "* Implements hook_theme().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_theme(\\$$existing, \\$$type, \\$$theme, \\$$path) {",
            "",
            "\t/*",
            "\t\treturn [",
            "\t\t\t'forum_display' => [",
            "\t\t\t\t'variables' => ['forums' => NULL, 'topics' => NULL, 'parents' => NULL, 'tid' => NULL, 'sortby' => NULL, 'forum_per_page' => NULL],",
            "\t\t\t],",
            "\t\t\t'forum_list' => [",
            "\t\t\t\t'variables' => ['forums' => NULL, 'parents' => NULL, 'tid' => NULL],",
            "\t\t\t],",
            "\t\t\t'forum_icon' => [",
            "\t\t\t\t'variables' => ['new_posts' => NULL, 'num_posts' => 0, 'comment_mode' => 0, 'sticky' => 0],",
            "\t\t\t],",
            "\t\t\t'status_report' => [",
            "\t\t\t\t'render element' => 'requirements',",
            "\t\t\t\t'file' => 'system.admin.inc',",
            "\t\t\t],",
            "\t\t];",
            "\t*/",
            "}"
        ],
        "description": "Register a module or theme's theme implementations.",
        "prefix": "hook_theme",
        "scope": "php"
    },
    "hook_theme_registry_alter": {
        "body": [
            "/**",
            "* Implements hook_theme_registry_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_theme_registry_alter(&\\$$theme_registry) {",
            "",
            "\t/*",
            "\t\t// Kill the next/previous forum topic navigation links.",
            "\t\tforeach (\\$$theme_registry['forum_topic_navigation']['preprocess functions'] as \\$$key => \\$$value) {",
            "\t\t\tif (\\$$value == 'template_preprocess_forum_topic_navigation') {",
            "\t\t\t\tunset(\\$$theme_registry['forum_topic_navigation']['preprocess functions'][\\$$key]);",
            "\t\t\t}",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter the theme registry information returned from hook_theme().",
        "prefix": "hook_theme_registry_alter",
        "scope": "php"
    },
    "hook_theme_suggestions_HOOK": {
        "body": [
            "/**",
            "* Implements hook_theme_suggestions_HOOK().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_theme_suggestions_HOOK(array \\$$variables) {",
            "",
            "\t/*",
            "\t\t\\$$suggestions = [];",
            "\t",
            "\t\t\\$$suggestions[] = 'hookname__' . \\$$variables['elements']['#langcode'];",
            "\t",
            "\t\treturn \\$$suggestions;",
            "\t*/",
            "}"
        ],
        "description": "Provides alternate named suggestions for a specific theme hook.",
        "prefix": "hook_theme_suggestions_HOOK",
        "scope": "php"
    },
    "hook_theme_suggestions_HOOK_alter": {
        "body": [
            "/**",
            "* Implements hook_theme_suggestions_HOOK_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_theme_suggestions_HOOK_alter(array &\\$$suggestions, array \\$$variables) {",
            "",
            "\t/*",
            "\t\tif (empty(\\$$variables['header'])) {",
            "\t\t\t\\$$suggestions[] = 'hookname__' . 'no_header';",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alters named suggestions for a specific theme hook.",
        "prefix": "hook_theme_suggestions_HOOK_alter",
        "scope": "php"
    },
    "hook_theme_suggestions_alter": {
        "body": [
            "/**",
            "* Implements hook_theme_suggestions_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_theme_suggestions_alter(array &\\$$suggestions, array \\$$variables, \\$$hook) {",
            "",
            "\t/*",
            "\t\t// Add an interface-language specific suggestion to all theme hooks.",
            "\t\t\\$$suggestions[] = \\$$hook . '__' . \\Drupal::languageManager()->getCurrentLanguage()->getId();",
            "\t*/",
            "}"
        ],
        "description": "Alters named suggestions for all theme hooks.",
        "prefix": "hook_theme_suggestions_alter",
        "scope": "php"
    },
    "hook_themes_installed": {
        "body": [
            "/**",
            "* Implements hook_themes_installed().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_themes_installed(\\$$theme_list) {",
            "",
            "\t/*",
            "\t\tforeach (\\$$theme_list as \\$$theme) {",
            "\t\t\tblock_theme_initialize(\\$$theme);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Respond to themes being installed.",
        "prefix": "hook_themes_installed",
        "scope": "php"
    },
    "hook_themes_uninstalled": {
        "body": [
            "/**",
            "* Implements hook_themes_uninstalled().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_themes_uninstalled(array \\$$themes) {",
            "",
            "\t/*",
            "\t\t// Remove some state entries depending on the theme.",
            "\t\tforeach (\\$$themes as \\$$theme) {",
            "\t\t\t\\Drupal::state()->delete('example.' . \\$$theme);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Respond to themes being uninstalled.",
        "prefix": "hook_themes_uninstalled",
        "scope": "php"
    },
    "hook_token_info": {
        "body": [
            "/**",
            "* Implements hook_token_info().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_token_info() {",
            "",
            "\t/*",
            "\t\t\\$$type = [",
            "\t\t\t'name' => t('Nodes'),",
            "\t\t\t'description' => t('Tokens related to individual nodes.'),",
            "\t\t\t'needs-data' => 'node',",
            "\t\t];",
            "\t",
            "\t\t// Core tokens for nodes.",
            "\t\t\\$$node['nid'] = [",
            "\t\t\t'name' => t(\"Node ID\"),",
            "\t\t\t'description' => t(\"The unique ID of the node.\"),",
            "\t\t];",
            "\t\t\\$$node['title'] = [",
            "\t\t\t'name' => t(\"Title\"),",
            "\t\t];",
            "\t\t\\$$node['edit-url'] = [",
            "\t\t\t'name' => t(\"Edit URL\"),",
            "\t\t\t'description' => t(\"The URL of the node's edit page.\"),",
            "\t\t];",
            "\t",
            "\t\t// Chained tokens for nodes.",
            "\t\t\\$$node['created'] = [",
            "\t\t\t'name' => t(\"Date created\"),",
            "\t\t\t'type' => 'date',",
            "\t\t];",
            "\t\t\\$$node['author'] = [",
            "\t\t\t'name' => t(\"Author\"),",
            "\t\t\t'type' => 'user',",
            "\t\t];",
            "\t",
            "\t\treturn [",
            "\t\t\t'types' => ['node' => \\$$type],",
            "\t\t\t'tokens' => ['node' => \\$$node],",
            "\t\t];",
            "\t*/",
            "}"
        ],
        "description": "Provide information about available placeholder tokens and token types.",
        "prefix": "hook_token_info",
        "scope": "php"
    },
    "hook_token_info_alter": {
        "body": [
            "/**",
            "* Implements hook_token_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_token_info_alter(&\\$$data) {",
            "",
            "\t/*",
            "\t\t// Modify description of node tokens for our site.",
            "\t\t\\$$data['tokens']['node']['nid'] = [",
            "\t\t\t'name' => t(\"Node ID\"),",
            "\t\t\t'description' => t(\"The unique ID of the article.\"),",
            "\t\t];",
            "\t\t\\$$data['tokens']['node']['title'] = [",
            "\t\t\t'name' => t(\"Title\"),",
            "\t\t\t'description' => t(\"The title of the article.\"),",
            "\t\t];",
            "\t",
            "\t\t// Chained tokens for nodes.",
            "\t\t\\$$data['tokens']['node']['created'] = [",
            "\t\t\t'name' => t(\"Date created\"),",
            "\t\t\t'description' => t(\"The date the article was posted.\"),",
            "\t\t\t'type' => 'date',",
            "\t\t];",
            "\t*/",
            "}"
        ],
        "description": "Alter the metadata about available placeholder tokens and token types.",
        "prefix": "hook_token_info_alter",
        "scope": "php"
    },
    "hook_tokens": {
        "body": [
            "/**",
            "* Implements hook_tokens().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_tokens(\\$$type, \\$$tokens, array \\$$data, array \\$$options, \\Drupal\\Core\\Render\\BubbleableMetadata \\$$bubbleable_metadata) {",
            "",
            "\t/*",
            "\t\t\\$$token_service = \\Drupal::token();",
            "\t",
            "\t\t\\$$url_options = ['absolute' => TRUE];",
            "\t\tif (isset(\\$$options['langcode'])) {",
            "\t\t\t\\$$url_options['language'] = \\Drupal::languageManager()->getLanguage(\\$$options['langcode']);",
            "\t\t\t\\$$langcode = \\$$options['langcode'];",
            "\t\t}",
            "\t\telse {",
            "\t\t\t\\$$langcode = NULL;",
            "\t\t}",
            "\t\t\\$$replacements = [];",
            "\t",
            "\t\tif (\\$$type == 'node' && !empty(\\$$data['node'])) {",
            "\t\t\t// @var \\Drupal\\node\\NodeInterface \\$$node ",
            "\t\t\t\\$$node = \\$$data['node'];",
            "\t",
            "\t\t\tforeach (\\$$tokens as \\$$name => \\$$original) {",
            "\t\t\t\tswitch (\\$$name) {",
            "\t\t\t\t\t// Simple key values on the node.",
            "\t\t\t\t\tcase 'nid':",
            "\t\t\t\t\t\t\\$$replacements[\\$$original] = \\$$node->nid;",
            "\t\t\t\t\t\tbreak;",
            "\t",
            "\t\t\t\t\tcase 'title':",
            "\t\t\t\t\t\t\\$$replacements[\\$$original] = \\$$node->getTitle();",
            "\t\t\t\t\t\tbreak;",
            "\t",
            "\t\t\t\t\tcase 'edit-url':",
            "\t\t\t\t\t\t\\$$replacements[\\$$original] = \\$$node->url('edit-form', \\$$url_options);",
            "\t\t\t\t\t\tbreak;",
            "\t",
            "\t\t\t\t\t// Default values for the chained tokens handled below.",
            "\t\t\t\t\tcase 'author':",
            "\t\t\t\t\t\t\\$$account = \\$$node->getOwner() ? \\$$node->getOwner() : User::load(0);",
            "\t\t\t\t\t\t\\$$replacements[\\$$original] = \\$$account->label();",
            "\t\t\t\t\t\t\\$$bubbleable_metadata->addCacheableDependency(\\$$account);",
            "\t\t\t\t\t\tbreak;",
            "\t",
            "\t\t\t\t\tcase 'created':",
            "\t\t\t\t\t\t\\$$replacements[\\$$original] = format_date(\\$$node->getCreatedTime(), 'medium', '', NULL, \\$$langcode);",
            "\t\t\t\t\t\tbreak;",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t",
            "\t\t\tif (\\$$author_tokens = \\$$token_service->findWithPrefix(\\$$tokens, 'author')) {",
            "\t\t\t\t\\$$replacements += \\$$token_service->generate('user', \\$$author_tokens, ['user' => \\$$node->getOwner()], \\$$options, \\$$bubbleable_metadata);",
            "\t\t\t}",
            "\t",
            "\t\t\tif (\\$$created_tokens = \\$$token_service->findWithPrefix(\\$$tokens, 'created')) {",
            "\t\t\t\t\\$$replacements += \\$$token_service->generate('date', \\$$created_tokens, ['date' => \\$$node->getCreatedTime()], \\$$options, \\$$bubbleable_metadata);",
            "\t\t\t}",
            "\t\t}",
            "\t",
            "\t\treturn \\$$replacements;",
            "\t*/",
            "}"
        ],
        "description": "Provide replacement values for placeholder tokens.",
        "prefix": "hook_tokens",
        "scope": "php"
    },
    "hook_tokens_alter": {
        "body": [
            "/**",
            "* Implements hook_tokens_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_tokens_alter(array &\\$$replacements, array \\$$context, \\Drupal\\Core\\Render\\BubbleableMetadata \\$$bubbleable_metadata) {",
            "",
            "\t/*",
            "\t\t\\$$options = \\$$context['options'];",
            "\t",
            "\t\tif (isset(\\$$options['langcode'])) {",
            "\t\t\t\\$$url_options['language'] = \\Drupal::languageManager()->getLanguage(\\$$options['langcode']);",
            "\t\t\t\\$$langcode = \\$$options['langcode'];",
            "\t\t}",
            "\t\telse {",
            "\t\t\t\\$$langcode = NULL;",
            "\t\t}",
            "\t",
            "\t\tif (\\$$context['type'] == 'node' && !empty(\\$$context['data']['node'])) {",
            "\t\t\t\\$$node = \\$$context['data']['node'];",
            "\t",
            "\t\t\t// Alter the [node:title] token, and replace it with the rendered content",
            "\t\t\t// of a field (field_title).",
            "\t\t\tif (isset(\\$$context['tokens']['title'])) {",
            "\t\t\t\t\\$$title = \\$$node->field_title->view('default');",
            "\t\t\t\t\\$$replacements[\\$$context['tokens']['title']] = drupal_render(\\$$title);",
            "\t\t\t}",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter replacement values for placeholder tokens.",
        "prefix": "hook_tokens_alter",
        "scope": "php"
    },
    "hook_toolbar": {
        "body": [
            "/**",
            "* Implements hook_toolbar().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_toolbar() {",
            "",
            "\t/*",
            "\t\t\\$$items = [];",
            "\t",
            "\t\t// Add a search field to the toolbar. The search field employs no toolbar",
            "\t\t// module theming functions.",
            "\t\t\\$$items['global_search'] = [",
            "\t\t\t'#type' => 'toolbar_item',",
            "\t\t\t'tab' => [",
            "\t\t\t\t'#type' => 'search',",
            "\t\t\t\t'#attributes' => [",
            "\t\t\t\t\t'placeholder' => t('Search the site'),",
            "\t\t\t\t\t'class' => ['search-global'],",
            "\t\t\t\t],",
            "\t\t\t],",
            "\t\t\t'#weight' => 200,",
            "\t\t\t// Custom CSS, JS or a library can be associated with the toolbar item.",
            "\t\t\t'#attached' => [",
            "\t\t\t\t'library' => [",
            "\t\t\t\t\t'search/global',",
            "\t\t\t\t],",
            "\t\t\t],",
            "\t\t];",
            "\t",
            "\t\t// The 'Home' tab is a simple link, which is wrapped in markup associated",
            "\t\t// with a visual tab styling.",
            "\t\t\\$$items['home'] = [",
            "\t\t\t'#type' => 'toolbar_item',",
            "\t\t\t'tab' => [",
            "\t\t\t\t'#type' => 'link',",
            "\t\t\t\t'#title' => t('Home'),",
            "\t\t\t\t'#url' => Url::fromRoute('<front>'),",
            "\t\t\t\t'#options' => [",
            "\t\t\t\t\t'attributes' => [",
            "\t\t\t\t\t\t'title' => t('Home page'),",
            "\t\t\t\t\t\t'class' => ['toolbar-icon', 'toolbar-icon-home'],",
            "\t\t\t\t\t],",
            "\t\t\t\t],",
            "\t\t\t],",
            "\t\t\t'#weight' => -20,",
            "\t\t];",
            "\t",
            "\t\t// A tray may be associated with a tab.",
            "\t\t//",
            "\t\t// When the tab is activated, the tray will become visible, either in a",
            "\t\t// horizontal or vertical orientation on the screen.",
            "\t\t//",
            "\t\t// The tray should contain a renderable array. An optional #heading property",
            "\t\t// can be passed. This text is written to a heading tag in the tray as a",
            "\t\t// landmark for accessibility.",
            "\t\t\\$$items['commerce'] = [",
            "\t\t\t'#type' => 'toolbar_item',",
            "\t\t\t'tab' => [",
            "\t\t\t\t'#type' => 'link',",
            "\t\t\t\t'#title' => t('Shopping cart'),",
            "\t\t\t\t'#url' => Url::fromRoute('cart'),",
            "\t\t\t\t'#options' => [",
            "\t\t\t\t\t'attributes' => [",
            "\t\t\t\t\t\t'title' => t('Shopping cart'),",
            "\t\t\t\t\t],",
            "\t\t\t\t],",
            "\t\t\t],",
            "\t\t\t'tray' => [",
            "\t\t\t\t'#heading' => t('Shopping cart actions'),",
            "\t\t\t\t'shopping_cart' => [",
            "\t\t\t\t\t'#theme' => 'item_list',",
            "\t\t\t\t\t'#items' => [/* An item list renderable array ],",
            "\t\t\t\t],",
            "\t\t\t],",
            "\t\t\t'#weight' => 150,",
            "\t\t];",
            "\t",
            "\t\t// The tray can be used to render arbitrary content.",
            "\t\t//",
            "\t\t// A renderable array passed to the 'tray' property will be rendered outside",
            "\t\t// the administration bar but within the containing toolbar element.",
            "\t\t//",
            "\t\t// If the default behavior and styling of a toolbar tray is not desired, one",
            "\t\t// can render content to the toolbar element and apply custom theming and",
            "\t\t// behaviors.",
            "\t\t\\$$items['user_messages'] = [",
            "\t\t\t// Include the toolbar_tab_wrapper to style the link like a toolbar tab.",
            "\t\t\t// Exclude the theme wrapper if custom styling is desired.",
            "\t\t\t'#type' => 'toolbar_item',",
            "\t\t\t'tab' => [",
            "\t\t\t\t'#type' => 'link',",
            "\t\t\t\t'#theme' => 'user_message_toolbar_tab',",
            "\t\t\t\t'#theme_wrappers' => [],",
            "\t\t\t\t'#title' => t('Messages'),",
            "\t\t\t\t'#url' => Url::fromRoute('user.message'),",
            "\t\t\t\t'#options' => [",
            "\t\t\t\t\t'attributes' => [",
            "\t\t\t\t\t\t'title' => t('Messages'),",
            "\t\t\t\t\t],",
            "\t\t\t\t],",
            "\t\t\t],",
            "\t\t\t'tray' => [",
            "\t\t\t\t'#heading' => t('User messages'),",
            "\t\t\t\t'messages' => [/* renderable content ],",
            "\t\t\t],",
            "\t\t\t'#weight' => 125,",
            "\t\t];",
            "\t",
            "\t\treturn \\$$items;",
            "\t*/",
            "}"
        ],
        "description": "Add items to the toolbar menu.",
        "prefix": "hook_toolbar",
        "scope": "php"
    },
    "hook_toolbar_alter": {
        "body": [
            "/**",
            "* Implements hook_toolbar_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_toolbar_alter(&\\$$items) {",
            "",
            "\t/*",
            "\t\t// Move the User tab to the right.",
            "\t\t\\$$items['commerce']['#weight'] = 5;",
            "\t*/",
            "}"
        ],
        "description": "Alter the toolbar menu after hook_toolbar() is invoked.",
        "prefix": "hook_toolbar_alter",
        "scope": "php"
    },
    "hook_tour_tips_alter": {
        "body": [
            "/**",
            "* Implements hook_tour_tips_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_tour_tips_alter(array &\\$$tour_tips, Drupal\\Core\\Entity\\EntityInterface \\$$entity) {",
            "",
            "\t/*",
            "\t\tforeach (\\$$tour_tips as \\$$tour_tip) {",
            "\t\t\tif (\\$$tour_tip->get('id') == 'tour-code-test-1') {",
            "\t\t\t\t\\$$tour_tip->set('body', 'Altered by hook_tour_tips_alter');",
            "\t\t\t}",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Allow modules to alter tour items before render.",
        "prefix": "hook_tour_tips_alter",
        "scope": "php"
    },
    "hook_tour_tips_info_alter": {
        "body": [
            "/**",
            "* Implements hook_tour_tips_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_tour_tips_info_alter(&\\$$info) {",
            "",
            "\t/*",
            "\t\t// Swap out the class used for this tip plugin.",
            "\t\tif (isset(\\$$info['text'])) {",
            "\t\t\t\\$$info['class'] = 'Drupal\\mymodule\\Plugin\\tour\\tip\\MyCustomTipPlugin';",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Allow modules to alter tip plugin definitions.",
        "prefix": "hook_tour_tips_info_alter",
        "scope": "php"
    },
    "hook_transliteration_overrides_alter": {
        "body": [
            "/**",
            "* Implements hook_transliteration_overrides_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_transliteration_overrides_alter(&\\$$overrides, \\$$langcode) {",
            "",
            "\t/*",
            "\t\t// Provide special overrides for German for a custom site.",
            "\t\tif (\\$$langcode == 'de') {",
            "\t\t\t// The core-provided transliteration of \u00c4 is Ae, but we want just A.",
            "\t\t\t\\$$overrides[0xC4] = 'A';",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Provide language-specific overrides for transliteration.",
        "prefix": "hook_transliteration_overrides_alter",
        "scope": "php"
    },
    "hook_uninstall": {
        "body": [
            "/**",
            "* Implements hook_uninstall().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_uninstall() {",
            "",
            "\t/*",
            "\t\t// Remove the styles directory and generated images.",
            "\t\tfile_unmanaged_delete_recursive(file_default_scheme() . '://styles');",
            "\t*/",
            "}"
        ],
        "description": "Remove any information that the module sets.",
        "prefix": "hook_uninstall",
        "scope": "php"
    },
    "hook_update_N": {
        "body": [
            "/**",
            "* Implements hook_update_N().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_update_N(&\\$$sandbox) {",
            "",
            "\t/*",
            "\t\t// For non-batch updates, the signature can simply be:",
            "\t\t// function hook_update_N() {",
            "\t",
            "\t\t// Example function body for adding a field to a database table, which does",
            "\t\t// not require a batch operation:",
            "\t\t\\$$spec = [",
            "\t\t\t'type' => 'varchar',",
            "\t\t\t'description' => \"New Col\",",
            "\t\t\t'length' => 20,",
            "\t\t\t'not null' => FALSE,",
            "\t\t];",
            "\t\t\\$$schema = Database::getConnection()->schema();",
            "\t\t\\$$schema->addField('mytable1', 'newcol', \\$$spec);",
            "\t",
            "\t\t// Example of what to do if there is an error during your update.",
            "\t\tif (\\$$some_error_condition_met) {",
            "\t\t\tthrow new UpdateException('Something went wrong; here is what you should do.');",
            "\t\t}",
            "\t",
            "\t\t// Example function body for a batch update. In this example, the values in",
            "\t\t// a database field are updated.",
            "\t\tif (!isset(\\$$sandbox['progress'])) {",
            "\t\t\t// This must be the first run. Initialize the sandbox.",
            "\t\t\t\\$$sandbox['progress'] = 0;",
            "\t\t\t\\$$sandbox['current_pk'] = 0;",
            "\t\t\t\\$$sandbox['max'] = Database::getConnection()->query('SELECT COUNT(myprimarykey) FROM {mytable1}')->fetchField() - 1;",
            "\t\t}",
            "\t",
            "\t\t// Update in chunks of 20.",
            "\t\t\\$$records = Database::getConnection()->select('mytable1', 'm')",
            "\t\t\t->fields('m', ['myprimarykey', 'otherfield'])",
            "\t\t\t->condition('myprimarykey', \\$$sandbox['current_pk'], '>')",
            "\t\t\t->range(0, 20)",
            "\t\t\t->orderBy('myprimarykey', 'ASC')",
            "\t\t\t->execute();",
            "\t\tforeach (\\$$records as \\$$record) {",
            "\t\t\t// Here, you would make an update something related to this record. In this",
            "\t\t\t// example, some text is added to the other field.",
            "\t\t\tDatabase::getConnection()->update('mytable1')",
            "\t\t\t\t->fields(['otherfield' => \\$$record->otherfield . '-suffix'])",
            "\t\t\t\t->condition('myprimarykey', \\$$record->myprimarykey)",
            "\t\t\t\t->execute();",
            "\t",
            "\t\t\t\\$$sandbox['progress']++;",
            "\t\t\t\\$$sandbox['current_pk'] = \\$$record->myprimarykey;",
            "\t\t}",
            "\t",
            "\t\t\\$$sandbox['#finished'] = empty(\\$$sandbox['max']) ? 1 : (\\$$sandbox['progress'] / \\$$sandbox['max']);",
            "\t",
            "\t\t// To display a message to the user when the update is completed, return it.",
            "\t\t// If you do not want to display a completion message, return nothing.",
            "\t\treturn t('All foo bars were updated with the new suffix');",
            "\t*/",
            "}"
        ],
        "description": "Perform a single update between minor versions.",
        "prefix": "hook_update_N",
        "scope": "php"
    },
    "hook_update_dependencies": {
        "body": [
            "/**",
            "* Implements hook_update_dependencies().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_update_dependencies() {",
            "",
            "\t/*",
            "\t\t// Indicate that the mymodule_update_8001() function provided by this module",
            "\t\t// must run after the another_module_update_8003() function provided by the",
            "\t\t// 'another_module' module.",
            "\t\t\\$$dependencies['mymodule'][8001] = [",
            "\t\t\t'another_module' => 8003,",
            "\t\t];",
            "\t\t// Indicate that the mymodule_update_8002() function provided by this module",
            "\t\t// must run before the yet_another_module_update_8005() function provided by",
            "\t\t// the 'yet_another_module' module. (Note that declaring dependencies in this",
            "\t\t// direction should be done only in rare situations, since it can lead to the",
            "\t\t// following problem: If a site has already run the yet_another_module",
            "\t\t// module's database updates before it updates its codebase to pick up the",
            "\t\t// newest mymodule code, then the dependency declared here will be ignored.)",
            "\t\t\\$$dependencies['yet_another_module'][8005] = [",
            "\t\t\t'mymodule' => 8002,",
            "\t\t];",
            "\t\treturn \\$$dependencies;",
            "\t*/",
            "}"
        ],
        "description": "Return an array of information about module update dependencies.",
        "prefix": "hook_update_dependencies",
        "scope": "php"
    },
    "hook_update_last_removed": {
        "body": [
            "/**",
            "* Implements hook_update_last_removed().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_update_last_removed() {",
            "",
            "\t/*",
            "\t\t// We've removed the 8.x-1.x version of mymodule, including database updates.",
            "\t\t// The next update function is mymodule_update_8200().",
            "\t\treturn 8103;",
            "\t*/",
            "}"
        ],
        "description": "Return a number which is no longer available as hook_update_N().",
        "prefix": "hook_update_last_removed",
        "scope": "php"
    },
    "hook_update_projects_alter": {
        "body": [
            "/**",
            "* Implements hook_update_projects_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_update_projects_alter(&\\$$projects) {",
            "",
            "\t/*",
            "\t\t// Hide a site-specific module from the list.",
            "\t\tunset(\\$$projects['site_specific_module']);",
            "\t",
            "\t\t// Add a disabled module to the list.",
            "\t\t// The key for the array should be the machine-readable project \"short name\".",
            "\t\t\\$$projects['disabled_project_name'] = [",
            "\t\t\t// Machine-readable project short name (same as the array key above).",
            "\t\t\t'name' => 'disabled_project_name',",
            "\t\t\t// Array of values from the main .info.yml file for this project.",
            "\t\t\t'info' => [",
            "\t\t\t\t'name' => 'Some disabled module',",
            "\t\t\t\t'description' => 'A module not enabled on the site that you want to see in the available updates report.',",
            "\t\t\t\t'version' => '8.x-1.0',",
            "\t\t\t\t'core' => '8.x',",
            "\t\t\t\t// The maximum file change time (the \"ctime\" returned by the filectime()",
            "\t\t\t\t// PHP method) for all of the .info.yml files included in this project.",
            "\t\t\t\t'_info_file_ctime' => 1243888165,",
            "\t\t\t],",
            "\t\t\t// The date stamp when the project was released, if known. If the disabled",
            "\t\t\t// project was an officially packaged release from drupal.org, this will",
            "\t\t\t// be included in the .info.yml file as the 'datestamp' field. This only",
            "\t\t\t// really matters for development snapshot releases that are regenerated,",
            "\t\t\t// so it can be left undefined or set to 0 in most cases.",
            "\t\t\t'datestamp' => 1243888185,",
            "\t\t\t// Any modules (or themes) included in this project. Keyed by machine-",
            "\t\t\t// readable \"short name\", value is the human-readable project name printed",
            "\t\t\t// in the UI.",
            "\t\t\t'includes' => [",
            "\t\t\t\t'disabled_project' => 'Disabled module',",
            "\t\t\t\t'disabled_project_helper' => 'Disabled module helper module',",
            "\t\t\t\t'disabled_project_foo' => 'Disabled module foo add-on module',",
            "\t\t\t],",
            "\t\t\t// Does this project contain a 'module', 'theme', 'disabled-module', or",
            "\t\t\t// 'disabled-theme'?",
            "\t\t\t'project_type' => 'disabled-module',",
            "\t\t];",
            "\t*/",
            "}"
        ],
        "description": "Alter the list of projects before fetching data and comparing versions.",
        "prefix": "hook_update_projects_alter",
        "scope": "php"
    },
    "hook_update_status_alter": {
        "body": [
            "/**",
            "* Implements hook_update_status_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_update_status_alter(&\\$$projects) {",
            "",
            "\t/*",
            "\t\t\\$$settings = \\Drupal::config('update_advanced.settings')->get('projects');",
            "\t\tforeach (\\$$projects as \\$$project => \\$$project_info) {",
            "\t\t\tif (isset(\\$$settings[\\$$project]) && isset(\\$$settings[\\$$project]['check']) &&",
            "\t\t\t\t\t(\\$$settings[\\$$project]['check'] == 'never' ||",
            "\t\t\t\t\t\t(isset(\\$$project_info['recommended']) &&",
            "\t\t\t\t\t\t\t\\$$settings[\\$$project]['check'] === \\$$project_info['recommended']))) {",
            "\t\t\t\t\\$$projects[\\$$project]['status'] = UPDATE_NOT_CHECKED;",
            "\t\t\t\t\\$$projects[\\$$project]['reason'] = t('Ignored from settings');",
            "\t\t\t\tif (!empty(\\$$settings[\\$$project]['notes'])) {",
            "\t\t\t\t\t\\$$projects[\\$$project]['extra'][] = [",
            "\t\t\t\t\t\t'class' => ['admin-note'],",
            "\t\t\t\t\t\t'label' => t('Administrator note'),",
            "\t\t\t\t\t\t'data' => \\$$settings[\\$$project]['notes'],",
            "\t\t\t\t\t];",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter the information about available updates for projects.",
        "prefix": "hook_update_status_alter",
        "scope": "php"
    },
    "hook_updater_info": {
        "body": [
            "/**",
            "* Implements hook_updater_info().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_updater_info() {",
            "",
            "\t/*",
            "\t\treturn [",
            "\t\t\t'module' => [",
            "\t\t\t\t'class' => 'Drupal\\Core\\Updater\\Module',",
            "\t\t\t\t'name' => t('Update modules'),",
            "\t\t\t\t'weight' => 0,",
            "\t\t\t],",
            "\t\t\t'theme' => [",
            "\t\t\t\t'class' => 'Drupal\\Core\\Updater\\Theme',",
            "\t\t\t\t'name' => t('Update themes'),",
            "\t\t\t\t'weight' => 0,",
            "\t\t\t],",
            "\t\t];",
            "\t*/",
            "}"
        ],
        "description": "Provide information on Updaters (classes that can update Drupal).",
        "prefix": "hook_updater_info",
        "scope": "php"
    },
    "hook_updater_info_alter": {
        "body": [
            "/**",
            "* Implements hook_updater_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_updater_info_alter(&\\$$updaters) {",
            "",
            "\t/*",
            "\t\t// Adjust weight so that the theme Updater gets a chance to handle a given",
            "\t\t// update task before module updaters.",
            "\t\t\\$$updaters['theme']['weight'] = -1;",
            "\t*/",
            "}"
        ],
        "description": "Alter the Updater information array.",
        "prefix": "hook_updater_info_alter",
        "scope": "php"
    },
    "hook_user_cancel": {
        "body": [
            "/**",
            "* Implements hook_user_cancel().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_user_cancel(\\$$edit, UserInterface \\$$account, \\$$method) {",
            "",
            "\t/*",
            "\t\tswitch (\\$$method) {",
            "\t\t\tcase 'user_cancel_block_unpublish':",
            "\t\t\t\t// Unpublish nodes (current revisions).",
            "\t\t\t\tmodule_load_include('inc', 'node', 'node.admin');",
            "\t\t\t\t\\$$nodes = \\Drupal::entityQuery('node')",
            "\t\t\t\t\t->condition('uid', \\$$account->id())",
            "\t\t\t\t\t->execute();",
            "\t\t\t\tnode_mass_update(\\$$nodes, ['status' => 0], NULL, TRUE);",
            "\t\t\t\tbreak;",
            "\t",
            "\t\t\tcase 'user_cancel_reassign':",
            "\t\t\t\t// Anonymize nodes (current revisions).",
            "\t\t\t\tmodule_load_include('inc', 'node', 'node.admin');",
            "\t\t\t\t\\$$nodes = \\Drupal::entityQuery('node')",
            "\t\t\t\t\t->condition('uid', \\$$account->id())",
            "\t\t\t\t\t->execute();",
            "\t\t\t\tnode_mass_update(\\$$nodes, ['uid' => 0], NULL, TRUE);",
            "\t\t\t\t// Anonymize old revisions.",
            "\t\t\t\tdb_update('node_field_revision')",
            "\t\t\t\t\t->fields(['uid' => 0])",
            "\t\t\t\t\t->condition('uid', \\$$account->id())",
            "\t\t\t\t\t->execute();",
            "\t\t\t\tbreak;",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Act on user account cancellations.",
        "prefix": "hook_user_cancel",
        "scope": "php"
    },
    "hook_user_cancel_methods_alter": {
        "body": [
            "/**",
            "* Implements hook_user_cancel_methods_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_user_cancel_methods_alter(&\\$$methods) {",
            "",
            "\t/*",
            "\t\t\\$$account = \\Drupal::currentUser();",
            "\t\t// Limit access to disable account and unpublish content method.",
            "\t\t\\$$methods['user_cancel_block_unpublish']['access'] = \\$$account->hasPermission('administer site configuration');",
            "\t",
            "\t\t// Remove the content re-assigning method.",
            "\t\tunset(\\$$methods['user_cancel_reassign']);",
            "\t",
            "\t\t// Add a custom zero-out method.",
            "\t\t\\$$methods['mymodule_zero_out'] = [",
            "\t\t\t'title' => t('Delete the account and remove all content.'),",
            "\t\t\t'description' => t('All your content will be replaced by empty strings.'),",
            "\t\t\t// access should be used for administrative methods only.",
            "\t\t\t'access' => \\$$account->hasPermission('access zero-out account cancellation method'),",
            "\t\t];",
            "\t*/",
            "}"
        ],
        "description": "Modify account cancellation methods.",
        "prefix": "hook_user_cancel_methods_alter",
        "scope": "php"
    },
    "hook_user_format_name_alter": {
        "body": [
            "/**",
            "* Implements hook_user_format_name_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_user_format_name_alter(&\\$$name, AccountInterface \\$$account) {",
            "",
            "\t/*",
            "\t\t// Display the user's uid instead of name.",
            "\t\tif (\\$$account->id()) {",
            "\t\t\t\\$$name = t('User @uid', ['@uid' => \\$$account->id()]);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter the username that is displayed for a user.",
        "prefix": "hook_user_format_name_alter",
        "scope": "php"
    },
    "hook_user_login": {
        "body": [
            "/**",
            "* Implements hook_user_login().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_user_login(UserInterface \\$$account) {",
            "",
            "\t/*",
            "\t\t\\$$config = \\Drupal::config('system.date');",
            "\t\t// If the user has a NULL time zone, notify them to set a time zone.",
            "\t\tif (!\\$$account->getTimezone() && \\$$config->get('timezone.user.configurable') && \\$$config->get('timezone.user.warn')) {",
            "\t\t\t\\Drupal::messenger()",
            "\t\t\t\t->addStatus(t('Configure your <a href=\":user-edit\">account time zone setting</a>.', [",
            "\t\t\t\t\t':user-edit' => \\$$account->url('edit-form', [",
            "\t\t\t\t\t\t'query' => \\Drupal::destination()",
            "\t\t\t\t\t\t\t->getAsArray(),",
            "\t\t\t\t\t\t'fragment' => 'edit-timezone',",
            "\t\t\t\t\t]),",
            "\t\t\t\t]));",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "The user just logged in.",
        "prefix": "hook_user_login",
        "scope": "php"
    },
    "hook_user_logout": {
        "body": [
            "/**",
            "* Implements hook_user_logout().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_user_logout(AccountInterface \\$$account) {",
            "",
            "\t/*",
            "\t\tdb_insert('logouts')",
            "\t\t\t->fields([",
            "\t\t\t\t'uid' => \\$$account->id(),",
            "\t\t\t\t'time' => time(),",
            "\t\t\t])",
            "\t\t\t->execute();",
            "\t*/",
            "}"
        ],
        "description": "The user just logged out.",
        "prefix": "hook_user_logout",
        "scope": "php"
    },
    "hook_validation_constraint_alter": {
        "body": [
            "/**",
            "* Implements hook_validation_constraint_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_validation_constraint_alter(array &\\$$definitions) {",
            "",
            "\t/*",
            "\t\t\\$$definitions['Null']['class'] = '\\Drupal\\mymodule\\Validator\\Constraints\\MyClass';",
            "\t*/",
            "}"
        ],
        "description": "Alter validation constraint plugin definitions.",
        "prefix": "hook_validation_constraint_alter",
        "scope": "php"
    },
    "hook_verify_update_archive": {
        "body": [
            "/**",
            "* Implements hook_verify_update_archive().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_verify_update_archive(\\$$project, \\$$archive_file, \\$$directory) {",
            "",
            "\t/*",
            "\t\t\\$$errors = [];",
            "\t\tif (!file_exists(\\$$directory)) {",
            "\t\t\t\\$$errors[] = t('The %directory does not exist.', ['%directory' => \\$$directory]);",
            "\t\t}",
            "\t\t// Add other checks on the archive integrity here.",
            "\t\treturn \\$$errors;",
            "\t*/",
            "}"
        ],
        "description": "Verify an archive after it has been downloaded and extracted.",
        "prefix": "hook_verify_update_archive",
        "scope": "php"
    },
    "hook_views_analyze": {
        "body": [
            "/**",
            "* Implements hook_views_analyze().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_analyze(Drupal\\views\\ViewExecutable \\$$view) {",
            "",
            "\t/*",
            "\t\t\\$$messages = [];",
            "\t",
            "\t\tif (\\$$view->display_handler->options['pager']['type'] == 'none') {",
            "\t\t\t\\$$messages[] = Drupal\\views\\Analyzer::formatMessage(t('This view has no pager. This could cause performance issues when the view contains many items.'), 'warning');",
            "\t\t}",
            "\t",
            "\t\treturn \\$$messages;",
            "\t*/",
            "}"
        ],
        "description": "Analyze a view to provide warnings about its configuration.",
        "prefix": "hook_views_analyze",
        "scope": "php"
    },
    "hook_views_data": {
        "body": [
            "/**",
            "* Implements hook_views_data().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_data() {",
            "",
            "\t/*",
            "\t\t// This example describes how to write hook_views_data() for a table defined",
            "\t\t// like this:",
            "\t\t// CREATE TABLE example_table (",
            "\t\t//\t nid INT(11) NOT NULL\t\t\t\t COMMENT 'Primary key: {node}.nid.',",
            "\t\t//\t plain_text_field VARCHAR(32) COMMENT 'Just a plain text field.',",
            "\t\t//\t numeric_field INT(11)\t\t\t\tCOMMENT 'Just a numeric field.',",
            "\t\t//\t boolean_field INT(1)\t\t\t\t COMMENT 'Just an on/off field.',",
            "\t\t//\t timestamp_field INT(8)\t\t\t COMMENT 'Just a timestamp field.',",
            "\t\t//\t langcode VARCHAR(12)\t\t\t\t COMMENT 'Language code field.',",
            "\t\t//\t PRIMARY KEY(nid)",
            "\t\t// );",
            "\t",
            "\t\t// Define the return array.",
            "\t\t\\$$data = [];",
            "\t",
            "\t\t// The outermost keys of \\$$data are Views table names, which should usually",
            "\t\t// be the same as the hook_schema() table names.",
            "\t\t\\$$data['example_table'] = [];",
            "\t",
            "\t\t// The value corresponding to key 'table' gives properties of the table",
            "\t\t// itself.",
            "\t\t\\$$data['example_table']['table'] = [];",
            "\t",
            "\t\t// Within 'table', the value of 'group' (translated string) is used as a",
            "\t\t// prefix in Views UI for this table's fields, filters, etc. When adding",
            "\t\t// a field, filter, etc. you can also filter by the group.",
            "\t\t\\$$data['example_table']['table']['group'] = t('Example table');",
            "\t",
            "\t\t// Within 'table', the value of 'provider' is the module that provides schema",
            "\t\t// or the entity type that causes the table to exist. Setting this ensures",
            "\t\t// that views have the correct dependencies. This is automatically set to the",
            "\t\t// module that implements hook_views_data().",
            "\t\t\\$$data['example_table']['table']['provider'] = 'example_module';",
            "\t",
            "\t\t// Some tables are \"base\" tables, meaning that they can be the base tables",
            "\t\t// for views. Non-base tables can only be brought in via relationships in",
            "\t\t// views based on other tables. To define a table to be a base table, add",
            "\t\t// key 'base' to the 'table' array:",
            "\t\t\\$$data['example_table']['table']['base'] = [",
            "\t\t\t// Identifier (primary) field in this table for Views.",
            "\t\t\t'field' => 'nid',",
            "\t\t\t// Label in the UI.",
            "\t\t\t'title' => t('Example table'),",
            "\t\t\t// Longer description in the UI. Required.",
            "\t\t\t'help' => t('Example table contains example content and can be related to nodes.'),",
            "\t\t\t'weight' => -10,",
            "\t\t];",
            "\t",
            "\t\t// Some tables have an implicit, automatic relationship to other tables,",
            "\t\t// meaning that when the other table is available in a view (either as the",
            "\t\t// base table or through a relationship), this table's fields, filters, etc.",
            "\t\t// are automatically made available without having to add an additional",
            "\t\t// relationship. To define an implicit relationship that will make your",
            "\t\t// table automatically available when another table is present, add a 'join'",
            "\t\t// section to your 'table' section. Note that it is usually only a good idea",
            "\t\t// to do this for one-to-one joins, because otherwise your automatic join",
            "\t\t// will add more rows to the view. It is also not a good idea to do this if",
            "\t\t// most views won't need your table -- if that is the case, define a",
            "\t\t// relationship instead (see below).",
            "\t\t//",
            "\t\t// If you've decided an automatic join is a good idea, here's how to do it;",
            "\t\t// the resulting SQL query will look something like this:",
            "\t\t//\t ... FROM example_table et ... JOIN node_field_data nfd",
            "\t\t//\t ON et.nid = nfd.nid AND ('extra' clauses will be here) ...",
            "\t\t// although the table aliases will be different.",
            "\t\t\\$$data['example_table']['table']['join'] = [",
            "\t\t\t// Within the 'join' section, list one or more tables to automatically",
            "\t\t\t// join to. In this example, every time 'node_field_data' is available in",
            "\t\t\t// a view, 'example_table' will be too. The array keys here are the array",
            "\t\t\t// keys for the other tables, given in their hook_views_data()",
            "\t\t\t// implementations. If the table listed here is from another module's",
            "\t\t\t// hook_views_data() implementation, make sure your module depends on that",
            "\t\t\t// other module.",
            "\t\t\t'node_field_data' => [",
            "\t\t\t\t// Primary key field in node_field_data to use in the join.",
            "\t\t\t\t'left_field' => 'nid',",
            "\t\t\t\t// Foreign key field in example_table to use in the join.",
            "\t\t\t\t'field' => 'nid',",
            "\t\t\t\t// 'extra' is an array of additional conditions on the join.",
            "\t\t\t\t'extra' => [",
            "\t\t\t\t\t0 => [",
            "\t\t\t\t\t\t// Adds AND node_field_data.published = TRUE to the join.",
            "\t\t\t\t\t\t'field' => 'published',",
            "\t\t\t\t\t\t'value' => TRUE,",
            "\t\t\t\t\t],",
            "\t\t\t\t\t1 => [",
            "\t\t\t\t\t\t// Adds AND example_table.numeric_field = 1 to the join.",
            "\t\t\t\t\t\t'left_field' => 'numeric_field',",
            "\t\t\t\t\t\t'value' => 1,",
            "\t\t\t\t\t\t// If true, the value will not be surrounded in quotes.",
            "\t\t\t\t\t\t'numeric' => TRUE,",
            "\t\t\t\t\t],",
            "\t\t\t\t\t2 => [",
            "\t\t\t\t\t\t// Adds AND example_table.boolean_field <>",
            "\t\t\t\t\t\t// node_field_data.published to the join.",
            "\t\t\t\t\t\t'field' => 'published',",
            "\t\t\t\t\t\t'left_field' => 'boolean_field',",
            "\t\t\t\t\t\t// The operator used, Defaults to \"=\".",
            "\t\t\t\t\t\t'operator' => '!=',",
            "\t\t\t\t\t],",
            "\t\t\t\t],",
            "\t\t\t],",
            "\t\t];",
            "\t",
            "\t\t// You can also do a more complex join, where in order to get to a certain",
            "\t\t// base table defined in a hook_views_data() implementation, you will join",
            "\t\t// to a different table that Views knows how to auto-join to the base table.",
            "\t\t// For instance, if another module that your module depends on had",
            "\t\t// defined a table 'foo' with an automatic join to 'node_field_table' (as",
            "\t\t// shown above), you could join to 'node_field_table' via the 'foo' table.",
            "\t\t// Here's how to do this, and the resulting SQL query would look something",
            "\t\t// like this:",
            "\t\t//\t ... FROM example_table et ... JOIN foo foo",
            "\t\t//\t ON et.nid = foo.nid AND ('extra' clauses will be here) ...",
            "\t\t//\t JOIN node_field_data nfd ON (definition of the join from the foo",
            "\t\t//\t module goes here) ...",
            "\t\t// although the table aliases will be different.",
            "\t\t\\$$data['example_table']['table']['join']['node_field_data'] = [",
            "\t\t\t// 'node_field_data' above is the base we're joining to in Views.",
            "\t\t\t// 'left_table' is the table we're actually joining to, in order to get to",
            "\t\t\t// 'node_field_data'. It has to be something that Views knows how to join",
            "\t\t\t// to 'node_field_data'.",
            "\t\t\t'left_table' => 'foo',",
            "\t\t\t'left_field' => 'nid',",
            "\t\t\t'field' => 'nid',",
            "\t\t\t// 'extra' is an array of additional conditions on the join.",
            "\t\t\t'extra' => [",
            "\t\t\t\t// This syntax matches additional fields in the two tables:",
            "\t\t\t\t// ... AND foo.langcode = example_table.langcode ...",
            "\t\t\t\t['left_field' => 'langcode', 'field' => 'langcode'],",
            "\t\t\t\t// This syntax adds a condition on our table. 'operator' defaults to",
            "\t\t\t\t// '=' for non-array values, or 'IN' for array values.",
            "\t\t\t\t// ... AND example_table.numeric_field > 0 ...",
            "\t\t\t\t['field' => 'numeric_field', 'value' => 0, 'numeric' => TRUE, 'operator' => '>'],",
            "\t\t\t],",
            "\t\t];",
            "\t",
            "\t\t// Other array elements at the top level of your table's array describe",
            "\t\t// individual database table fields made available to Views. The array keys",
            "\t\t// are the names (unique within the table) used by Views for the fields,",
            "\t\t// usually equal to the database field names.",
            "\t\t//",
            "\t\t// Each field entry must have the following elements:",
            "\t\t// - title: Translated label for the field in the UI.",
            "\t\t// - help: Description of the field in the UI.",
            "\t\t//",
            "\t\t// Each field entry may also have one or more of the following elements,",
            "\t\t// describing \"handlers\" (plugins) for the field:",
            "\t\t// - relationship: Specifies a handler that allows this field to be used",
            "\t\t//\t to define a relationship to another table in Views.",
            "\t\t// - field: Specifies a handler to make it available to Views as a field.",
            "\t\t// - filter: Specifies a handler to make it available to Views as a filter.",
            "\t\t// - sort: Specifies a handler to make it available to Views as a sort.",
            "\t\t// - argument: Specifies a handler to make it available to Views as an",
            "\t\t//\t argument, or contextual filter as it is known in the UI.",
            "\t\t// - area: Specifies a handler to make it available to Views to add content",
            "\t\t//\t to the header, footer, or as no result behavior.",
            "\t\t//",
            "\t\t// Note that when specifying handlers, you must give the handler plugin ID",
            "\t\t// and you may also specify overrides for various settings that make up the",
            "\t\t// plugin definition. See examples below; the Boolean example demonstrates",
            "\t\t// setting overrides.",
            "\t",
            "\t\t// Node ID field, exposed as relationship only, since it is a foreign key",
            "\t\t// in this table.",
            "\t\t\\$$data['example_table']['nid'] = [",
            "\t\t\t'title' => t('Example content'),",
            "\t\t\t'help' => t('Relate example content to the node content'),",
            "\t",
            "\t\t\t// Define a relationship to the node_field_data table, so views whose",
            "\t\t\t// base table is example_table can add a relationship to nodes. To make a",
            "\t\t\t// relationship in the other direction, you can:",
            "\t\t\t// - Use hook_views_data_alter() -- see the function body example on that",
            "\t\t\t//\t hook for details.",
            "\t\t\t// - Use the implicit join method described above.",
            "\t\t\t'relationship' => [",
            "\t\t\t\t// Views name of the table to join to for the relationship.",
            "\t\t\t\t'base' => 'node_field_data',",
            "\t\t\t\t// Database field name in the other table to join on.",
            "\t\t\t\t'base field' => 'nid',",
            "\t\t\t\t// ID of relationship handler plugin to use.",
            "\t\t\t\t'id' => 'standard',",
            "\t\t\t\t// Default label for relationship in the UI.",
            "\t\t\t\t'label' => t('Example node'),",
            "\t\t\t],",
            "\t\t];",
            "\t",
            "\t\t// Plain text field, exposed as a field, sort, filter, and argument.",
            "\t\t\\$$data['example_table']['plain_text_field'] = [",
            "\t\t\t'title' => t('Plain text field'),",
            "\t\t\t'help' => t('Just a plain text field.'),",
            "\t",
            "\t\t\t'field' => [",
            "\t\t\t\t// ID of field handler plugin to use.",
            "\t\t\t\t'id' => 'standard',",
            "\t\t\t],",
            "\t",
            "\t\t\t'sort' => [",
            "\t\t\t\t// ID of sort handler plugin to use.",
            "\t\t\t\t'id' => 'standard',",
            "\t\t\t],",
            "\t",
            "\t\t\t'filter' => [",
            "\t\t\t\t// ID of filter handler plugin to use.",
            "\t\t\t\t'id' => 'string',",
            "\t\t\t],",
            "\t",
            "\t\t\t'argument' => [",
            "\t\t\t\t// ID of argument handler plugin to use.",
            "\t\t\t\t'id' => 'string',",
            "\t\t\t],",
            "\t\t];",
            "\t",
            "\t\t// Numeric field, exposed as a field, sort, filter, and argument.",
            "\t\t\\$$data['example_table']['numeric_field'] = [",
            "\t\t\t'title' => t('Numeric field'),",
            "\t\t\t'help' => t('Just a numeric field.'),",
            "\t",
            "\t\t\t'field' => [",
            "\t\t\t\t// ID of field handler plugin to use.",
            "\t\t\t\t'id' => 'numeric',",
            "\t\t\t],",
            "\t",
            "\t\t\t'sort' => [",
            "\t\t\t\t// ID of sort handler plugin to use.",
            "\t\t\t\t'id' => 'standard',",
            "\t\t\t],",
            "\t",
            "\t\t\t'filter' => [",
            "\t\t\t\t// ID of filter handler plugin to use.",
            "\t\t\t\t'id' => 'numeric',",
            "\t\t\t],",
            "\t",
            "\t\t\t'argument' => [",
            "\t\t\t\t// ID of argument handler plugin to use.",
            "\t\t\t\t'id' => 'numeric',",
            "\t\t\t],",
            "\t\t];",
            "\t",
            "\t\t// Boolean field, exposed as a field, sort, and filter. The filter section",
            "\t\t// illustrates overriding various settings.",
            "\t\t\\$$data['example_table']['boolean_field'] = [",
            "\t\t\t'title' => t('Boolean field'),",
            "\t\t\t'help' => t('Just an on/off field.'),",
            "\t",
            "\t\t\t'field' => [",
            "\t\t\t\t// ID of field handler plugin to use.",
            "\t\t\t\t'id' => 'boolean',",
            "\t\t\t],",
            "\t",
            "\t\t\t'sort' => [",
            "\t\t\t\t// ID of sort handler plugin to use.",
            "\t\t\t\t'id' => 'standard',",
            "\t\t\t],",
            "\t",
            "\t\t\t'filter' => [",
            "\t\t\t\t// ID of filter handler plugin to use.",
            "\t\t\t\t'id' => 'boolean',",
            "\t\t\t\t// Override the generic field title, so that the filter uses a different",
            "\t\t\t\t// label in the UI.",
            "\t\t\t\t'label' => t('Published'),",
            "\t\t\t\t// Override the default BooleanOperator filter handler's 'type' setting,",
            "\t\t\t\t// to display this as a \"Yes/No\" filter instead of a \"True/False\" filter.",
            "\t\t\t\t'type' => 'yes-no',",
            "\t\t\t\t// Override the default Boolean filter handler's 'use_equal' setting, to",
            "\t\t\t\t// make the query use 'boolean_field = 1' instead of 'boolean_field <> 0'.",
            "\t\t\t\t'use_equal' => TRUE,",
            "\t\t\t],",
            "\t\t];",
            "\t",
            "\t\t// Integer timestamp field, exposed as a field, sort, and filter.",
            "\t\t\\$$data['example_table']['timestamp_field'] = [",
            "\t\t\t'title' => t('Timestamp field'),",
            "\t\t\t'help' => t('Just a timestamp field.'),",
            "\t",
            "\t\t\t'field' => [",
            "\t\t\t\t// ID of field handler plugin to use.",
            "\t\t\t\t'id' => 'date',",
            "\t\t\t],",
            "\t",
            "\t\t\t'sort' => [",
            "\t\t\t\t// ID of sort handler plugin to use.",
            "\t\t\t\t'id' => 'date',",
            "\t\t\t],",
            "\t",
            "\t\t\t'filter' => [",
            "\t\t\t\t// ID of filter handler plugin to use.",
            "\t\t\t\t'id' => 'date',",
            "\t\t\t],",
            "\t\t];",
            "\t",
            "\t\t// Area example. Areas are not generally associated with actual data",
            "\t\t// tables and fields. This example is from views_views_data(), which defines",
            "\t\t// the \"Global\" table (not really a table, but a group of Fields, Filters,",
            "\t\t// etc. that are grouped into section \"Global\" in the UI). Here's the",
            "\t\t// definition of the generic \"Text area\":",
            "\t\t\\$$data['views']['area'] = [",
            "\t\t\t'title' => t('Text area'),",
            "\t\t\t'help' => t('Provide markup text for the area.'),",
            "\t\t\t'area' => [",
            "\t\t\t\t// ID of the area handler plugin to use.",
            "\t\t\t\t'id' => 'text',",
            "\t\t\t],",
            "\t\t];",
            "\t",
            "\t\treturn \\$$data;",
            "\t*/",
            "}"
        ],
        "description": "Describe data tables and fields (or the equivalent) to Views.",
        "prefix": "hook_views_data",
        "scope": "php"
    },
    "hook_views_data_alter": {
        "body": [
            "/**",
            "* Implements hook_views_data_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_data_alter(array &\\$$data) {",
            "",
            "\t/*",
            "\t\t// Alter the title of the node_field_data:nid field in the Views UI.",
            "\t\t\\$$data['node_field_data']['nid']['title'] = t('Node-Nid');",
            "\t",
            "\t\t// Add an additional field to the users_field_data table.",
            "\t\t\\$$data['users_field_data']['example_field'] = [",
            "\t\t\t'title' => t('Example field'),",
            "\t\t\t'help' => t('Some example content that references a user'),",
            "\t",
            "\t\t\t'field' => [",
            "\t\t\t\t// ID of the field handler to use.",
            "\t\t\t\t'id' => 'example_field',",
            "\t\t\t],",
            "\t\t];",
            "\t",
            "\t\t// Change the handler of the node title field, presumably to a handler plugin",
            "\t\t// you define in your module. Give the ID of this plugin.",
            "\t\t\\$$data['node_field_data']['title']['field']['id'] = 'node_title';",
            "\t",
            "\t\t// Add a relationship that will allow a view whose base table is 'foo' (from",
            "\t\t// another module) to have a relationship to 'example_table' (from my module),",
            "\t\t// via joining foo.fid to example_table.eid.",
            "\t\t//",
            "\t\t// This relationship has to be added to the 'foo' Views data, which my module",
            "\t\t// does not control, so it must be done in hook_views_data_alter(), not",
            "\t\t// hook_views_data().",
            "\t\t//",
            "\t\t// In Views data definitions, each field can have only one relationship. So",
            "\t\t// rather than adding this relationship directly to the \\$$data['foo']['fid']",
            "\t\t// field entry, which could overwrite an existing relationship, we define",
            "\t\t// a dummy field key to handle the relationship.",
            "\t\t\\$$data['foo']['unique_dummy_name'] = [",
            "\t\t\t'title' => t('Title seen while adding relationship'),",
            "\t\t\t'help' => t('More information about the relationship'),",
            "\t",
            "\t\t\t'relationship' => [",
            "\t\t\t\t// Views name of the table being joined to from foo.",
            "\t\t\t\t'base' => 'example_table',",
            "\t\t\t\t// Database field name in example_table for the join.",
            "\t\t\t\t'base field' => 'eid',",
            "\t\t\t\t// Real database field name in foo for the join, to override",
            "\t\t\t\t// 'unique_dummy_name'.",
            "\t\t\t\t'field' => 'fid',",
            "\t\t\t\t// ID of relationship handler plugin to use.",
            "\t\t\t\t'id' => 'standard',",
            "\t\t\t\t'label' => t('Default label for relationship'),",
            "\t\t\t],",
            "\t\t];",
            "\t",
            "\t\t// Note that the \\$$data array is not returned \u2013 it is modified by reference.",
            "\t*/",
            "}"
        ],
        "description": "Alter the table and field information from hook_views_data().",
        "prefix": "hook_views_data_alter",
        "scope": "php"
    },
    "hook_views_form_substitutions": {
        "body": [
            "/**",
            "* Implements hook_views_form_substitutions().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_form_substitutions() {",
            "",
            "\t/*",
            "\t\treturn [",
            "\t\t\t'<!--views-form-example-substitutions-->' => 'Example Substitution',",
            "\t\t];",
            "\t*/",
            "}"
        ],
        "description": "Replace special strings when processing a view with form elements.",
        "prefix": "hook_views_form_substitutions",
        "scope": "php"
    },
    "hook_views_invalidate_cache": {
        "body": [
            "/**",
            "* Implements hook_views_invalidate_cache().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_invalidate_cache() {",
            "",
            "\t/*",
            "\t\t\\Drupal\\Core\\Cache\\Cache::invalidateTags(['views']);",
            "\t*/",
            "}"
        ],
        "description": "Allow modules to respond to the invalidation of the Views cache.",
        "prefix": "hook_views_invalidate_cache",
        "scope": "php"
    },
    "hook_views_plugins_access_alter": {
        "body": [
            "/**",
            "* Implements hook_views_plugins_access_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_plugins_access_alter(array &\\$$plugins) {",
            "",
            "\t/*",
            "\t\t// Remove the available plugin because the users should not have access to it.",
            "\t\tunset(\\$$plugins['role']);",
            "\t*/",
            "}"
        ],
        "description": "Modify the list of available views access plugins.",
        "prefix": "hook_views_plugins_access_alter",
        "scope": "php"
    },
    "hook_views_plugins_area_alter": {
        "body": [
            "/**",
            "* Implements hook_views_plugins_area_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_plugins_area_alter(array &\\$$plugins) {",
            "",
            "\t/*",
            "\t\t// Change the 'title' handler class.",
            "\t\t\\$$plugins['title']['class'] = 'Drupal\\\\example\\\\ExampleClass';",
            "\t*/",
            "}"
        ],
        "description": "Modify the list of available views area handler plugins.",
        "prefix": "hook_views_plugins_area_alter",
        "scope": "php"
    },
    "hook_views_plugins_argument_alter": {
        "body": [
            "/**",
            "* Implements hook_views_plugins_argument_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_plugins_argument_alter(array &\\$$plugins) {",
            "",
            "\t/*",
            "\t\t// Change the 'title' handler class.",
            "\t\t\\$$plugins['title']['class'] = 'Drupal\\\\example\\\\ExampleClass';",
            "\t*/",
            "}"
        ],
        "description": "Modify the list of available views argument handler plugins.",
        "prefix": "hook_views_plugins_argument_alter",
        "scope": "php"
    },
    "hook_views_plugins_argument_default_alter": {
        "body": [
            "/**",
            "* Implements hook_views_plugins_argument_default_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_plugins_argument_default_alter(array &\\$$plugins) {",
            "",
            "\t/*",
            "\t\t// Remove the available plugin because the users should not have access to it.",
            "\t\tunset(\\$$plugins['php']);",
            "\t*/",
            "}"
        ],
        "description": "Modify the list of available views default argument plugins.",
        "prefix": "hook_views_plugins_argument_default_alter",
        "scope": "php"
    },
    "hook_views_plugins_argument_validator_alter": {
        "body": [
            "/**",
            "* Implements hook_views_plugins_argument_validator_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_plugins_argument_validator_alter(array &\\$$plugins) {",
            "",
            "\t/*",
            "\t\t// Remove the available plugin because the users should not have access to it.",
            "\t\tunset(\\$$plugins['php']);",
            "\t*/",
            "}"
        ],
        "description": "Modify the list of available views argument validation plugins.",
        "prefix": "hook_views_plugins_argument_validator_alter",
        "scope": "php"
    },
    "hook_views_plugins_cache_alter": {
        "body": [
            "/**",
            "* Implements hook_views_plugins_cache_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_plugins_cache_alter(array &\\$$plugins) {",
            "",
            "\t/*",
            "\t\t// Change the title.",
            "\t\t\\$$plugins['time']['title'] = t('Custom title');",
            "\t*/",
            "}"
        ],
        "description": "Modify the list of available views cache plugins.",
        "prefix": "hook_views_plugins_cache_alter",
        "scope": "php"
    },
    "hook_views_plugins_display_alter": {
        "body": [
            "/**",
            "* Implements hook_views_plugins_display_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_plugins_display_alter(array &\\$$plugins) {",
            "",
            "\t/*",
            "\t\t// Alter the title of an existing plugin.",
            "\t\t\\$$plugins['rest_export']['title'] = t('Export');",
            "\t*/",
            "}"
        ],
        "description": "Modify the list of available views display plugins.",
        "prefix": "hook_views_plugins_display_alter",
        "scope": "php"
    },
    "hook_views_plugins_display_extenders_alter": {
        "body": [
            "/**",
            "* Implements hook_views_plugins_display_extenders_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_plugins_display_extenders_alter(array &\\$$plugins) {",
            "",
            "\t/*",
            "\t\t// Alter the title of an existing plugin.",
            "\t\t\\$$plugins['time']['title'] = t('Custom title');",
            "\t*/",
            "}"
        ],
        "description": "Modify the list of available views display extender plugins.",
        "prefix": "hook_views_plugins_display_extenders_alter",
        "scope": "php"
    },
    "hook_views_plugins_exposed_form_alter": {
        "body": [
            "/**",
            "* Implements hook_views_plugins_exposed_form_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_plugins_exposed_form_alter(array &\\$$plugins) {",
            "",
            "\t/*",
            "\t\t// Remove the available plugin because the users should not have access to it.",
            "\t\tunset(\\$$plugins['input_required']);",
            "\t*/",
            "}"
        ],
        "description": "Modify the list of available views exposed form plugins.",
        "prefix": "hook_views_plugins_exposed_form_alter",
        "scope": "php"
    },
    "hook_views_plugins_field_alter": {
        "body": [
            "/**",
            "* Implements hook_views_plugins_field_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_plugins_field_alter(array &\\$$plugins) {",
            "",
            "\t/*",
            "\t\t// Change the 'title' handler class.",
            "\t\t\\$$plugins['title']['class'] = 'Drupal\\\\example\\\\ExampleClass';",
            "\t*/",
            "}"
        ],
        "description": "Modify the list of available views field handler plugins.",
        "prefix": "hook_views_plugins_field_alter",
        "scope": "php"
    },
    "hook_views_plugins_filter_alter": {
        "body": [
            "/**",
            "* Implements hook_views_plugins_filter_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_plugins_filter_alter(array &\\$$plugins) {",
            "",
            "\t/*",
            "\t\t// Change the 'title' handler class.",
            "\t\t\\$$plugins['title']['class'] = 'Drupal\\\\example\\\\ExampleClass';",
            "\t*/",
            "}"
        ],
        "description": "Modify the list of available views filter handler plugins.",
        "prefix": "hook_views_plugins_filter_alter",
        "scope": "php"
    },
    "hook_views_plugins_join_alter": {
        "body": [
            "/**",
            "* Implements hook_views_plugins_join_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_plugins_join_alter(array &\\$$plugins) {",
            "",
            "\t/*",
            "\t\t// Print out all join plugin names for debugging purposes.",
            "\t\tdebug(\\$$plugins);",
            "\t*/",
            "}"
        ],
        "description": "Modify the list of available views join plugins.",
        "prefix": "hook_views_plugins_join_alter",
        "scope": "php"
    },
    "hook_views_plugins_pager_alter": {
        "body": [
            "/**",
            "* Implements hook_views_plugins_pager_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_plugins_pager_alter(array &\\$$plugins) {",
            "",
            "\t/*",
            "\t\t// Remove the sql based plugin to force good performance.",
            "\t\tunset(\\$$plugins['full']);",
            "\t*/",
            "}"
        ],
        "description": "Modify the list of available views pager plugins.",
        "prefix": "hook_views_plugins_pager_alter",
        "scope": "php"
    },
    "hook_views_plugins_query_alter": {
        "body": [
            "/**",
            "* Implements hook_views_plugins_query_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_plugins_query_alter(array &\\$$plugins) {",
            "",
            "\t/*",
            "\t\t// Print out all query plugin names for debugging purposes.",
            "\t\tdebug(\\$$plugins);",
            "\t*/",
            "}"
        ],
        "description": "Modify the list of available views query plugins.",
        "prefix": "hook_views_plugins_query_alter",
        "scope": "php"
    },
    "hook_views_plugins_relationship_alter": {
        "body": [
            "/**",
            "* Implements hook_views_plugins_relationship_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_plugins_relationship_alter(array &\\$$plugins) {",
            "",
            "\t/*",
            "\t\t// Change the 'title' handler class.",
            "\t\t\\$$plugins['title']['class'] = 'Drupal\\\\example\\\\ExampleClass';",
            "\t*/",
            "}"
        ],
        "description": "Modify the list of available views relationship handler plugins.",
        "prefix": "hook_views_plugins_relationship_alter",
        "scope": "php"
    },
    "hook_views_plugins_row_alter": {
        "body": [
            "/**",
            "* Implements hook_views_plugins_row_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_plugins_row_alter(array &\\$$plugins) {",
            "",
            "\t/*",
            "\t\t// Change the used class of a plugin.",
            "\t\t\\$$plugins['entity:node']['class'] = 'Drupal\\node\\Plugin\\views\\row\\NodeRow';",
            "\t\t\\$$plugins['entity:node']['module'] = 'node';",
            "\t*/",
            "}"
        ],
        "description": "Modify the list of available views row plugins.",
        "prefix": "hook_views_plugins_row_alter",
        "scope": "php"
    },
    "hook_views_plugins_sort_alter": {
        "body": [
            "/**",
            "* Implements hook_views_plugins_sort_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_plugins_sort_alter(array &\\$$plugins) {",
            "",
            "\t/*",
            "\t\t// Change the 'title' handler class.",
            "\t\t\\$$plugins['title']['class'] = 'Drupal\\\\example\\\\ExampleClass';",
            "\t*/",
            "}"
        ],
        "description": "Modify the list of available views sort handler plugins.",
        "prefix": "hook_views_plugins_sort_alter",
        "scope": "php"
    },
    "hook_views_plugins_style_alter": {
        "body": [
            "/**",
            "* Implements hook_views_plugins_style_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_plugins_style_alter(array &\\$$plugins) {",
            "",
            "\t/*",
            "\t\t// Change the theme hook of a plugin.",
            "\t\t\\$$plugins['html_list']['theme'] = 'custom_views_view_list';",
            "\t*/",
            "}"
        ],
        "description": "Modify the list of available views style plugins.",
        "prefix": "hook_views_plugins_style_alter",
        "scope": "php"
    },
    "hook_views_plugins_wizard_alter": {
        "body": [
            "/**",
            "* Implements hook_views_plugins_wizard_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_plugins_wizard_alter(array &\\$$plugins) {",
            "",
            "\t/*",
            "\t\t// Change the title of a plugin.",
            "\t\t\\$$plugins['node_revision']['title'] = t('Node revision wizard');",
            "\t*/",
            "}"
        ],
        "description": "Modify the list of available views wizard plugins.",
        "prefix": "hook_views_plugins_wizard_alter",
        "scope": "php"
    },
    "hook_views_post_build": {
        "body": [
            "/**",
            "* Implements hook_views_post_build().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_post_build(ViewExecutable \\$$view) {",
            "",
            "\t/*",
            "\t\t// If the exposed field 'type' is set, hide the column containing the content",
            "\t\t// type. (Note that this is a solution for a particular view, and makes",
            "\t\t// assumptions about both exposed filter settings and the fields in the view.",
            "\t\t// Also note that this alter could be done at any point before the view being",
            "\t\t// rendered.)",
            "\t\tif (\\$$view->id() == 'my_view' && isset(\\$$view->exposed_raw_input['type']) && \\$$view->exposed_raw_input['type'] != 'All') {",
            "\t\t\t// 'Type' should be interpreted as content type.",
            "\t\t\tif (isset(\\$$view->field['type'])) {",
            "\t\t\t\t\\$$view->field['type']->options['exclude'] = TRUE;",
            "\t\t\t}",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Act on the view immediately after the query is built.",
        "prefix": "hook_views_post_build",
        "scope": "php"
    },
    "hook_views_post_execute": {
        "body": [
            "/**",
            "* Implements hook_views_post_execute().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_post_execute(ViewExecutable \\$$view) {",
            "",
            "\t/*",
            "\t\t// If there are more than 100 results, show a message that encourages the user",
            "\t\t// to change the filter settings.",
            "\t\t// (This action could be performed later in the execution process, but not",
            "\t\t// earlier.)",
            "\t\tif (\\$$view->total_rows > 100) {",
            "\t\t\t\\Drupal::messenger()->addStatus(t('You have more than 100 hits. Use the filter settings to narrow down your list.'));",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Act on the view immediately after the query has been executed.",
        "prefix": "hook_views_post_execute",
        "scope": "php"
    },
    "hook_views_post_render": {
        "body": [
            "/**",
            "* Implements hook_views_post_render().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_post_render(ViewExecutable \\$$view, &\\$$output, CachePluginBase \\$$cache) {",
            "",
            "\t/*",
            "\t\t// When using full pager, disable any time-based caching if there are fewer",
            "\t\t// than 10 results.",
            "\t\tif (\\$$view->pager instanceof Drupal\\views\\Plugin\\views\\pager\\Full && \\$$cache instanceof Drupal\\views\\Plugin\\views\\cache\\Time && count(\\$$view->result) < 10) {",
            "\t\t\t\\$$cache->options['results_lifespan'] = 0;",
            "\t\t\t\\$$cache->options['output_lifespan'] = 0;",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Post-process any rendered data.",
        "prefix": "hook_views_post_render",
        "scope": "php"
    },
    "hook_views_pre_build": {
        "body": [
            "/**",
            "* Implements hook_views_pre_build().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_pre_build(ViewExecutable \\$$view) {",
            "",
            "\t/*",
            "\t\t// Because of some inexplicable business logic, we should remove all",
            "\t\t// attachments from all views on Mondays.",
            "\t\t// (This alter could be done later in the execution process as well.)",
            "\t\tif (date('D') == 'Mon') {",
            "\t\t\tunset(\\$$view->attachment_before);",
            "\t\t\tunset(\\$$view->attachment_after);",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Act on the view before the query is built, but after displays are attached.",
        "prefix": "hook_views_pre_build",
        "scope": "php"
    },
    "hook_views_pre_execute": {
        "body": [
            "/**",
            "* Implements hook_views_pre_execute().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_pre_execute(ViewExecutable \\$$view) {",
            "",
            "\t/*",
            "\t\t// Whenever a view queries more than two tables, show a message that notifies",
            "\t\t// view administrators that the query might be heavy.",
            "\t\t// (This action could be performed later in the execution process, but not",
            "\t\t// earlier.)",
            "\t\t\\$$account = \\Drupal::currentUser();",
            "\t",
            "\t\tif (count(\\$$view->query->tables) > 2 && \\$$account->hasPermission('administer views')) {",
            "\t\t\t\\Drupal::messenger()->addWarning(t('The view %view may be heavy to execute.', ['%view' => \\$$view->id()]));",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Act on the view after the query is built and just before it is executed.",
        "prefix": "hook_views_pre_execute",
        "scope": "php"
    },
    "hook_views_pre_render": {
        "body": [
            "/**",
            "* Implements hook_views_pre_render().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_pre_render(ViewExecutable \\$$view) {",
            "",
            "\t/*",
            "\t\t// Scramble the order of the rows shown on this result page.",
            "\t\t// Note that this could be done earlier, but not later in the view execution",
            "\t\t// process.",
            "\t\tshuffle(\\$$view->result);",
            "\t*/",
            "}"
        ],
        "description": "Act on the view immediately before rendering it.",
        "prefix": "hook_views_pre_render",
        "scope": "php"
    },
    "hook_views_pre_view": {
        "body": [
            "/**",
            "* Implements hook_views_pre_view().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_pre_view(ViewExecutable \\$$view, \\$$display_id, array &\\$$args) {",
            "",
            "\t/*",
            "\t",
            "\t\t// Modify contextual filters for my_special_view if user has 'my special permission'.",
            "\t\t\\$$account = \\Drupal::currentUser();",
            "\t",
            "\t\tif (\\$$view->id() == 'my_special_view' && \\$$account->hasPermission('my special permission') && \\$$display_id == 'public_display') {",
            "\t\t\t\\$$args[0] = 'custom value';",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter a view at the very beginning of Views processing.",
        "prefix": "hook_views_pre_view",
        "scope": "php"
    },
    "hook_views_preview_info_alter": {
        "body": [
            "/**",
            "* Implements hook_views_preview_info_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_preview_info_alter(array &\\$$rows, ViewExecutable \\$$view) {",
            "",
            "\t/*",
            "\t\t// Adds information about the tables being queried by the view to the query",
            "\t\t// part of the info box.",
            "\t\t\\$$rows['query'][] = [",
            "\t\t\tt('<strong>Table queue</strong>'),",
            "\t\t\tcount(\\$$view->query->table_queue) . ': (' . implode(', ', array_keys(\\$$view->query->table_queue)) . ')',",
            "\t\t];",
            "\t*/",
            "}"
        ],
        "description": "Alter the view preview information.",
        "prefix": "hook_views_preview_info_alter",
        "scope": "php"
    },
    "hook_views_query_alter": {
        "body": [
            "/**",
            "* Implements hook_views_query_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_query_alter(ViewExecutable \\$$view, QueryPluginBase \\$$query) {",
            "",
            "\t/*",
            "\t\t// (Example assuming a view with an exposed filter on node title.)",
            "\t\t// If the input for the title filter is a positive integer, filter against",
            "\t\t// node ID instead of node title.",
            "\t\tif (\\$$view->id() == 'my_view' && is_numeric(\\$$view->exposed_raw_input['title']) && \\$$view->exposed_raw_input['title'] > 0) {",
            "\t\t\t// Traverse through the 'where' part of the query.",
            "\t\t\tforeach (\\$$query->where as &\\$$condition_group) {",
            "\t\t\t\tforeach (\\$$condition_group['conditions'] as &\\$$condition) {",
            "\t\t\t\t\t// If this is the part of the query filtering on title, chang the",
            "\t\t\t\t\t// condition to filter on node ID.",
            "\t\t\t\t\tif (\\$$condition['field'] == 'node.title') {",
            "\t\t\t\t\t\t\\$$condition = [",
            "\t\t\t\t\t\t\t'field' => 'node.nid',",
            "\t\t\t\t\t\t\t'value' => \\$$view->exposed_raw_input['title'],",
            "\t\t\t\t\t\t\t'operator' => '=',",
            "\t\t\t\t\t\t];",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter the query before it is executed.",
        "prefix": "hook_views_query_alter",
        "scope": "php"
    },
    "hook_views_query_substitutions": {
        "body": [
            "/**",
            "* Implements hook_views_query_substitutions().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_query_substitutions(ViewExecutable \\$$view) {",
            "",
            "\t/*",
            "\t\t// Example from views_views_query_substitutions().",
            "\t\treturn [",
            "\t\t\t'***CURRENT_VERSION***' => \\Drupal::VERSION,",
            "\t\t\t'***CURRENT_TIME***' => REQUEST_TIME,",
            "\t\t\t'***LANGUAGE_language_content***' => \\Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId(),",
            "\t\t\tPluginBase::VIEWS_QUERY_LANGUAGE_SITE_DEFAULT => \\Drupal::languageManager()->getDefaultLanguage()->getId(),",
            "\t\t];",
            "\t*/",
            "}"
        ],
        "description": "Replace special strings in the query before it is executed.",
        "prefix": "hook_views_query_substitutions",
        "scope": "php"
    },
    "hook_views_ui_display_top_links_alter": {
        "body": [
            "/**",
            "* Implements hook_views_ui_display_top_links_alter().",
            "*/",
            "",
            "function ${TM_FILENAME/([^\\.]+)\\..*/${1}/}_views_ui_display_top_links_alter(array &\\$$links, ViewExecutable \\$$view, \\$$display_id) {",
            "",
            "\t/*",
            "\t\t// Put the export link first in the list.",
            "\t\tif (isset(\\$$links['export'])) {",
            "\t\t\t\\$$links = ['export' => \\$$links['export']] + \\$$links;",
            "\t\t}",
            "\t*/",
            "}"
        ],
        "description": "Alter the links displayed at the top of the view edit form.",
        "prefix": "hook_views_ui_display_top_links_alter",
        "scope": "php"
    }
}